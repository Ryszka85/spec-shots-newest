{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/private/add-tags-dialog/add-tags-dialog.component.html","webpack:///src/app/private/add-tags-dialog/add-tags-dialog.component.ts","webpack:///src/app/private/change-image-details-dialog/change-image-details-dialog.component.html","webpack:///src/app/private/change-image-details-dialog/change-image-details-dialog.component.ts","webpack:///src/app/private/edit-profile/edit-profile.component.html","webpack:///src/app/private/edit-profile/edit-profile.component.ts","webpack:///src/app/private/file-upload-wrapper/file-upload-wrapper.component.ts","webpack:///src/app/private/file-upload-wrapper/file-upload-wrapper.component.html","webpack:///src/app/private/file-upload/file-upload.component.html","webpack:///src/app/private/file-upload/file-upload.component.ts","webpack:///src/app/private/image-cropper/image-cropper.component.ts","webpack:///src/app/private/image-cropper/image-cropper.component.html","webpack:///src/app/private/upload-image-dialog/upload-image-dialog.component.ts","webpack:///src/app/private/upload-image-dialog/upload-image-dialog.component.html","webpack:///src/app/public/bootstrap-playground/bootstrap-playground.component.ts","webpack:///src/app/public/bootstrap-playground/bootstrap-playground.component.html","webpack:///src/app/public/download-cropped-image-dialog/download-cropped-image-dialog.component.html","webpack:///src/app/public/download-cropped-image-dialog/download-cropped-image-dialog.component.ts","webpack:///src/app/public/download-cropper/download-cropper.component.html","webpack:///src/app/public/download-cropper/download-cropper.component.ts","webpack:///src/app/public/image-details/image-details.component.html","webpack:///src/app/public/image-details/image-details.component.ts","webpack:///src/app/public/not-found-page/not-found-page.component.html","webpack:///src/app/public/not-found-page/not-found-page.component.ts","webpack:///src/app/public/profile/profile.component.html","webpack:///src/app/public/profile/profile.component.ts","webpack:///src/app/public/search-toolbar/search.toolbar.component.ts","webpack:///src/app/public/search-toolbar/search.toolbar.component.html","webpack:///src/app/public/set-resolution-download-dialog/set-resolution-download-dialog.component.html","webpack:///src/app/public/set-resolution-download-dialog/set-resolution-download-dialog.component.ts","webpack:///src/app/public/startup/startup.component.ts","webpack:///src/app/public/startup/startup.component.html","webpack:///src/app/public/welcome/image-by-tag.component.ts","webpack:///src/app/public/welcome/image-by-tag.component.html","webpack:///src/app/security/auth-security.guard.ts","webpack:///src/app/security/cookie-auth-interceptor.service.ts","webpack:///src/app/serviceV2/crop-and-download-resolver.service.ts","webpack:///src/app/serviceV2/delete-image.service.ts","webpack:///src/app/serviceV2/image-details-resolver.service.ts","webpack:///src/app/serviceV2/image-download.service.ts","webpack:///src/app/serviceV2/image-request.service.ts","webpack:///src/app/serviceV2/image-upload.service.ts","webpack:///src/app/serviceV2/search-by-users.service.ts","webpack:///src/app/serviceV2/search.request.service.ts","webpack:///src/app/serviceV2/tag-request.service.ts","webpack:///src/app/serviceV2/update-image-details.service.ts","webpack:///src/app/serviceV2/update-user.service.ts","webpack:///src/app/serviceV2/user-authentication.service.ts","webpack:///src/app/shared/app-state/actions/address-validation-action.ts","webpack:///src/app/shared/app-state/actions/authentication-action.ts","webpack:///src/app/shared/app-state/actions/image.action.ts","webpack:///src/app/shared/app-state/actions/query-tag-action.ts","webpack:///src/app/shared/app-state/actions/request-message.action.ts","webpack:///src/app/shared/app-state/actions/update-user-profile.action.ts","webpack:///src/app/shared/app-state/actions/user-details.action.ts","webpack:///src/app/shared/app-state/states/User-details.state.ts","webpack:///src/app/shared/app-state/states/address.validation.state.ts","webpack:///src/app/shared/app-state/states/crop-image.state.ts","webpack:///src/app/shared/app-state/states/delete-image.state.ts","webpack:///src/app/shared/app-state/states/download-details.state.ts","webpack:///src/app/shared/app-state/states/get-base64-for-downloadCropper.state.ts","webpack:///src/app/shared/app-state/states/get-image-by-id.state.ts","webpack:///src/app/shared/app-state/states/images-by-tag-state.ts","webpack:///src/app/shared/app-state/states/images-by-user-id.state.ts","webpack:///src/app/shared/app-state/states/logged-user-details.state.ts","webpack:///src/app/shared/app-state/states/login.state.model.ts","webpack:///src/app/shared/app-state/states/prepare-cropped-for-download.state.ts","webpack:///src/app/shared/app-state/states/related-images.state.ts","webpack:///src/app/shared/app-state/states/request-status.state.ts","webpack:///src/app/shared/app-state/states/search-by-tag.state.ts","webpack:///src/app/shared/app-state/states/search-by-users.state.ts","webpack:///src/app/shared/app-state/states/select-image.state.ts","webpack:///src/app/shared/app-state/states/signup.state.ts","webpack:///src/app/shared/app-state/states/update-user-profile-image.state.ts","webpack:///src/app/shared/app-state/states/upload-image.state.ts","webpack:///src/app/shared/dialog-wrapper/login-dialog-wrapper.component.ts","webpack:///src/app/shared/dialog-wrapper/login-dialog-wrapper.component.html","webpack:///src/app/shared/domain/address-model/user-address-model.ts","webpack:///src/app/shared/domain/imageModel/ImagesByTagNameQuery.ts","webpack:///src/app/shared/domain/userModel/UserLoginModel.ts","webpack:///src/app/shared/domain/userModel/user-details.model.ts","webpack:///src/app/shared/image-content/image-content.component.ts","webpack:///src/app/shared/image-content/image-content.component.html","webpack:///src/app/shared/image-detail-view/image-detail-view.component.ts","webpack:///src/app/shared/image-detail-view/image-detail-view.component.html","webpack:///src/app/shared/image-row-mapper.ts","webpack:///src/app/shared/login/login.component.ts","webpack:///src/app/shared/login/login.component.html","webpack:///src/app/shared/service/address-validation.service.ts","webpack:///src/app/shared/signup/signup.component.html","webpack:///src/app/shared/signup/signup.component.ts","webpack:///src/app/shared/user-gallery/user-gallery.component.html","webpack:///src/app/shared/user-gallery/user-gallery.component.ts","webpack:///src/app/shared/util/Base64ToBlobConverter.ts","webpack:///src/app/shared/util/blob-to-base64-pipe.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","canActivate","image","AppRoutingModule","forRoot","imports","AppComponent","router","title","events","subscribe","evt","window","scrollTo","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","useValue","autoLogin","providers","PROVIDER_ID","provider","google_id","declarations","bootstrap","AddTagsDialogComponent","store","imageService","data","dialogRef","searchTerm$","addChip","selectable","removable","separatorKeysCodes","tagCtrl","pipe","value","console","log","dispatch","tags$","tagList","result","selectedImage","selectSnapshot","getSelectedImageId","tag","index","findIndex","tagModel","splice","$event","input","trim","selectedTag","getFetchedTagList","find","push","setValue","option","viewValue","tagInput","nativeElement","userId","loggedUserId","setTagToImage","imageId","tags","GetUserDetails","close","search","add","selected","saveTags","ChangeImageDetailsDialogComponent","formBuilder","snackBar","updateImgService","deleteImageService","urlReference","isPublic","$detailsChanged","getSelectedImage","linkReference","$selectedImage","val","formGroup","group","tempPublic","get","regExp","RegExp","test","length","next","controls","setErrors","mrChange","img","changeImageDetails","status","open","duration","horizontalPosition","verticalPosition","getIsPublic","EditProfileComponent","service","firstNameControl","lastNameControl","emailControl","userNameControl","loggedUser","loggedInUser","userDetails","undefined","LoggedUserDetails","userDetailsResp","initFormGroup","firstName","lastName","email","username","userName","valueChanges","LoggedDetails","files","formData","FormData","append","UploadUserProfile","handleFileInput","profileImg","FileUploadWrapperComponent","dialog","route","paramMap","param","ref","width","height","disableClose","autoFocus","FileUploadComponent","location","http","dialogRef2","uploadService","isLinear","uploadSuccess","spinner","isValidating","showCropper","fooControl","imageUrlReference","isValidToUpload","displayCroppedImage","url","foo","firstFormGroup","uploadCtr","required","typeIndex","addedFiles","name","lastIndexOf","type","substr","size","request","validateImage","message","reader","FileReader","onload","base64Temp","target","croppedGalleryImage","croppedDownloadViewImage","readAsDataURL","onRemove","getCroppedDownloadImage","viewName","getData","f","indexOf","loggedInUserModel","isP","galleryBase64","imageBlob","dataURItoBlob","imageFile","File","downloadBase64","downloadBlob","downloadImageFile","uploadModel","orgFile","validate","file","galleryFile","downloadFile","value1","Upload","error","panelClass","base64","imageChangedEvent","changeStuff","onSelect","urlReferenceValidator","cropImageForGallery","cropImageForDownloadView","ImageCropperComponent","croppedImage","cropForView","cropped2","imageCropped","UploadImageDialogComponent","BootstrapPlaygroundComponent","DownloadCroppedImageDialogComponent","getCroppedValues","DownloadCropperComponent","fb","downloadService","showDimensions","croppedWidth","croppedHeight","loaded","cropper","x1","y1","x2","y2","imageFileDetails","getFileDetails","extractImageIdFromRequest","initFormFields","widthInputField","heightInputField","ratio","cropperPosition","wasCropped","toFixed","diffRatio","setTimeout","parsedWidth","Number","parseFloat","parsedHeight","getImageDetail","detail","croppedDownloadRequest","selectedWidth","split","selectedHeight","downloadIndividualImage","res","getBase64","getRatioAsString","ImageDetailsComponent","formattedDetails","downloadDetails","href","downloadLink","imageDetail","navigate","getRelatedImages","profileImgPath","getDetails","NotFoundPageComponent","getStatus","ProfileComponent","weekFilter","$imgs","$likeds","requestError","editableProfile","$userImages","model","UserDetails","errorMessage","$logged","label","tab","textLabel","imageWasLiked","firstLastName","getUserImages","getUserLikes","SearchUsers","SearchToolbarComponent","authService","openCloseDetails","searchOption","filterOptions","timeFilterOptions","checked","disabled","mostDownloads","mostLiked","monthFilter","yearFilter","IsLoggedIn","Authentication","user","filters","Map","set","FILTER_BY_DATE_WEEK","FILTER_BY_DATE_MONTH","FILTER_BY_DATE_YEAR","getFetchedUsers","filter","map","filteredUser","Logout","el","timeFilter","forEach","getFetchedTagListAsOption","isLoggedIn","loggedUsername","SetResolutionDownloadDialogComponent","widthFocus","heightFocus","imgSizeValidator","focusedInWidth","focusInHeight","control","forbidden","forbiddenValue","StartupComponent","ImageByTagComponent","deviceService","isMobile","AuthSecurityGuard","$test","state","providedIn","CookieAuthInterceptorService","clonedReq","clone","withCredentials","headers","handle","USER_LOGIN","GOOGLE_LOGIN","USER_DETAILS","statusText","CropAndDownloadResolverService","params","getImageBytes","byteArray","blob","Blob","getModel","DeleteImageService","post","DELETE_IMAGE_URL","observe","apiUrl","ImageDetailsResolverService","modelDetails","ImageDownloadService","base64Pipe","imageFileDetail","DOWNLOAD_BY_API_RESOLUTION_URL","croppedDetails","DOWNLOAD_BY_CROPPED_RESOLUTION_URL","DOWNLOAD_BY_INDIVIDUAL_RESOLUTION_URL","responseType","ImageRequestService","sanitizer","$bSubject","SEARCH_URL","UPLOAD_PROFILE_IMAGE","UPLOAD_TAG","RELATED_IMAGES_BY_TAG_IDS","GET_API_RESOLTIONS","imgId","GET_IMAGE_BYTES_BY_ID_URL","ALL_IMAGES_BY_IMG_ID","x","ALL_IMAGES_BY_USERID","page","resp","body","err","ImageUploadService","UPLOAD_IMAGE","VALIDATE_IMAGE","SearchByUsersService","searchReqService","SearchRequestService","searchTerm","getSearchResult","term","validateTerm","sendSearchRequest","terms","TagRequestService","secr","REQUEST_DELAY","UpdateImageDetailsService","UPDATE_IMAGE_DETAILS_URL","imageToUpdate","UpdateUserService","ADD_USER_LIKE","UserAuthenticationService","USER_SIGNUP","USER_LOGOUT","AUTH_STATUS","userSignupModel","userLoginModel","loginMethod","URL","GetZipCodesAndCitiesByRegion","zipcode","region","GetCountriesAction","GetRegionsAction","countryName","AuthenticationActions","LoginAction","LogoutAction","SignUpAction","userRegistration","ImagesByUserIDAction","ImagesByTagsAction","imagesByTag","ImagesNextPageAction","imageResponseModel","UploadImage","FilterByDate","limit","DeleteImage","SelectImage","GetDownloadDetails","GetImageByImageId","GetRelatedImagesByTagIDs","tagIds","GetImageAsByse64","CropAndDownload","CropDownloadViewImage","CropGalleryViewImage","SetCroppedOffsetValues","offsetX","offsetY","subImageWidth","subImageHeight","QueryTagAction","RequestMessageAction","requestStatus","UpdateUserProfileActions","UploadUserProfileImg","UserDetailsActions","UserDetailsState","imageRequestService","ctx","action","getUserDetails","response","getState","images","setState","likes","defaults","password","address","AddressValidationState","addressService","getCountries","getRegionsByCountry","regions","getZipCodesAndCitiesByRegion2","zipCodesAndCity","CropImageState","patchState","downloadViewFile","DeleteImageState","deleteService","deleteImage","DownloadDetailsState","downloadImage","contentType","fileDetails","GetBase64ForDownloadCropperState","GetImageByIdState","imgReqService","getImagesByImgId","newState","link","downloaded","liked","imageDetails","ImagesByTagState","filterOpt","dayFilterVal","filterByDays","getImagesByTag","tagName","mostDownloaded","imagResponseList","ImagesByUserIdState","getImagesByUserId","models","LoggedUserDetailsState","setUserProfile","LoginStateModel","loginType","login","logout","PrepareCroppedForDownloadState","possibleResolutions","getResolutions","widthList","widthResolution","heightList","heightResolution","RelatedImagesState","imageReqService","getRelatedImagesByTagList","RequestStatusState","SearchByTagState","tagService","searchByTagName","SearchByUsersState","userSearchService","users","SelectImageState","SignupState","createNewUser","UpdateUserProfileImageState","updateProfileService","UploadImageState","addToUserLibrary","LoginDialogWrapperComponent","UserAddressModel","street","country","FilterName","FILTER_BY_MOST_DOWNLOADS","FILTER_BY_MOST_LIKES","ImagesByTagNameWithFilterArgs","ImagesByTagNameWithFilterOpt","ImagesByTagNameQueryImpl","ImagesByTagNameStateModel","UserLoginModel","LoggedInUserModel","GoogleUserLogin","tokenId","UserRegistrationModel","UserDetailsImpl","ImageContentComponent","updateUserService","panelOpenState","hover","editable","Array","end","offset","evenRowLimit","rows","imageRowViews","mapToImageRow","$loggedUserId","i","viewport","getRenderedRange","total","getDataLength","lastSeen","item","isProfile","afterAllClosed","addUserLike","ImageDetailViewComponent","getSelectedLink","ImageRowMapper","imageModels","countRow","countItem","rowModels","temp","row","content","LoginComponent","googleAuthService","emailFormField","passwordFormField","signIn","photoUrl","idToken","value2","googleLogin","AddressValidationService","COUNTRIES","REGIONS","ZIPCODES","SignupComponent","invalid","countries$","regions$","color","zipCodeAndCities$","errorMsg","countryFormField","lastNameFormField","firstNameFormField","cityFormField","confirmPwdFormField","streetFormField","regionFormField","zipCodeFormField","hasError","controlName","errorName","confirmPassword","registrationModel$","zipAndCities","zipCode","city","enable","registrationModel","confirmPwd","pwd","register","closeDialog","checkPasswords","countries","zipCodesAndCities","UserGalleryComponent","$isOwner","$loggedUser","Base64ToBlobConverter","dataURI","byteString","atob","arrayBuffer","ArrayBuffer","int8Array","Uint8Array","charCodeAt","BlobToBase64Pipe","source","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {SignupComponent} from \"./shared/signup/signup.component\";\nimport {ProfileComponent} from \"./public/profile/profile.component\";\nimport {ImageByTagComponent} from \"./public/welcome/image-by-tag.component\";\nimport {AuthSecurityGuard} from \"./security/auth-security.guard\";\nimport {LoginDialogWrapperComponent} from \"./shared/dialog-wrapper/login-dialog-wrapper.component\";\nimport {FileUploadComponent} from \"./private/file-upload/file-upload.component\";\nimport {FileUploadWrapperComponent} from \"./private/file-upload-wrapper/file-upload-wrapper.component\";\nimport {UserGalleryComponent} from \"./shared/user-gallery/user-gallery.component\";\nimport {EditProfileComponent} from \"./private/edit-profile/edit-profile.component\";\nimport {ImageDetailsComponent} from \"./public/image-details/image-details.component\";\nimport {ImageDetailsResolverService} from \"./serviceV2/image-details-resolver.service\";\nimport {ProfileResolverService} from \"./public/profile/profile-resolver.service\";\nimport {DownloadCropperComponent} from \"./public/download-cropper/download-cropper.component\";\nimport {CropAndDownloadResolverService} from \"./serviceV2/crop-and-download-resolver.service\";\nimport {StartupComponent} from \"./public/startup/startup.component\";\nimport {NotFoundPageComponent} from \"./public/not-found-page/not-found-page.component\";\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'welcome',\n    pathMatch: 'full'\n  },\n  {\n    path: 'login',\n    component: LoginDialogWrapperComponent\n  },\n  {\n    path: 'profile',\n    component: ProfileComponent\n  },\n  {\n    path: 'upload',\n    component: FileUploadWrapperComponent,\n    canActivate: [AuthSecurityGuard]\n  },\n  {\n    path: 'welcome',\n    component: StartupComponent\n  },\n  {\n    path: 'image-by-tags',\n    component: ImageByTagComponent\n  },\n  {\n    path: 'gallery',\n    component: UserGalleryComponent\n  },\n  {\n    path: 'crop-download',\n    component: DownloadCropperComponent,\n    resolve : { image: CropAndDownloadResolverService }\n  },\n  {\n    path: 'image',\n    component: ImageDetailsComponent,\n    resolve : { image: ImageDetailsResolverService }\n  },\n  {\n    path: 'edit-profile',\n    component: EditProfileComponent,\n    canActivate: [AuthSecurityGuard]\n  },\n  {\n    path: 'not-found',\n    component: NotFoundPageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {NavigationEnd, Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  title = 'angularJavaImageREST';\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n    this.router.events.subscribe((evt) => {\n      if (!(evt instanceof NavigationEnd)) {\n        return;\n      }\n      window.scrollTo(0, 0)\n    });\n  }\n}\n","\n<!--<app-welcome></app-welcome>-->\n\n<!--<app-signup></app-signup>-->\n\n\n<router-outlet></router-outlet>\n","import { BrowserModule, HammerModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {CdkScrollableModule, ScrollingModule} from '@angular/cdk/scrolling';\nimport { SearchToolbarComponent } from './public/search-toolbar/search.toolbar.component';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport { ImageByTagComponent } from './public/welcome/image-by-tag.component';\nimport {NgxsModule} from \"@ngxs/store\";\nimport {NgxsLoggerPluginModule} from \"@ngxs/logger-plugin\";\nimport {ImagesByTagState} from \"./shared/app-state/states/images-by-tag-state\";\nimport {SearchByTagState} from \"./shared/app-state/states/search-by-tag.state\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatDividerModule} from \"@angular/material/divider\";\nimport { ImageContentComponent } from './shared/image-content/image-content.component';\nimport {MatGridListModule} from \"@angular/material/grid-list\";\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { SignupComponent } from './shared/signup/signup.component';\nimport {CookieAuthInterceptorService} from \"./security/cookie-auth-interceptor.service\";\nimport {LoginStateModel} from \"./shared/app-state/states/login.state.model\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatNativeDateModule} from \"@angular/material/core\";\nimport { LoginComponent } from './shared/login/login.component';\nimport {AddressValidationState} from \"./shared/app-state/states/address.validation.state\";\nimport {MatSelectModule} from '@angular/material/select';\nimport {SignupState} from \"./shared/app-state/states/signup.state\";\nimport { ProfileComponent } from './public/profile/profile.component';\nimport { LoginDialogWrapperComponent } from './shared/dialog-wrapper/login-dialog-wrapper.component';\nimport {NgxsRouterPluginModule} from \"@ngxs/router-plugin\";\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatCardModule} from '@angular/material/card';\nimport {UserDetailsState} from \"./shared/app-state/states/User-details.state\";\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {ImagesByUserIdState} from \"./shared/app-state/states/images-by-user-id.state\";\nimport { FileUploadComponent } from './private/file-upload/file-upload.component';\nimport {NgxDropzoneModule} from \"ngx-dropzone\";\nimport { FileUploadWrapperComponent } from './private/file-upload-wrapper/file-upload-wrapper.component';\nimport {UploadImageState} from \"./shared/app-state/states/upload-image.state\";\nimport { UserGalleryComponent } from './shared/user-gallery/user-gallery.component';\nimport { ImageDetailViewComponent } from './shared/image-detail-view/image-detail-view.component';\nimport {SelectImageState} from \"./shared/app-state/states/select-image.state\";\nimport { EditProfileComponent } from './private/edit-profile/edit-profile.component';\nimport {AuthenticationActions} from \"./shared/app-state/actions/authentication-action\";\nimport LoggedUserDetails = AuthenticationActions.LoggedUserDetails;\nimport {LoggedUserDetailsState} from \"./shared/app-state/states/logged-user-details.state\";\nimport { AddTagsDialogComponent } from './private/add-tags-dialog/add-tags-dialog.component';\nimport { MatChipsModule } from \"@angular/material/chips\";\nimport {UpdateUserProfileImageState} from \"./shared/app-state/states/update-user-profile-image.state\";\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport { VirtualScrollerModule } from 'ngx-virtual-scroller';\nimport { SocialLoginModule, SocialAuthServiceConfig } from 'angularx-social-login';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {\n  GoogleLoginProvider,\n  FacebookLoginProvider,\n  AmazonLoginProvider,\n} from 'angularx-social-login';\nimport { ImageCropperModule } from 'ngx-image-cropper';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\nimport {MatRadioModule} from '@angular/material/radio';\nimport {environment} from \"../environments/environment\";\nimport { ChangeImageDetailsDialogComponent } from './private/change-image-details-dialog/change-image-details-dialog.component';\nimport {FileSaverModule} from \"ngx-filesaver\";\nimport {DeleteImage, GetRelatedImagesByTagIDs} from \"./shared/app-state/actions/image.action\";\nimport {DeleteImageState} from \"./shared/app-state/states/delete-image.state\";\nimport { ImageCropperComponent } from './private/image-cropper/image-cropper.component';\nimport {CropImageState} from \"./shared/app-state/states/crop-image.state\";\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport { ImageDetailsComponent } from './public/image-details/image-details.component';\nimport {DownloadDetailsState} from \"./shared/app-state/states/download-details.state\";\nimport {GetImageByIdState} from \"./shared/app-state/states/get-image-by-id.state\";\nimport {RelatedImagesState} from \"./shared/app-state/states/related-images.state\";\nimport {SearchByUsersState} from \"./shared/app-state/states/search-by-users.state\";\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { UploadImageDialogComponent } from './private/upload-image-dialog/upload-image-dialog.component';\nimport { DownloadCropperComponent } from './public/download-cropper/download-cropper.component';\nimport {GetBase64ForDownloadCropperState} from \"./shared/app-state/states/get-base64-for-downloadCropper.state\";\nimport {PrepareCroppedForDownloadState} from \"./shared/app-state/states/prepare-cropped-for-download.state\";\nimport { DownloadCroppedImageDialogComponent } from './public/download-cropped-image-dialog/download-cropped-image-dialog.component';\nimport { StartupComponent } from './public/startup/startup.component';\nimport { SetResolutionDownloadDialogComponent } from './public/set-resolution-download-dialog/set-resolution-download-dialog.component';\nimport {RequestStatusState} from \"./shared/app-state/states/request-status.state\";\nimport { NotFoundPageComponent } from './public/not-found-page/not-found-page.component';\nimport { BootstrapPlaygroundComponent } from './public/bootstrap-playground/bootstrap-playground.component';\nimport {FlexModule} from \"@angular/flex-layout\";\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchToolbarComponent,\n    ImageByTagComponent,\n    ImageContentComponent,\n    SignupComponent,\n    LoginComponent,\n    ProfileComponent,\n    LoginDialogWrapperComponent,\n    FileUploadComponent,\n    FileUploadWrapperComponent,\n    UserGalleryComponent,\n    ImageDetailViewComponent,\n    EditProfileComponent,\n    AddTagsDialogComponent,\n    ChangeImageDetailsDialogComponent,\n    ImageCropperComponent,\n    ImageDetailsComponent,\n    UploadImageDialogComponent,\n    DownloadCropperComponent,\n    DownloadCroppedImageDialogComponent,\n    StartupComponent,\n    SetResolutionDownloadDialogComponent,\n    NotFoundPageComponent,\n    BootstrapPlaygroundComponent\n  ],\n    imports: [\n        BrowserModule,\n        FileSaverModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatExpansionModule,\n        HammerModule,\n        ImageCropperModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n        MatRadioModule,\n        MatChipsModule,\n        MatSnackBarModule,\n        ReactiveFormsModule,\n        MatStepperModule,\n        MatCardModule,\n        MatTabsModule,\n        VirtualScrollerModule,\n        MatMenuModule,\n        MatSelectModule,\n        MatNativeDateModule,\n        MatDialogModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        ScrollingModule,\n        MatAutocompleteModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatGridListModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDividerModule,\n        NgxDropzoneModule,\n        FormsModule,\n        HttpClientModule,\n        SocialLoginModule,\n        NgxsModule.forRoot([\n            ImagesByTagState,\n            SearchByTagState,\n            LoginStateModel,\n            AddressValidationState,\n            RelatedImagesState,\n            GetImageByIdState,\n            SignupState,\n            UserDetailsState,\n            DownloadDetailsState,\n            SearchByUsersState,\n            ImagesByUserIdState,\n            UploadImageState,\n            SelectImageState,\n            LoggedUserDetailsState,\n            UpdateUserProfileImageState,\n            DeleteImageState,\n            CropImageState,\n            GetBase64ForDownloadCropperState,\n            PrepareCroppedForDownloadState,\n            RequestStatusState\n        ]),\n        NgxsLoggerPluginModule.forRoot(),\n        NgxsReduxDevtoolsPluginModule.forRoot(),\n        NgxsRouterPluginModule.forRoot(),\n        MatDatepickerModule,\n        MatChipsModule,\n        FlexModule\n    ],\n  exports: [\n    MatAutocompleteModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: CookieAuthInterceptorService,\n      multi: true\n    },\n    {\n      provide: LocationStrategy, useClass: HashLocationStrategy\n    },\n    {\n      provide: 'SocialAuthServiceConfig',\n      useValue: {\n        autoLogin: false,\n        providers: [\n          {\n            id: GoogleLoginProvider.PROVIDER_ID,\n            provider: new GoogleLoginProvider(\n              environment.google_id\n            ),\n          },\n        ],\n      } as SocialAuthServiceConfig,\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"container\">\n  <h2 style=\"font-family: 'agave Nerd Font',sans-serif;\">\n    Add tags\n  </h2>\n  <mat-divider></mat-divider>\n  <br>\n  <h4 style=\"font-family: 'agave Nerd Font',sans-serif\">\n    Image : <strong>{{data.name}}</strong>\n  </h4>\n  <img width=\"380px\" height=\"400px\"\n       class=\"img-content\"\n       [src]=\"data.link\" alt=\"\">\n  <div class=\"tag-input\">\n    <mat-form-field style=\"width: 100%\">\n      <mat-chip-list #chipList aria-label=\"Tag selection\">\n        <mat-chip\n          *ngFor=\"let tag of addChip\"\n          [selectable]=\"selectable\"\n          [removable]=\"removable\"\n          (removed)=\"remove(tag)\">\n          {{tag.tag}}\n          <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n        </mat-chip>\n        <input matInput\n               (keyup.enter)=\"search(element.value)\"\n               id=\"search-input\" type=\"text\" #element\n               (keyup)=\"searchTerm$.next($event.target.value)\"\n               #tagInput\n               placeholder=\"New tag\"\n               [formControl]=\"tagCtrl\"\n               [matAutocomplete]=\"auto\"\n               [matChipInputFor]=\"chipList\"\n               [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n               (matChipInputTokenEnd)=\"add($event)\">\n      </mat-chip-list>\n      <mat-autocomplete #auto=\"matAutocomplete\"\n                        (optionSelected)=\"selected($event)\">\n        <mat-option *ngFor=\"let option of tagList\"\n                    [value]=\"option.tag\">\n          {{option.tag}}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n  </div>\n\n<button (click)=\"saveTags()\" mat-raised-button>Save</button>\n</div>\n","import {Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\nimport {BehaviorSubject, Observable, of, Subject} from \"rxjs\";\nimport {TagModel} from \"../../shared/domain/tagModel/tag-model\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {debounceTime, filter, map, mergeMap, switchMap, tap} from \"rxjs/operators\";\nimport {QueryTagAction} from \"../../shared/app-state/actions/query-tag-action\";\nimport {SearchByTagState} from \"../../shared/app-state/states/search-by-tag.state\";\nimport {TagQueryList} from \"../../shared/domain/tagModel/tag-query-list\";\nimport {COMMA, ENTER} from \"@angular/cdk/keycodes\";\nimport {FormControl} from \"@angular/forms\";\nimport {MatChipInputEvent} from \"@angular/material/chips\";\nimport {MatAutocomplete, MatAutocompleteSelectedEvent} from \"@angular/material/autocomplete\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {ImageModel} from \"../../shared/domain/imageModel/image.model\";\nimport {SelectImageState} from \"../../shared/app-state/states/select-image.state\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {LoggedUserDetailsState} from \"../../shared/app-state/states/logged-user-details.state\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {AuthenticationActions} from \"../../shared/app-state/actions/authentication-action\";\nimport {ImagesByUserIDAction} from \"../../shared/app-state/actions/image.action\";\nimport {LoginStateModel} from \"../../shared/app-state/states/login.state.model\";\nimport {UserDetailsActions} from \"../../shared/app-state/actions/user-details.action\";\n\n@Component({\n  selector: 'app-add-tags-dialog',\n  templateUrl: './add-tags-dialog.component.html',\n  styleUrls: ['./add-tags-dialog.component.scss']\n})\nexport class AddTagsDialogComponent implements OnInit {\n  searchTerm$ = new Subject<string>();\n  tagList: TagModel[];\n  addChip: TagModel[] = [];\n\n  @Select(SearchByTagState) tags$: Observable<TagQueryList>;\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  tagCtrl = new FormControl();\n  selectedImage: string;\n\n  @ViewChild('tagInput') tagInput: ElementRef<HTMLInputElement>;\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\n\n  constructor(private store: Store,\n              private imageService: ImageRequestService,\n              @Inject(MAT_DIALOG_DATA) public data: ImageModel,\n              private dialogRef: MatDialogRef<AddTagsDialogComponent>) {\n  }\n\n  ngOnInit(): void {\n\n    this.searchTerm$\n      .pipe(debounceTime(1000))\n      .subscribe(value => {\n        console.log(value)\n        this.store.dispatch(\n          new QueryTagAction(new BehaviorSubject(value))\n        )\n      });\n    this.tags$.subscribe(value => this.tagList = value.result)\n    this.selectedImage = this.store.selectSnapshot(SelectImageState.getSelectedImageId);\n  }\n\n  search(value: string) {\n\n  }\n\n  remove(tag: TagModel) {\n    const index = this.addChip\n      .findIndex(tagModel => tagModel.tag === tag.tag);\n    if (index >= 0)\n      this.addChip.splice(index, 1);\n\n  }\n\n  add($event: MatChipInputEvent) {\n    const input = $event.input;\n    const value = $event.value;\n    if ((value || '').trim()) {\n      const selectedTag = this.store\n        .selectSnapshot(SearchByTagState.getFetchedTagList)\n        .find(tag => tag.tag === value);\n      if (selectedTag) this.addChip.push(selectedTag)\n    }\n    if (input) {\n      input.value = '';\n    }\n    this.tagCtrl.setValue(null)\n    // this.tagList.push(value);\n  }\n\n  selected($event: MatAutocompleteSelectedEvent): void {\n    const selectedTag = this.store\n      .selectSnapshot(SearchByTagState.getFetchedTagList)\n      .find(tag => tag.tag === $event.option.viewValue);\n    if (selectedTag) this.addChip.push(selectedTag)\n    this.tagInput.nativeElement.value = '';\n    this.tagCtrl.setValue(null);\n    console.log(\"SEAS?\");\n  }\n\n  saveTags(): void {\n    const selectedImage: string = this.store.selectSnapshot(SelectImageState.getSelectedImageId);\n    const userId =\n      this.store.selectSnapshot(LoginStateModel.loggedUserId);\n    this.imageService.setTagToImage({\n        userId: userId,\n        imageId: selectedImage,\n        tags: this.addChip\n      }\n    ).subscribe(value => {\n      // this.store.dispatch(new Navigate(['profile', {userId: userId}]))\n      this.store.dispatch(new UserDetailsActions.GetUserDetails(userId));\n      this.dialogRef.close();\n      // this.store\n      //   .dispatch(new ImagesByUserIDAction(userId))\n      //   .subscribe(value1 => {\n      //     this.store.dispatch(new Navigate(['profile', {userId: userId}]))\n      //     this.dialogRef.close();\n      //   })\n    })\n    this.addChip = [];\n    this.tagCtrl.setValue(null);\n  }\n}\n","<div class=\"container\" *ngIf=\"$selectedImage | async as img\">\n  <h2 style=\"font-family: 'agave Nerd Font',sans-serif;\">\n    Change image details\n  </h2>\n  <mat-divider></mat-divider>\n  <br>\n  <h4 style=\"font-family: 'agave Nerd Font',sans-serif\">\n    Image : <strong>{{data.name}}</strong>\n  </h4>\n\n  <div id=\"access-type\">\n<!--    <p><strong>Choose Access type :</strong></p>-->\n    <a matTooltip=\"When you change to private your images can not be viewed by the community\"\n       matTooltipPosition=\"below\"\n       style=\"color: black; margin-right: 15px; margin-bottom: 5px\"\n       disabled disableRipple mat-icon-button>\n      <mat-icon>lock</mat-icon>\n      <span>Private</span>\n    </a>\n    <mat-slide-toggle (change)=\"changeStuff($event)\"\n                      style=\"margin-left: 20px\" [(ngModel)]=\"tempPublic\"></mat-slide-toggle>\n    <a matTooltip=\"When you change to public your images can be viewed by the community\"\n       matTooltipPosition=\"below\"\n       style=\"color: black; margin-left: 10px; margin-bottom: 3px\"\n       disabled disableRipple mat-icon-button>\n      <mat-icon>public</mat-icon>\n      <span>Public</span>\n    </a>\n  </div>\n\n  <div *ngIf=\"$selectedImage | async as img\" class=\"image-details\">\n    <img width=\"380px\" height=\"400px\"\n         class=\"img-content\"\n         [src]=\"img.link\" alt=\"\">\n\n    <div class=\"image-detail\">\n      <a style=\"color: black\" disabled disableRipple mat-icon-button>\n        <mat-icon>cloud_download</mat-icon>\n        <span>Downloads</span>\n      </a>\n      <h2 id=\"downloaded\"><strong>{{img.downloaded}}</strong></h2>\n      <h5 id=\"testus\">+ {{img.downloaded}} downloads since last month</h5>\n      <mat-divider></mat-divider>\n\n      <div class=\"image-views\">\n        <a style=\"color: black\" disabled disableRipple mat-icon-button>\n          <mat-icon>visibility</mat-icon>\n          <span>Views</span>\n        </a>\n        <h2 id=\"views\"><strong>{{img.downloaded}}</strong></h2>\n        <h5>+ {{img.downloaded}} view since last month</h5>\n        <mat-divider></mat-divider>\n      </div>\n      <div class=\"image-likes\">\n        <a style=\"color: black\" disabled disableRipple mat-icon-button>\n          <mat-icon>thumb_up</mat-icon>\n          <span>Likes</span>\n        </a>\n        <h2 id=\"likes\"><strong>{{img.liked}}</strong></h2>\n        <h5>+ {{img.liked}} view since last month</h5>\n      </div>\n    </div>\n  </div>\n\n  <br>\n\n  <a style=\"color: black\" mat-icon-button disabled class=\"link_ref_label\">\n    <mat-icon>public</mat-icon>\n    URL link reference :\n  </a>\n  <mat-form-field id=\"url_input\" appearance=\"fill\" class=\"example-full-width\">\n    <mat-label>URL to image</mat-label>\n    <input matInput (ngModelChange)=\"urlReferenceValidator()\"\n           [formControl]=\"urlReference\"\n           placeholder=\"http:\\\\www.xxx.com\">\n    <mat-error>Invalid url</mat-error>\n  </mat-form-field>\n\n  <button style=\"margin-right: 5px\" color=\"primary\" *ngIf=\"$detailsChanged | async\" mat-raised-button (click)=\"saveChanges()\">Save changes</button>\n  <button color=\"warn\" mat-raised-button (click)=\"deleteImage(img)\">Delete image</button>\n\n\n</div>\n\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {Select, Store} from \"@ngxs/store\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {ImageModel} from \"../../shared/domain/imageModel/image.model\";\nimport {MatRadioChange} from \"@angular/material/radio\";\nimport {FormBuilder, FormControl} from \"@angular/forms\";\nimport {SelectImageState} from \"../../shared/app-state/states/select-image.state\";\nimport {DeleteImage, SelectImage} from \"../../shared/app-state/actions/image.action\";\nimport {FocusMonitor} from \"@angular/cdk/a11y\";\nimport {Subject} from \"rxjs\";\nimport {UpdateImageDetailsService} from \"../../serviceV2/update-image-details.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {DeleteImageService} from \"../../serviceV2/delete-image.service\";\n\n@Component({\n  selector: 'app-change-image-details-dialog',\n  templateUrl: './change-image-details-dialog.component.html',\n  styleUrls: ['./change-image-details-dialog.component.scss']\n})\nexport class ChangeImageDetailsDialogComponent implements OnInit {\n  urlReference = new FormControl('');\n  isPublic = new FormControl(false);\n  @Select(SelectImageState.getSelectedImage) $selectedImage;\n  @Select(SelectImageState.getIsPublic) $isPublic;\n  public formGroup;\n  public selectedImage: ImageModel;\n  public $detailsChanged = new Subject<boolean>();\n  public tempPublic: boolean;\n\n\n  constructor(private store: Store,\n              private imageService: ImageRequestService,\n              @Inject(MAT_DIALOG_DATA) public data: ImageModel,\n              private formBuilder: FormBuilder,\n              private snackBar: MatSnackBar,\n              private dialogRef: MatDialogRef<ChangeImageDetailsDialogComponent>,\n              private updateImgService: UpdateImageDetailsService,\n              private deleteImageService: DeleteImageService) {\n  }\n\n  ngOnInit(): void {\n    this.selectedImage = this.store.selectSnapshot(SelectImageState.getSelectedImage);\n    this.urlReference = new FormControl(this.selectedImage.linkReference === 'null' ?\n      \"\" : this.selectedImage.linkReference);\n    this.$selectedImage.subscribe(val => console.log(val.public))\n    this.isPublic = new FormControl(this.selectedImage.isPublic);\n    this.formGroup = this.formBuilder\n      .group({urlReference: this.urlReference})\n    // this.urlReference.registerOnChange(foo => this.$detailsChanged.next(true));\n    // this.isPublic.registerOnChange(foo => this.$detailsChanged.next(true));\n    this.tempPublic = this.selectedImage.isPublic;\n  }\n\n  public urlReferenceValidator(): void {\n    const value = this.formGroup.get('urlReference').value;\n    console.log(value);\n    const regExp = new RegExp(\"[Hh][Tt][Tt][Pp][Ss]?:\\\\/\\\\/(.*)[.]{1}[a-zA-Z]{2,}\");\n    if (regExp.test(value) || value.length === 0) {\n      this.$detailsChanged.next(this.selectedImage.linkReference !== value)\n      this.formGroup.controls['urlReference']\n        .setErrors(null)\n    } else {\n      this.formGroup.controls['urlReference']\n        .setErrors({'error': true})\n    }\n  }\n\n  public changeStuff(mrChange: MatRadioChange): void {\n    console.log();\n    console.log(this.selectedImage.isPublic);\n\n    console.log(this.tempPublic);\n    if (this.tempPublic !== this.store.selectSnapshot(SelectImageState.getSelectedImage).isPublic)\n      this.$detailsChanged.next(true);\n    else this.$detailsChanged.next(false);\n\n    // if ((mrChange.value === '1') !==\n    //   this.store.selectSnapshot(SelectImageState.getSelectedImage).isPublic) {\n    //   console.log(\" mr. change value  \" + mrChange.value === '1');\n    //   this.tempPublic = mrChange.value === '1';\n    //   this.$detailsChanged.next(true);\n    // } else this.$detailsChanged.next(false);\n    // this.isPublic = mrChange.value === '1';\n  }\n\n  changeDetails(img: ImageModel): void {\n    console.log(this.selectedImage);\n  }\n\n  saveChanges(): void {\n    this.selectedImage.isPublic = this.tempPublic;\n    this.selectedImage.linkReference =\n      this.urlReference.value.length == 0 ? null : this.urlReference.value;\n    console.log(this.tempPublic);\n    this.updateImgService\n      .changeImageDetails(this.selectedImage)\n      .subscribe(value => {\n        if (value.status === 200) {\n          this.snackBar.open(\n            \"Image details update was successful.\",\n            \"Details updated\",\n            {\n              duration: 3000,\n              horizontalPosition: \"center\",\n              verticalPosition: \"top\"\n            }\n          );\n          this.$detailsChanged.next(false);\n        }\n      })\n\n    console.log(this.selectedImage)\n  }\n\n  public deleteImage(img: ImageModel): void {\n    console.log(img);\n    this.store\n      .dispatch(new DeleteImage(img))\n      .subscribe(value => console.log(value));\n\n  }\n}\n","<app-search-toolbar></app-search-toolbar>\n<div class=\"container\">\n  <div class=\"top\">\n    <div class=\"top_left_filler\"></div>\n    <div class=\"profile-icon\">\n      <mat-icon *ngIf=\"!($profile | async)\" id=\"icon\" style=\"font-size: 200px; color: grey\">account_circle</mat-icon>\n      <img *ngIf=\"$profile | async\" class=\"profile-img\" [src]=\"$profile | async\">\n      <label id=\"select-profile\">\n        <input (change)=\"handleFileInput($event.target.files)\" style=\"display: none\" type=\"file\">\n        <a>Change profile image</a>\n      </label>\n    </div>\n    <div class=\"form\">\n      <form [formGroup]=\"formGroup\" class=\"example-form\">\n        <mat-form-field appearance=\"fill\" id=\"first\" class=\"example-full-width\">\n          <mat-label>Firstname</mat-label>\n          <input [formControl]=\"firstNameControl\"\n                 matInput placeholder=\"John\">\n          <mat-icon matSuffix>edit</mat-icon>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\" class=\"example-full-width\">\n          <mat-label>Lastname</mat-label>\n          <input readonly [formControl]=\"lastNameControl\" matInput placeholder=\"Doe\">\n          <mat-icon matSuffix>edit</mat-icon>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"example-full-width\">\n          <mat-label>Email</mat-label>\n          <input readonly [formControl]=\"emailControl\" matInput placeholder=\"doe@gmail.com\">\n          <mat-icon matSuffix>edit</mat-icon>\n        </mat-form-field>\n      </form>\n  </div>\n  </div>\n  <div class=\"bottom\">\n    <div class=\"form-2\">\n      <mat-form-field id=\"userName\" appearance=\"fill\" class=\"example-full-width\">\n        <mat-label>Username</mat-label>\n        <input readonly [formControl]=\"userNameControl\" matInput placeholder=\"johnDoe\">\n        <mat-icon matSuffix>edit</mat-icon>\n      </mat-form-field>\n    </div>\n    <div class=\"actions\">\n      <div class=\"change-pswd\">\n        <button mat-raised-button>Change password</button>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {Select, Store} from \"@ngxs/store\";\nimport {LoginStateModel} from \"../../shared/app-state/states/login.state.model\";\nimport {connectableObservableDescriptor} from \"rxjs/internal/observable/ConnectableObservable\";\nimport {UserDetailsState} from \"../../shared/app-state/states/User-details.state\";\nimport {UserDetailsActions} from \"../../shared/app-state/actions/user-details.action\";\nimport {AuthenticationActions} from \"../../shared/app-state/actions/authentication-action\";\nimport {share} from \"rxjs/operators\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {LoggedInUserModel} from \"../../shared/domain/userModel/UserLoginModel\";\nimport {ImagesByUserIDAction} from \"../../shared/app-state/actions/image.action\";\nimport {UserAuthenticationService} from \"../../serviceV2/user-authentication.service\";\nimport {LoggedUserDetailsState} from \"../../shared/app-state/states/logged-user-details.state\";\nimport {Form, FormBuilder, FormControl} from \"@angular/forms\";\nimport {BaseUserDetails} from \"../../shared/domain/userModel/user-details.model\";\n\n@Component({\n  selector: 'app-edit-profile',\n  templateUrl: './edit-profile.component.html',\n  styleUrls: ['./edit-profile.component.scss']\n})\nexport class EditProfileComponent implements OnInit {\n  @Select(UserDetailsState.userDetails) $userDetails;\n  @Select(LoginStateModel.profileImg) $profile;\n  @Select(LoginStateModel.loggedUserId) $userId;\n  firstNameControl = new FormControl();\n  lastNameControl = new FormControl();\n  emailControl = new FormControl();\n  userNameControl = new FormControl();\n  formGroup;\n\n  constructor(private store: Store,\n              private service: UserAuthenticationService,\n              private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    const loggedUser : BaseUserDetails =\n      this.store.selectSnapshot(LoginStateModel.loggedInUser);\n\n    const userDetails: BaseUserDetails =\n       this.store.selectSnapshot(LoginStateModel.loggedInUser);\n\n    if (userDetails.userId === undefined) {\n      this.store.dispatch(\n        new AuthenticationActions.LoggedUserDetails(loggedUser.userId))\n        .subscribe(userDetailsResp => {\n          this.initFormGroup(userDetailsResp);\n        })\n    } else {\n      this.firstNameControl = new FormControl(userDetails.firstName);\n      this.lastNameControl = new FormControl(userDetails.lastName);\n      this.emailControl = new FormControl(userDetails.email);\n      this.userNameControl = new FormControl(userDetails.username);\n      this.formGroup = this.formBuilder.group({\n        firstName: this.firstNameControl,\n        lastName: this.lastNameControl,\n        email: this.emailControl,\n        userName: this.userNameControl\n      })\n    }\n\n\n\n\n    this.firstNameControl.valueChanges.subscribe(value => console.log(value))\n\n    // this.formGroup = this.formBuilder.group({\n    //   firstName: null\n    // })\n    // if (loggedUser !== undefined && loggedUser !== null) {\n    //   this.store.dispatch(\n    //     new UserDetailsActions\n    //       .GetUserDetails(loggedUser.userId)\n    //   )\n    // } else this.store.dispatch(new Navigate(['/login']))\n\n\n\n  }\n\n  private initFormGroup(userDetailsResp) {\n    console.log(userDetailsResp.LoggedDetails);\n    this.firstNameControl = new FormControl(userDetailsResp.LoggedDetails.firstName);\n    this.lastNameControl = new FormControl(userDetailsResp.LoggedDetails.lastName);\n    this.emailControl = new FormControl(userDetailsResp.LoggedDetails.email);\n    this.userNameControl = new FormControl(userDetailsResp.LoggedDetails.userName);\n    this.formGroup = this.formBuilder.group({\n      firstName: this.firstNameControl,\n      lastName: this.lastNameControl,\n      email: this.emailControl,\n      userName: this.userNameControl\n    })\n  }\n\n  navigateToUpload() {\n    this.store.dispatch(new Navigate(['upload']))\n  }\n\n  handleFileInput(files: FileList) {\n    const loggedUser: BaseUserDetails =\n      this.store.selectSnapshot(LoginStateModel.loggedInUser);\n    const formData = new FormData();\n    formData.append('file', files[0]);\n    this.store.dispatch(new UserDetailsActions\n      .UploadUserProfile(loggedUser.userId, formData));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {LoginComponent} from \"../../shared/login/login.component\";\nimport {FileUploadComponent} from \"../file-upload/file-upload.component\";\nimport {Location} from \"@angular/common\";\nimport {Store} from \"@ngxs/store\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {AuthenticationActions} from \"../../shared/app-state/actions/authentication-action\";\nimport LoggedUserDetails = AuthenticationActions.LoggedUserDetails;\nimport {UploadImageDialogComponent} from \"../upload-image-dialog/upload-image-dialog.component\";\n\n@Component({\n  selector: 'app-file-upload-wrapper',\n  templateUrl: './file-upload-wrapper.component.html',\n  styleUrls: ['./file-upload-wrapper.component.scss']\n})\nexport class FileUploadWrapperComponent implements OnInit {\n\n\n  constructor(private dialog: MatDialog,\n              private route: ActivatedRoute,\n              private store: Store) { }\n\n  ngOnInit(): void {\n    this.route.paramMap\n      .subscribe(param => {\n        const userId = param.get('userId');\n        this.store.dispatch(new LoggedUserDetails(userId))\n        const ref = new MatDialogConfig();\n        // this.dialog.open(UploadImageDialogComponent,\n        //   {\n        //     width: '900px',\n        //     height: '750px',\n        //     disableClose: true,\n        //     autoFocus: false,\n        //     data: userId\n        //   });\n        this.dialog.open(FileUploadComponent,\n          {\n            width: '1300px',\n            height: '950px',\n            disableClose: true,\n            autoFocus: false,\n            data: userId\n          });\n      });\n  }\n}\n","<app-search-toolbar></app-search-toolbar>\n","<h2 id=\"header\">Publish to <strong>SpecShots</strong></h2>\n\n\n\n<mat-horizontal-stepper [linear]=\"isLinear\" #stepper>\n  <mat-step [completed]=\"uploadSuccess\" [stepControl]=\"firstFormGroup\">\n    <ng-template matStepLabel>Select image</ng-template>\n    <div id=\"access-type\">\n      <p><strong>Choose Access type :</strong></p>\n      <mat-radio-group [formControl]=\"fooControl\"\n                       (change)=\"changeStuff($event)\"\n                       aria-label=\"Select an option\">\n        <mat-radio-button [checked]=\"true\" value=\"1\">\n          <div class=\"options\">\n            <mat-icon>public</mat-icon>\n            Public\n          </div>\n        </mat-radio-button>\n        <mat-radio-button value=\"0\">\n          <div class=\"options\">\n            <mat-icon>lock</mat-icon>\n            Private\n          </div>\n        </mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <ngx-dropzone class=\"drop-zone\" (change)=\"onSelect($event)\">\n      <ngx-dropzone-label class=\"drop-label\">\n        <div *ngIf=\"isValidating == false && uploadSuccess == false\" class=\"label-content\">\n          <button mat-icon-button>\n            <mat-icon style=\"font-size: 100px;\">add_photo_alternate</mat-icon>\n          </button>\n        </div>\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center\" *ngIf=\"isValidating == true\">\n          <mat-spinner></mat-spinner>\n          <span style=\"margin-top: 20px\">Validating image... This can take a while..</span>\n        </div>\n      </ngx-dropzone-label>\n      <ngx-dropzone-label class=\"label-header\">\n        <h1 *ngIf=\"isValidating == false && uploadSuccess == false\">Drag and drop a file</h1>\n      </ngx-dropzone-label>\n      <ngx-dropzone-label class=\"label-description\">\n        <!--<div *ngIf=\"isValidating == false && uploadSuccess == false\">-->\n          <li class=\"list-item\"><strong>High quality photos</strong></li>\n          <li class=\"list-item\">Only upload photos you <strong>own the rights to</strong></li>\n          <li class=\"list-item\">Respect the intellectual property of others</li>\n          <li class=\"list-item\">Photos are <strong>clear and original</strong></li>\n          <li class=\"list-item\">Zero tolerance for nudity, violence or hate</li>\n          <li class=\"list-item\">Read the provider terms</li>\n        <!--</div>-->\n      </ngx-dropzone-label>\n      <ngx-dropzone-preview class=\"preview\"\n                            *ngFor=\"let f of files\"\n                            [removable]=\"true\"\n                            (removed)=\"onRemove(f)\"\n                            [file]=\"f\">\n        <ngx-dropzone-label style=\"color: black\" class=\"label-header\">{{ f.name }} ({{ f.type }})</ngx-dropzone-label>\n      </ngx-dropzone-preview>\n    </ngx-dropzone>\n    <div class=\"link_ref_label\">\n      <mat-icon>public</mat-icon>\n      URL link reference :\n    </div>\n    <mat-form-field id=\"url_input\" appearance=\"fill\" class=\"example-full-width\">\n      <mat-label>URL to image</mat-label>\n      <input matInput (ngModelChange)=\"urlReferenceValidator()\"\n             [formControl]=\"imageUrlReference\"\n             placeholder=\"http:\\\\www.xxx.com\">\n      <mat-error>Invalid url</mat-error>\n    </mat-form-field>\n  </mat-step>\n  <mat-step>\n      <ng-template  matStepLabel>Edit image for your gallery view</ng-template>\n      <div>\n        <button (click)=\"cropImageForGallery()\"\n                mat-button [disabled]=\"!(this.$imageData | async)\"\n                matTooltip=\"Select the part of your image which will be displayed as an thumbnail.\"\n                matTooltipPosition=\"below\"\n                mat-raised-button>Edit</button>\n<!--        <button mat-button matStepperNext>Next</button>-->\n      </div>\n    <div class=\"cropped-image\">\n      <div *ngIf=\"!displayCroppedImage\" style=\"width: 500px; height: 460px\"></div>\n      <div *ngIf=\"displayCroppedImage\" class=\"cropped\">\n        <img matTooltip=\"This is how your image will look like as a thumbnail.\"\n             matTooltipPosition=\"below\"\n             [src]=\"this.$imageData | async\" />\n      </div>\n    </div>\n  </mat-step>\n  <mat-step>\n    <ng-template  matStepLabel>Edit image for the download view</ng-template>\n    <div>\n      <button (click)=\"cropImageForDownloadView()\"\n              mat-button [disabled]=\"!(this.$imageData | async)\"\n              matTooltip=\"Select the part of your image which will be displayed in the download view.\"\n              matTooltipPosition=\"below\"\n              mat-raised-button>Edit</button>\n      <!--        <button mat-button matStepperNext>Next</button>-->\n    </div>\n    <div class=\"cropped-image\">\n      <div *ngIf=\"!displayCroppedImage\" style=\"width: 500px; height: 460px\"></div>\n      <div *ngIf=\"displayCroppedImage\" class=\"cropped\">\n        <img matTooltip=\"This is how your image will look like as a thumbnail.\"\n             matTooltipPosition=\"below\"\n             [src]=\"this.$croppedDownloadViewImage | async\" />\n      </div>\n    </div>\n  </mat-step>\n  <mat-step >\n    <form >\n      <ng-template matStepLabel>Upload file</ng-template>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n</mat-horizontal-stepper>\n<mat-divider></mat-divider>\n<div class=\"action\" style=\"margin-top: 100px\">\n  <button *ngIf=\"!(this.spinner | async)\" mat-raised-button (click)=\"close()\" style=\"margin-right: 5px\" color=\"primary\" mat-flat-button>Cancel</button>\n  <button mat-raised-button *ngIf=\"isValidToUpload && !(this.spinner | async)\" (click)=\"upload()\"  mat-flat-button>Upload</button>\n  <mat-spinner *ngIf=\"this.spinner | async\" ></mat-spinner>\n\n</div>\n","import {Component, EventEmitter, Inject, OnInit, Output} from '@angular/core';\nimport {NgxDropzoneChangeEvent} from \"ngx-dropzone\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {CropDownloadViewImage, CropGalleryViewImage, UploadImage} from \"../../shared/app-state/actions/image.action\";\nimport {LoginStateModel} from \"../../shared/app-state/states/login.state.model\";\nimport {switchMap, tap} from \"rxjs/operators\";\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {Router} from \"@angular/router\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {Location} from '@angular/common';\nimport {LoggedInUserModel} from \"../../shared/domain/userModel/UserLoginModel\";\nimport {BaseUserDetails} from \"../../shared/domain/userModel/user-details.model\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {FILE} from \"dns\";\nimport {AuthenticationActions} from \"../../shared/app-state/actions/authentication-action\";\nimport LoggedUserDetails = AuthenticationActions.LoggedUserDetails;\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {MatRadioChange} from \"@angular/material/radio\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {environment} from \"../../../environments/environment\";\nimport {UploadImageModel} from \"../../shared/domain/imageModel/upload-image.model\";\nimport {Dimensions, ImageCroppedEvent} from \"ngx-image-cropper\";\nimport {ImageCropperComponent} from \"../image-cropper/image-cropper.component\";\nimport {CropImageState} from \"../../shared/app-state/states/crop-image.state\";\nimport {Base64ToBlobConverter} from \"../../shared/util/Base64ToBlobConverter\";\nimport {Subject} from \"rxjs\";\nimport {ImageUploadService} from \"../../serviceV2/image-upload.service\";\n\n\n@Component({\n  selector: 'app-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.scss']\n})\nexport class FileUploadComponent implements OnInit {\n  firstFormGroup: FormGroup;\n  isLinear = true;\n  uploadSuccess: boolean = false;\n  files: File[] = [];\n  spinner = new Subject<boolean>();\n  isValidating: boolean = false;\n  imageChangedEvent: any;\n  croppedGalleryImage: any;\n  croppedDownloadViewImage: any;\n  showCropper = false;\n  foo;\n  @Output()\n  change: EventEmitter<MatRadioChange>\n  public formGroup;\n  public isPublic: boolean = true;\n  fooControl = new FormControl(false);\n  public imageUrlReference = new FormControl('');\n  @Select(LoginStateModel.loggedInUser) $loggedUser;\n  @Select(CropImageState.getData) $imageData;\n  @Select(CropImageState.getCroppedDownloadImage) $croppedDownloadViewImage;\n  isValidToUpload: boolean = false;\n  canvasRotation: any;\n  public displayCroppedImage: boolean = false;\n\n  constructor(private store: Store,\n              private dialogRef: MatDialogRef<FileUploadComponent>,\n              private router: Router,\n              private location: Location,\n              private snackBar: MatSnackBar,\n              private dialog: MatDialog,\n              @Inject(MAT_DIALOG_DATA) public userId: string,\n              private formBuilder: FormBuilder,\n              private http: HttpClient,\n              private dialogRef2: MatDialogRef<ImageCropperComponent>,\n              private  uploadService: ImageUploadService) {\n    this.formGroup = this.formBuilder\n      .group({url: this.imageUrlReference})\n    this.foo = this.formBuilder\n      .group({isPublic: this.fooControl})\n\n    this.firstFormGroup = this.formBuilder.group({\n      uploadCtr: ['', Validators.required]\n    })\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  public changeStuff(mrChange: MatRadioChange): void {\n    console.log(mrChange.value);\n    this.isPublic = mrChange.value === '1';\n  }\n\n  public validate(value: string): boolean {\n    const regExp = new RegExp(\"[Hh][Tt][Tt][Pp][Ss]?:\\\\/\\\\/(.*)[.]{1}[a-zA-Z]{2,}\");\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(value);\n  }\n\n  public urlReferenceValidator(): void {\n    const value = this.formGroup.get('url').value;\n    const regExp = new RegExp(\"[Hh][Tt][Tt][Pp][Ss]?:\\\\/\\\\/(.*)[.]{1}[a-zA-Z]{2,}\");\n    if (regExp.test(value)) {\n      this.formGroup.controls['url']\n        .setErrors(null)\n    } else {\n      this.formGroup.controls['url']\n        .setErrors({'error': true})\n    }\n  }\n\n  onSelect($event: NgxDropzoneChangeEvent): void {\n    this.isValidating = true;\n    const typeIndex = $event.addedFiles[0].name.lastIndexOf('.');\n    const type = $event.addedFiles[0].name.substr(typeIndex + 1);\n    if ((type === 'jpg' || type === 'png') && $event.addedFiles[0].size <= 5000000) {\n      let request = new FormData();\n      request.append('file', $event.addedFiles[0]);\n      this.uploadService.validateImage($event.addedFiles[0])\n        .subscribe(value => {\n          const message = value.message;\n          console.log(value.status);\n          if (value.status === 200) {\n            this.files.push(...$event.addedFiles);\n            this.isValidToUpload = true;\n            this.isLinear = true;\n            this.uploadSuccess = true;\n            this.isValidating = false;\n\n            // getting uploaded file and passing it to crop image\n            const reader = new FileReader();\n            reader.onload = (e: any) => {\n              const base64Temp = e.target.result;\n              this.croppedGalleryImage = base64Temp;\n              this.croppedDownloadViewImage = base64Temp;\n              this.store.dispatch(new CropDownloadViewImage(this.croppedGalleryImage))\n              this.store.dispatch(new CropGalleryViewImage(this.croppedDownloadViewImage))\n                .subscribe(value => {\n                  // open imageCropper dialog(component) to let user decide\n                  // which part of th uploaded image should be displayed\n                  // this.dialog.open(ImageCropperComponent,{\n                  //   data: e.target.result,\n                  //   height: '1200px',\n                  //   width: '1400px'\n                  // })\n                });\n            };\n            reader.readAsDataURL($event.addedFiles[0]);\n          } else {\n            this.onRemove($event.addedFiles[0]);\n            this.isValidToUpload = false;\n            console.log(this.isValidToUpload)\n            this.snackBar.open(\n              message,\n              \"Validation was unsuccessful\",\n              {\n                duration: 3000,\n                horizontalPosition: \"center\",\n                verticalPosition: \"top\"\n              }\n            );\n          }\n        })\n    }\n\n  }\n\n  public cropImageForDownloadView(): void {\n    this.dialog.open(ImageCropperComponent, {\n      data: {\n        img: this.store.selectSnapshot(CropImageState.getCroppedDownloadImage),\n        width: 1200,\n        height: 670, viewName: 'Download'\n      }, height: '1000px'\n    });\n  }\n\n  public cropImageForGallery(): void {\n    this.dialog.open(ImageCropperComponent, {\n      data: {\n        img: this.store.selectSnapshot(CropImageState.getData)\n        , width: 500, height: 460, viewName: 'Gallery'\n      }, height: '1000px'\n\n    });\n    this.displayCroppedImage = true;\n    // this.store.dispatch(new CropGalleryViewImage(this.croppedGalleryImage))\n    //   .subscribe(value => console.log(value));\n\n  }\n\n  onRemove(f: any): void {\n    this.files.splice(this.files.indexOf(f), 1);\n    this.isValidToUpload = false;\n    this.store.dispatch(new CropGalleryViewImage(null))\n  }\n\n  upload(): void {\n    this.spinner.next(true);\n    const loggedInUserModel: BaseUserDetails =\n      this.store.selectSnapshot(LoginStateModel.loggedInUser);\n    let request = new FormData();\n    request.append('file', this.files[0]);\n    const isP = this.isPublic ? 'true' : 'false';\n\n\n    const galleryBase64 = this.store.selectSnapshot(CropImageState.getData);\n    //cropped image to file(base64 to file)\n    const imageBlob = Base64ToBlobConverter.dataURItoBlob(galleryBase64.substr(galleryBase64.lastIndexOf(',') + 1));\n\n    const imageFile = new File([imageBlob],\n      \"cropped-\" + this.files[0].name,\n      { type: 'image/jpeg' });\n\n\n    const downloadBase64 = this.store.selectSnapshot(CropImageState.getCroppedDownloadImage);\n    const downloadBlob = Base64ToBlobConverter.dataURItoBlob(downloadBase64.substr(downloadBase64.lastIndexOf(',') + 1));\n    const downloadImageFile = new File([downloadBlob],\n      \"cropped-\" + this.files[0].name,\n      { type: 'image/jpeg' });\n\n    // setting response object with needed values\n    const uploadModel: UploadImageModel = {\n      userId: loggedInUserModel.userId,\n      orgFile: this.files[0],\n      isPublic: isP,\n      urlReference: this.validate(this.imageUrlReference.value) === true ?\n        this.imageUrlReference.value : null,\n      file: request,\n      galleryFile: imageFile,\n      downloadFile: downloadImageFile\n    }\n\n    // sending request\n    this.store.dispatch(new UploadImage(uploadModel))\n      .subscribe(value1 => {\n        request = null;\n        this.files = [];\n        this.isValidToUpload = false;\n        if (value1.Upload.status) {\n          this.snackBar.open(\n            \"File uploaded successfully\",\n            \"File uploaded\",\n            {\n              duration: 3000,\n              horizontalPosition: \"center\",\n              verticalPosition: \"top\"\n            }\n          );\n          this.spinner.next(false);\n          this.store.dispatch(new CropGalleryViewImage(null))\n        }\n        // window.location.reload();\n      }, error => {\n        this.spinner.next(false);\n        this.snackBar.open(\n          error.error,\n          \"File uploaded error\",\n          {\n            duration: 3000,\n            horizontalPosition: \"center\",\n            verticalPosition: \"top\",\n            panelClass: ['uploadError']\n          }\n        );\n        request = null;\n        this.files = [];\n        this.isValidToUpload = false;\n        this.imageUrlReference = null;\n        this.store.dispatch(new CropGalleryViewImage(null))\n      });\n  }\n\n  close(): void {\n    const userId: string = this.store.selectSnapshot(LoginStateModel.loggedUserId);\n    // this.router.navigate(['profile'])\n    this.store.dispatch(new Navigate(['profile', {userId: userId}]))\n    this.store.dispatch(new CropGalleryViewImage(null));\n    this.dialogRef.close();\n  }\n\n  imageCropped($event: ImageCroppedEvent) {\n    console.log(\"dfghdfjkgh\");\n    this.croppedGalleryImage = $event.base64;\n  }\n\n  imageLoaded() {\n    console.log(\"dfghdfjkgh666666666\");\n    this.showCropper = true;\n    console.log('Image loaded');\n  }\n\n  cropperReady($event: Dimensions) {\n    console.log(\"what\");\n  }\n\n  loadImageFailed() {\n\n  }\n\n  // fileChangeEvent($event: Event) {\n  //   this.imageChangedEvent = $event;\n  //   console.log(this.imageChangedEvent)\n  // }\n  cropped2: any;\n  fileChangeEvent($event: Event) {\n    this.imageChangedEvent = $event;\n  }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {Dimensions, ImageCroppedEvent} from \"ngx-image-cropper\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {ImagesByUserIdState} from \"../../shared/app-state/states/images-by-user-id.state\";\nimport {CropImageState} from \"../../shared/app-state/states/crop-image.state\";\nimport {CropDownloadViewImage, CropGalleryViewImage} from \"../../shared/app-state/actions/image.action\";\n\n@Component({\n  selector: 'app-image-cropper',\n  templateUrl: './image-cropper.component.html',\n  styleUrls: ['./image-cropper.component.scss']\n})\nexport class ImageCropperComponent implements OnInit {\n  public width: number;\n  public height: number;\n  public cropForView: string;\n  imageChangedEvent: any;\n  croppedImage: any;\n  showCropper: boolean = false;\n  cropped2: any;\n  @Select(CropImageState.getData) $imageData;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public $event: any,\n              private dialogRef: MatDialogRef<ImageCropperComponent>,\n              private store: Store) {\n  }\n\n  ngOnInit(): void {\n    this.croppedImage = this.$event.img;\n    this.width = this.$event.width;\n    console.log(this.width)\n    this.height = this.$event.height;\n    console.log(this.height)\n    this.cropForView = this.$event.viewName;\n  }\n\n  imageCropped($event: ImageCroppedEvent) {\n    if (this.cropForView === 'Gallery')\n      this.store.dispatch(new CropGalleryViewImage($event.base64));\n    else\n      this.store.dispatch(new CropDownloadViewImage($event.base64));\n  }\n\n  imageLoaded() {\n    console.log(\"dfghdfjkgh666666666\");\n    this.showCropper = true;\n    console.log('Image loaded');\n  }\n\n  cropperReady($event: Dimensions) {\n\n  }\n\n  loadImageFailed() {\n  }\n\n  public close(): void {\n    // this.store.dispatch(new CropGalleryViewImage(this.cropped2));\n    this.dialogRef.close(this.cropped2);\n  }\n}\n","<div style=\" margin-bottom: 10px;display: flex; flex-direction: row; align-content: center; align-items: center\">\n  <span>Select the part of the image which should be displayed as an thumbnail</span>\n  <button style=\"margin-left: 10px\" color=\"primary\" mat-raised-button (click)=\"close()\">Crop image</button>\n</div>\n<div  class=\"cropper\">\n  <image-cropper\n    [imageBase64]=\"croppedImage\"\n    [maintainAspectRatio]=\"true\"\n    [resizeToWidth]=\"width\"\n    [resizeToHeight]=\"height\"\n    [cropperStaticWidth]=\"width\"\n    [cropperStaticHeight]=\"height\"\n    (imageCropped)=\"imageCropped($event)\">\n  </image-cropper>\n</div>\n\n\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-upload-image-dialog',\n  templateUrl: './upload-image-dialog.component.html',\n  styleUrls: ['./upload-image-dialog.component.scss']\n})\nexport class UploadImageDialogComponent implements OnInit {\n  secondFormGroup: any;\n  firstFormGroup: any;\n  isLinear: Boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<button mat-raised-button (click)=\"isLinear = !isLinear\" id=\"toggle-linear\">\n  {{!isLinear ? 'Enable linear mode' : 'Disable linear mode'}}\n</button>\n<mat-vertical-stepper [linear]=\"isLinear\" #stepper>\n  <mat-step [completed]=\"isLinear\" [stepControl]=\"firstFormGroup\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field>\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"secondFormGroup\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template matStepLabel>Fill out your address</ng-template>\n      <mat-form-field>\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-vertical-stepper>\n\n<p>FOOO</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bootstrap-playground',\n  templateUrl: './bootstrap-playground.component.html',\n  styleUrls: ['./bootstrap-playground.component.scss']\n})\nexport class BootstrapPlaygroundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<header>\n  <div class=\"brand\">\n    <a id=\"android\">\n      <mat-icon style=\"margin-top: 5px\">android</mat-icon>\n    </a>\n    <a id=\"donut\" style=\"margin-left: 10px;\">\n      <mat-icon style=\"text-align: center; margin-top: 5px\">donut_small</mat-icon>\n    </a>\n    <a id=\"widget\" style=\"margin-left: 10px;\">\n      <mat-icon style=\"margin-top: 5px\">widgets</mat-icon>\n    </a>\n    <span id=\"api_name\"><strong>Welcome to SpecShots</strong></span>\n  </div>\n\n</header>\n\n\n<div class=\"form-ang\">\n  <input class=\"search\" type=\"text\" matInput>\n</div>\n\n\n<div class=\"profile_info\">\n  <mat-icon style=\"color: white\">\n    android\n  </mat-icon>\n</div>\n\n<!--Navbar-->\n<!--\n<mdb-navbar SideClass=\"navbar navbar-expand-lg navbar-dark indigo\">\n\n  &lt;!&ndash; Navbar brand &ndash;&gt;\n  <mdb-navbar-brand><a class=\"navbar-brand\" href=\"#\">Navbar</a></mdb-navbar-brand>\n\n  &lt;!&ndash; Collapsible content &ndash;&gt;\n  <links>\n\n    &lt;!&ndash; Links &ndash;&gt;\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link waves-light\" mdbWavesEffect>Home<span class=\"sr-only\">(current)</span></a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link waves-light\" mdbWavesEffect>Features</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link waves-light\" mdbWavesEffect>Pricing</a>\n      </li>\n\n      &lt;!&ndash; Dropdown &ndash;&gt;\n      <li class=\"nav-item dropdown\" dropdown>\n        <a dropdownToggle mdbWavesEffect type=\"button\" class=\"nav-link dropdown-toggle waves-light\" mdbWavesEffect>\n          Basic dropdown<span class=\"caret\"></span></a>\n        <div *dropdownMenu class=\"dropdown-menu dropdown dropdown-primary\" role=\"menu\">\n          <a class=\"dropdown-item waves-light\" mdbWavesEffect href=\"#\">Action</a>\n          <a class=\"dropdown-item waves-light\" mdbWavesEffect href=\"#\">Another action</a>\n          <a class=\"dropdown-item waves-light\" mdbWavesEffect href=\"#\">Something else here</a>\n          <div class=\"divider dropdown-divider\"></div>\n          <a class=\"dropdown-item waves-light\" mdbWavesEffect href=\"#\">Separated link</a>\n        </div>\n      </li>\n\n    </ul>\n    &lt;!&ndash; Links &ndash;&gt;\n\n    &lt;!&ndash; Search form &ndash;&gt;\n    <form class=\"form-inline waves-light\" mdbWavesEffect>\n      <div class=\"md-form my-0\">\n        <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\">\n      </div>\n    </form>\n  </links>\n  &lt;!&ndash; Collapsible content &ndash;&gt;\n\n</mdb-navbar>\n&lt;!&ndash;/.Navbar&ndash;&gt;\n-->\n","<div style=\"display: flex;\n flex-direction: column;\njustify-content: center;\n align-items: center;\n  justify-items: center;\n   align-content: center; gap: 15px\"\n     *ngIf=\"$croppedValueState | async as croppedValues\" class=\"cropped-values\">\n  <div style=\"display: flex; flex-direction: column;\n   justify-content: center; align-items: center; gap: 10px\"\n    *ngFor=\"let res of croppedValues.possibleResolutions\">\n    <button style=\"width: 150px; height: 80px\" mat-raised-button>\n      <mat-icon>download</mat-icon>\n      {{res}}\n    </button>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {Select} from \"@ngxs/store\";\nimport {GetImageByIdState} from \"../../shared/app-state/states/get-image-by-id.state\";\nimport {PrepareCroppedForDownloadState} from \"../../shared/app-state/states/prepare-cropped-for-download.state\";\n\n@Component({\n  selector: 'app-download-cropped-image-dialog',\n  templateUrl: './download-cropped-image-dialog.component.html',\n  styleUrls: ['./download-cropped-image-dialog.component.scss']\n})\nexport class DownloadCroppedImageDialogComponent implements OnInit {\n  @Select(PrepareCroppedForDownloadState.getCroppedValues) $croppedValueState;\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-search-toolbar></app-search-toolbar>\n\n<div\n  style=\"margin-top: 30px; margin-bottom: 10px;display: flex;flex-direction: column ;justify-content: center; align-items: center\">\n  <!--  <span>Select the part of the image which should be displayed as an thumbnail</span>-->\n  <!--  <button style=\"margin-left: 10px\" color=\"primary\" mat-raised-button (click)=\"close()\">Crop image</button>-->\n  <!--  <button style=\"font-size: 20px\" *ngIf=\"croppedWidth | async as width\" mat-icon-button>-->\n  <!--    <mat-icon>photo_size_select_large</mat-icon>-->\n  <!--    {{\"New width : \" + width + \"px\"}}-->\n  <!--  </button>-->\n  <!--  <button style=\"font-size: 20px\" *ngIf=\"croppedHeight | async as height\" mat-icon-button>-->\n  <!--    <mat-icon>photo_size_select_large</mat-icon>-->\n  <!--    {{\"New height : \" + height + \"px\"}}-->\n  <!--  </button>-->\n\n  <div *ngIf=\"!showDimensions\" class=\"load-image\" style=\"margin: 0 auto;\n  display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 10px\">\n    <mat-spinner diameter='100' ></mat-spinner>\n    <span style=\"font-size: 20px; margin-top: 20px\"><strong>Loading image please wait</strong></span>\n  </div>\n  <div *ngIf=\"showDimensions\" class=\"dimensions\"\n       style=\"width: 700px; padding: 20px; margin-top: 10px; display: flex; flex-direction: row\">\n    <!--    <div class=\"enable-user-input\" style=\"border: 1px solid black;display: flex; flex-direction: row ;justify-content: center;align-items: center\">-->\n    <!--      <mat-icon>create</mat-icon>-->\n    <!--      <mat-slide-toggle (change)=\"changeStuff($event)\"-->\n    <!--                        style=\"margin-left: 20px\" [(ngModel)]=\"enableUserInput\"></mat-slide-toggle>-->\n    <!--    </div>-->\n    <!--    <div class=\"user-input\">-->\n    <div class=\"input-flex-wrapper\" style=\"width: 500px; margin-bottom: 15px\">\n      <div class=\"width\" style=\"\">\n        <mat-form-field disabled=\"true\" style=\"font-size: 20px; width: 100%\">\n          <mat-label>Width</mat-label>\n          <input readonly type=\"number\" (change)=\"changedWidthFunc(input.value)\" [formControl]=\"widthInputField\" matInput #input>\n          <mat-hint *ngIf=\"$details | async as imgDetail\">\n            Original width : {{(input.value * diffRatio).toFixed(2)}}\n          </mat-hint>\n          <!--<button mat-button matSuffix mat-icon-button aria-label=\"Clear\">\n            <mat-icon matSuffix>mode_edit</mat-icon>\n          </button>-->\n        </mat-form-field>\n<!--        <span *ngIf=\"$details | async as imgDetail\">{{(input.value * (imgDetail.width / input.value))}}</span >-->\n      </div>\n      <div class=\"height\">\n\n        <mat-form-field disabled=\"true\" style=\"font-size: 20px; width: 100%;; margin-top: 20px\">\n          <mat-label>Height</mat-label>\n          <input readonly type=\"number\" [formControl]=\"heightInputField\" matInput #input2>\n          <mat-hint *ngIf=\"$details | async as imgDetail\">Original height :\n            {{(input2.value * diffRatio).toFixed(2)}}\n          </mat-hint >\n          <!--<button mat-button matSuffix mat-icon-button aria-label=\"Clear\">\n            <mat-icon matSuffix>mode_edit</mat-icon>\n          </button>-->\n        </mat-form-field>\n      </div>\n    </div>\n    <div class=\"crop-download-wrapper\" style=\"margin-left: 30px; display: flex;\n    flex-direction: column; justify-content: center; align-items: center\">\n      <button [matMenuTriggerFor]=\"menu\" (onMenuOpen)=\"cropAndDownload(input.value, input2.value)\"  mat-raised-button color=\"primary\">Download</button>\n      <mat-menu style=\"width: 100%\" #menu=\"matMenu\">\n        <div *ngIf=\"$croppedValues | async as croppedDetails\">\n          <div class=\"hoverable\" *ngFor=\"let detail of croppedDetails.possibleResolutions\">\n            <button (click)=\"download(detail)\" style=\"width: 100%; border-radius: 50%\" mat-menu-item>\n              <mat-icon>download</mat-icon>\n              <span>{{detail}}</span>\n            </button>\n            <mat-divider></mat-divider>\n          </div>\n        </div>\n      </mat-menu>\n    </div>\n    <!--    </div>-->\n  </div>\n\n  <mat-divider></mat-divider>\n\n  <!--  <mat-chip-list class=\"mat-chip-list-stacked\" aria-label=\"Color selection\">-->\n  <!--    <mat-chip style=\"font-size: 18px;max-width: 200px\" selected *ngIf=\"croppedWidth | async as width\">-->\n  <!--      {{\"Width : \" + width + \"px\"}}-->\n  <!--    </mat-chip>-->\n  <!--    <mat-chip style=\"font-size: 18px; max-width: 200px\" selected *ngIf=\"croppedHeight | async as height\">-->\n  <!--      {{\"Height : \" + height + \"px\"}}-->\n  <!--    </mat-chip>-->\n  <!--  </mat-chip-list>-->\n</div>\n<div *ngIf=\"$base64 | async as img\" class=\"cropper\">\n  <div>\n    <image-cropper #event [imageBase64]=\"img\"\n                   [maintainAspectRatio]=\"true\"\n                   [cropper]=\"cropper\"\n                   (imageLoaded)=\"imageLoaded()\"\n                   [aspectRatio]=\"$ratio | async\"\n                   (imageCropped)=\"imageCropped($event)\">\n    </image-cropper>\n  </div>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {ImageCroppedEvent} from \"ngx-image-cropper\";\nimport {Subject} from \"rxjs\";\nimport {GetBase64ForDownloadCropperState} from \"../../shared/app-state/states/get-base64-for-downloadCropper.state\";\nimport {GetImageByIdState} from \"../../shared/app-state/states/get-image-by-id.state\";\nimport {FormBuilder, FormControl, FormGroup} from \"@angular/forms\";\nimport {ActivatedRoute, ParamMap} from \"@angular/router\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {CropAndDownload, GetImageAsByse64, SetCroppedOffsetValues} from \"../../shared/app-state/actions/image.action\";\nimport {MatSlideToggleChange} from \"@angular/material/slide-toggle\";\nimport {ImageFileDetails} from \"../../shared/domain/imageModel/image-file-details\";\nimport {tap} from \"rxjs/operators\";\nimport {state} from \"@angular/animations\";\nimport {DownloadCroppedImageDialogComponent} from \"../download-cropped-image-dialog/download-cropped-image-dialog.component\";\nimport {PrepareCroppedForDownloadState} from \"../../shared/app-state/states/prepare-cropped-for-download.state\";\nimport {ImageDownloadService} from \"../../serviceV2/image-download.service\";\nimport {resolveProvidersRequiringFactory} from \"@angular/compiler-cli/src/ngtsc/annotations/src/util\";\n\n@Component({\n  selector: 'app-download-cropper',\n  templateUrl: './download-cropper.component.html',\n  styleUrls: ['./download-cropper.component.scss']\n})\nexport class DownloadCropperComponent implements OnInit {\n  public formGroup: FormGroup;\n  public widthInputField: FormControl;\n  public heightInputField: FormControl;\n  public origWidthInputField: FormControl;\n  public wTest: number;\n  public hTest: number;\n  private wasCropped: boolean;\n  public croppedImage: any;\n  public width: number;\n  public height: number;\n  public diffRatio: number;\n  public showDimensions: boolean = false;\n  public widthChanged: number;\n  public croppedWidth: boolean = false;\n  public croppedHeight: boolean = false;\n  @Select(PrepareCroppedForDownloadState.getCroppedValues) $croppedValues;\n  @Select(GetBase64ForDownloadCropperState.getBase64) $base64;\n  @Select(GetImageByIdState.getRatioAsString) $ratio;\n  @Select(GetImageByIdState.getFileDetails) $details;\n  public loaded: number = 0;\n  cropper = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0\n  };\n  enableUserInput: any;\n\n  constructor(private store: Store,\n              private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private dialog: MatDialog,\n              private service: ImageRequestService,\n              private downloadService: ImageDownloadService) {\n  }\n\n  ngOnInit(): void {\n    const imageFileDetails = this.store.selectSnapshot(GetImageByIdState.getFileDetails);\n    this.extractImageIdFromRequest(imageFileDetails);\n    /*this.subscribeToWidthInput(imageFileDetails);\n    this.subscribeToHeightInput(imageFileDetails);*/\n  }\n\n\n  private extractImageIdFromRequest(imageFileDetails: ImageFileDetails) {\n    this.route\n      .paramMap\n      .subscribe(param => {\n        const imageId = param.get(\"imageId\");\n        this.store.dispatch(new GetImageAsByse64(imageId));\n        this.initFormFields(imageFileDetails);\n      })\n  }\n\n  private initFormFields(imageFileDetails: ImageFileDetails) {\n    this.widthInputField = new FormControl(imageFileDetails.width);\n    this.heightInputField = new FormControl(imageFileDetails.height);\n    this.formGroup = this.fb.group({\n      width: this.widthInputField,\n      height: this.heightInputField,\n    })\n  }\n\n\n\n  public imageCropped($event: ImageCroppedEvent): void {\n    const imageFileDetails = this.store.selectSnapshot(GetImageByIdState.getFileDetails);\n    console.log(\"Starting Cropper method.....................................................\");\n    const ratio = imageFileDetails.width / imageFileDetails.height;\n    const width = $event.cropperPosition.x2 - $event.cropperPosition.x1;\n    console.log($event.cropperPosition.x1);\n    console.log($event.cropperPosition.x2);\n    if (!this.croppedWidth || !this.croppedHeight) {\n      console.log(\"Cropper width : \" + width);\n      this.wasCropped = true;\n      this.widthInputField.setValue(width.toFixed(2));\n      const height = $event.cropperPosition.y2 - $event.cropperPosition.y1;\n      console.log(\"Cropper height : \" + height);\n      this.heightInputField.setValue(height.toFixed(2));\n      this.wasCropped = false;\n    }\n    if (this.loaded == 0) {\n      this.diffRatio = imageFileDetails.width / width;\n      this.diffRatio.toFixed(2);\n    }\n    // this.croppedWidth.next($event.cropperPosition.x2 - $event.cropperPosition.x1);\n    // this.croppedHeight.next($event.cropperPosition.y2 - $event.cropperPosition.y1)\n    this.loaded++;\n    console.log(\"Method cropper finished............................................\");\n  }\n\n  close() {\n\n  }\n\n  public imageLoaded(): void {\n    setTimeout(() => {\n      const imageFileDetails = this.store.selectSnapshot(GetImageByIdState.getFileDetails);\n      const width = imageFileDetails.width;\n      this.cropper = {\n        x1: 0,\n        y1: 0,\n        x2: width,\n        y2: imageFileDetails.height\n      };\n      this.showDimensions = true;\n    });\n  }\n\n  changeStuff($event: MatSlideToggleChange) {\n\n  }\n\n  changedWidthFunc(value: string) {\n    console.log(value);\n  }\n\n  public cropAndDownload(width: string, height: string): void {\n    const parsedWidth: number = Number.parseFloat(width);\n    const parsedHeight: number = Number.parseFloat(height);\n    this.store.dispatch(\n      new SetCroppedOffsetValues(\n        this.store.selectSnapshot(GetImageByIdState.getImageDetail).imageId,\n        this.cropper.x1 * this.diffRatio,\n        this.cropper.y1 * this.diffRatio,\n        parsedWidth * this.diffRatio,\n        parsedHeight * this.diffRatio\n      )\n    )\n  }\n\n\n  download(detail: string): void {\n    let croppedDownloadRequest = this.store.selectSnapshot(PrepareCroppedForDownloadState.getCroppedValues);\n    croppedDownloadRequest.imageId = this.store.selectSnapshot(GetImageByIdState.getImageDetail).imageId;\n    croppedDownloadRequest.selectedWidth = Number.parseFloat(detail.split(' x ')[0]);\n    croppedDownloadRequest.selectedHeight = Number.parseFloat(detail.split(' x ')[1])\n    console.log(croppedDownloadRequest.selectedWidth);\n    this.downloadService\n      .downloadIndividualImage(croppedDownloadRequest, true)\n      .subscribe(res => res)\n  }\n}\n","<app-search-toolbar [filterable]=\"true\"></app-search-toolbar>\n\n<div class=\"container\">\n  <div *ngIf=\"$selectedImage | async as data\" class=\"content\">\n    <div class=\"img\">\n      <img class=\"img-content\"  [src]=\"data.link\" alt=\"\">\n    </div>\n    <div class=\"content-details\">\n      <span class=\"data-name\">{{data.name}}</span>\n    </div>\n  </div>\n  <div class=\"download\" *ngIf=\"$selectedImage | async as data\">\n    <div class=\"spacer\" style=\"margin-bottom: 20px\">\n      <div class=\"profile-detail\">\n        <button mat-icon-button>\n          <!--        <mat-icon>account_circle</mat-icon>-->\n          <img class=\"shadow\" width=\"60px\" height=\"60px\" style=\"border-radius: 100%;\"\n               src=\"{{data.user.profileImgPath}}\" alt=\"\">\n        </button>\n        <span style=\"margin-left: 30px; font-size: 18px\">{{data.user.username}}</span>\n      </div>\n      <mat-divider style=\"margin-top: 40px; margin-bottom: 20px\"></mat-divider>\n\n      <div class=\"img-detail\">\n        <div class=\"img-name\" style=\"display: flex; flex-direction: row; align-items: baseline; flex-wrap: wrap; max-width: 220px\">\n          <!--<mat-icon  color=\"primary\" style=\"font-size: 40px; margin-right: 5px\">image</mat-icon>-->\n          <button style=\" height: 50px; font-size: 18px; word-break: break-all;\" mat-icon-button>\n            <mat-icon style=\"font-size: 40px;\" color=\"primary\">image</mat-icon>\n          </button>\n          <span style=\"margin-left: 30px; font-size: 18px; max-width: 130px\">{{data.name}}</span>\n        </div>\n\n        <div class=\"img-stats\">\n          <mat-chip-list style=\"margin-top: 20px; margin-bottom: 10px\" aria-label=\"Fish selection\">\n            <div class=\"chips\" style=\"display: flex; flex-direction: row; margin-top: 20px\">\n              <mat-chip class=\"shadow\" style=\"\" color=\"primary\" selected>\n                <mat-icon style=\"margin-right: 3px; margin-left: 3px\">thumb_up</mat-icon>\n                <span style=\"margin-left: 3px; margin-right: 3px\">{{data.liked}}</span>\n              </mat-chip>\n              <mat-chip class=\"shadow\" style=\"\" color=\"primary\" selected>\n                <mat-icon style=\"\">save_alt</mat-icon>\n                <span style=\"margin-left: 3px; margin-right: 3px\">{{data.downloaded}}</span>\n              </mat-chip>\n            </div>\n          </mat-chip-list>\n        </div>\n      </div>\n\n\n      <mat-divider style=\"margin-top: 20px; margin-bottom: 10px\"></mat-divider>\n\n\n      <div class=\"download-image\">\n        <button class=\"shadow\" mat-raised-button color=\"primary\" matTooltip=\"Click to open menu\"\n                style=\"color: white; width: 300px; height: 50px\"\n                [matMenuTriggerFor]=\"menu\"\n                aria-label=\"Example icon-button with a menu\">\n          <!--    <mat-icon style=\"font-size: 30px\">more_vert</mat-icon>-->\n          Download\n        </button>\n\n        <mat-menu backdropClass=\"img-download-detail\" #menu=\"matMenu\" >\n          <div *ngFor=\"let detail of data.imageDetails\">\n            <button (click)=\"download(detail)\" style=\"width: 700px; height: 100%\" mat-menu-item>\n              <mat-icon>aspect_ratio</mat-icon>\n              <span style=\"display: inline-block; width: 15px\"></span>\n              <span>{{detail.width + \" x \" + detail.height}}</span>\n              <!--          <span style=\"display: inline-block; width: 25px\"></span>-->\n              <!--          <span>{{detail.contentType}}</span>-->\n              <span style=\"display: inline-block; width: 25px\"></span>\n              <span>{{(detail.size / 1024).toFixed(1) + \" kB\"}}</span>\n            </button>\n          </div>\n          <mat-divider></mat-divider>\n          <button mat-menu-item [mat-menu-trigger-for]=\"cropImage\">\n            <mat-icon>settings_applications</mat-icon>\n            Download options\n          </button>\n\n          <mat-menu #cropImage=\"matMenu\" xPosition=\"before\">\n            <button (click)=\"cropImageForDownload(data.imageDetails[0])\" mat-menu-item>\n              <mat-icon>photo_size_select_large</mat-icon>\n              Crop image\n            </button>\n            <mat-divider></mat-divider>\n            <button (click)=\"getIndividualResolutionDownloadDialog(data.imageDetails[0])\" mat-menu-item>\n              <mat-icon>transform</mat-icon>\n              Set individual dimensions</button>\n          </mat-menu>\n        </mat-menu>\n      </div>\n    </div>\n\n\n\n\n    <div class=\"related-tags\">\n      <h3>Related tags : </h3>\n      <div *ngIf=\"$selectedImage | async as data\" class=\"tags\">\n        <a class=\"shadow\" (click)=\"clickedTag(i.tag)\" style=\"background-color: #fcefee;\n        color: black;\n        text-decoration: none;\n        padding: 5px 20px;\n        border-radius: 20px;\n        margin-top: 2%; margin-right: 1%\" *ngFor=\"let i of data.tags\">{{'# ' + i.tag }}\n        </a>\n      </div>\n    </div>\n    <span style=\"margin-top: 20px\"></span>\n  </div>\n</div>\n\n<div class=\"related-images-container\">\n  <div class=\"header\">\n    <h2>Related images : </h2>\n  </div>\n  <app-image-content [isProfile]=\"false\"\n                     [data]=\"$relatedImages\"></app-image-content>\n</div>\n\n","import {Component, OnInit} from '@angular/core';\nimport {Select, Store} from \"@ngxs/store\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {SelectImageState} from \"../../shared/app-state/states/select-image.state\";\nimport {ImageDownloadService} from \"../../serviceV2/image-download.service\";\nimport {\n  CropAndDownload,\n  GetDownloadDetails, GetImageAsByse64,\n  GetImageByImageId,\n  GetRelatedImagesByTagIDs,\n  ImagesByTagsAction\n} from \"../../shared/app-state/actions/image.action\";\nimport {DownloadDetailsState} from \"../../shared/app-state/states/download-details.state\";\nimport {GetImageByIdState} from \"../../shared/app-state/states/get-image-by-id.state\";\nimport {Subject} from \"rxjs\";\nimport {UserDetailsState} from \"../../shared/app-state/states/User-details.state\";\nimport {ImagesByTagNameQueryImpl} from \"../../shared/domain/imageModel/ImagesByTagNameQuery\";\nimport {RelatedImagesState} from \"../../shared/app-state/states/related-images.state\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ImageCropperComponent} from \"../../private/image-cropper/image-cropper.component\";\nimport {CropImageState} from \"../../shared/app-state/states/crop-image.state\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {DownloadCropperComponent} from \"../download-cropper/download-cropper.component\";\nimport {SetResolutionDownloadDialogComponent} from \"../set-resolution-download-dialog/set-resolution-download-dialog.component\";\n\n@Component({\n  selector: 'app-image-details',\n  templateUrl: './image-details.component.html',\n  styleUrls: ['./image-details.component.scss']\n})\nexport class ImageDetailsComponent implements OnInit {\n\n  // @Select(DownloadDetailsState.getFile) $selectedImage;\n  @Select(RelatedImagesState.getRelatedImages) $relatedImages;\n  @Select(UserDetailsState.profileImgPath) $profileImg;\n  @Select(DownloadDetailsState.getDetails) $downloadDetails;\n  @Select(GetImageByIdState.getImageDetail) $selectedImage;\n  formattedDetails = new Subject<string[]>();\n  private imageId: string;\n\n\n  constructor(private store: Store,\n              private route: ActivatedRoute,\n              private downloadService: ImageDownloadService,\n              private dialog: MatDialog,\n              private service: ImageRequestService,\n              private router: Router) {\n  }\n\n  ngOnInit(): void {\n    this.route\n      .paramMap\n      .subscribe(param => {\n        const imageId = param.get('imageId');\n        this.imageId = imageId;\n        console.log(this.imageId);\n      });\n  }\n\n  download(detail: any) {\n    const imageId = this.store.selectSnapshot(GetImageByIdState.getImageDetail).imageId;\n    console.log(detail);\n    this.store\n      .dispatch(new GetDownloadDetails(imageId, detail))\n      .subscribe(value1 => {\n        console.log(value1.downloadDetails);\n        window.location.href = value1.downloadDetails.downloadLink;\n        this.store\n          .dispatch(new GetImageByImageId(this.imageId));\n      });\n    // window.location.href = detail.downloadLink;\n  }\n\n  clickedTag(tag: string) {\n    this.store.dispatch(\n      new ImagesByTagsAction(new ImagesByTagNameQueryImpl(tag))\n    );\n  }\n\n  cropImageForDownload(imageDetail: any) {\n    console.log(imageDetail);\n    const imageId = this.store.selectSnapshot(GetImageByIdState.getImageDetail).imageId;\n    this.store.dispatch(new GetImageByImageId(imageId));\n    this.store.dispatch(new GetImageAsByse64(imageId));\n    this.router\n      .navigate(['crop-download', {imageId: imageId}]);\n    console.log(imageDetail);\n    // this.service\n    //   .getImageBytes(imageId)\n    //   .subscribe(byteArray => {\n    //     let blob = new Blob([byteArray],{type:'application/octet-binary'});\n    //     let reader = new FileReader();\n    //     reader.onload = (evt: any) => {\n    //       this.store\n    //         .dispatch(new CropAndDownload(evt.target.result))\n    //       this.router\n    //         .navigate(['crop-download', {imageId: imageId}])\n    //     };\n    //     // this.dialog.open(DownloadCropperComponent,{\n    //     //   data: { img: evt.target.result,\n    //     //     width: imageDetail.width,\n    //     //     height: imageDetail.height, viewName: 'Download' }\n    //     // })\n    //     reader.readAsDataURL(blob);\n    //   })\n  }\n\n  getIndividualResolutionDownloadDialog(imageDetail: any) {\n    console.log(imageDetail);\n    this.dialog.open(SetResolutionDownloadDialogComponent, {\n      width: '450px',\n      height: '460px',\n      panelClass: 'setIndividualResDialog'\n    });\n  }\n}\n","<div style=\"display: flex; justify-content: center; align-items: center\">\n\n  <mat-error *ngIf=\"$requestStatus | async as status\" style=\";margin: 0 auto; font-size: 30px\">\n    The requested Page could not be found\n    Reason : {{status.message}}\n  </mat-error>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {Select, Store} from \"@ngxs/store\";\nimport {RequestMessageAction} from \"../../shared/app-state/actions/request-message.action\";\nimport {UserDetailsState} from \"../../shared/app-state/states/User-details.state\";\nimport {RequestStatusState} from \"../../shared/app-state/states/request-status.state\";\n\n@Component({\n  selector: 'app-not-found-page',\n  templateUrl: './not-found-page.component.html',\n  styleUrls: ['./not-found-page.component.scss']\n})\nexport class NotFoundPageComponent implements OnInit {\n  @Select(RequestStatusState.getStatus) $requestStatus;\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n    /*this.store.dispatch(new RequestMessageAction(null));*/\n  }\n\n}\n","<app-search-toolbar [filterable]=\"true\"></app-search-toolbar>\n\n\n<div  class=\"container\">\n  <!--  <div class=\"filler_left\"></div>-->\n\n  <mat-error *ngIf=\"requestError\" style=\"font-size: 40px\">\n    {{errorMessage}}\n  </mat-error>\n\n  <div *ngIf=\"requestError === false\" class=\"center\">\n\n\n    <div class=\"profile_icon\">\n<!--      <button *ngIf=\"!($logged | async)\" disabled mat-icon-button-->\n<!--              aria-label=\"Example icon button with a home icon\">-->\n<!--        <mat-icon style=\"font-size: 195px\">account_circle</mat-icon>-->\n<!--      </button>-->\n\n      <mat-icon class=\"profile-img\" *ngIf=\"!($profileImg | async)\"\n                style=\"font-size: 165px; color: lightgray; margin-right: 5px\">\n        account_circle\n      </mat-icon>\n      <!--      <img *ngIf=\"($logged | async) as loggedUser\" class=\"profile-img\" [src]=\"loggedUser.profileImgPath\">-->\n      <img *ngIf=\"($profileImg | async) as src\" class=\"profile-img\" [src]=\"src\">\n<!--      <img class=\"profile-img\" [src]=\"userDetails.userProfile.profileImgPath\">-->\n    </div>\n    <div class=\"title\">\n      <div class=\"user-name\">\n<!--        <span *ngIf=\"userDetails\"-->\n<!--              style=\"font-size: 40px; margin-top: 2%; margin-bottom: 6px; line-height: 40px\">-->\n<!--          <strong>-->\n<!--            {{userDetails.userProfile.firstName + \" \" + userDetails.userProfile.lastName}}-->\n<!--          </strong>-->\n<!--        </span>-->\n<!--        <span *ngIf=\"$userDetails | async as loggedUser\"-->\n<!--              style=\"font-size: 40px; margin-top: 2%; margin-bottom: 6px; line-height: 40px\">-->\n<!--          <strong>-->\n<!--            {{loggedUser.firstName + \" \" + loggedUser.lastName}}-->\n<!--          </strong>-->\n<!--        </span>-->\n          <span *ngIf=\"$firstLast | async as name\"\n                style=\"font-size: 40px; margin-top: 2%; margin-bottom: 6px; line-height: 40px\">\n          <strong>\n            {{name}}\n          </strong>\n        </span>\n      </div>\n      <br>\n      <div class=\"user-name\">\n        <p style=\"font-size: 17px; line-height: 28px\">\n          Download free, beautiful high-quality photos curated <br> by\n<!--          <span *ngIf=\"userDetails\">-->\n<!--            {{userDetails.userProfile.firstName + \" \" + userDetails.userProfile.lastName }}-->\n<!--         </span>.-->\n<!--          <span *ngIf=\"$userDetails | async as userDetails\">-->\n<!--            {{userDetails.firstName + \" \" + userDetails.lastName }}-->\n<!--         </span>.-->\n          <span *ngIf=\"$firstLast | async as name\">\n            {{name}}\n         </span>.\n        </p>\n      </div>\n<!--      <div *ngIf=\"userDetails.isOwner\" class=\"edit\">-->\n<!--        <button routerLink=\"/edit-profile\" style=\"\" mat-icon-button>-->\n<!--          <mat-icon>edit</mat-icon>-->\n<!--          Edit profile-->\n<!--        </button>-->\n<!--      </div>-->\n      <div *ngIf=\"editableProfile | async\" class=\"edit\">\n        <button routerLink=\"/edit-profile\" style=\"\" mat-icon-button>\n          <mat-icon>edit</mat-icon>\n          Edit profile\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<mat-tab-group (selectedTabChange)=\"imageWasLiked($event)\" class=\"mat-tab-group\">\n  <mat-tab class=\"tab\" label=\"Gallery\">\n    <ng-template mat-tab-label>\n      <mat-icon class=\"example-tab-icon\">photo_library</mat-icon>\n      Images\n    </ng-template>\n<!--    <app-image-content [isProfile]=\"true\"-->\n<!--                       [data]=\"$imgs\"></app-image-content>-->\n    <app-image-content [isProfile]=\"true\"\n                       [data]=\"$userImages\"></app-image-content>\n  </mat-tab>\n  <mat-tab label=\"Likes\">\n    <ng-template mat-tab-label>\n      <mat-icon class=\"example-tab-icon\">thumb_up</mat-icon>\n      Likes\n    </ng-template>\n<!--    <app-image-content [isProfile]=\"false\"-->\n<!--                       [data]=\"$likeds\"></app-image-content>-->\n    <app-image-content [isProfile]=\"false\"\n                       [data]=\"$userLikes\"></app-image-content>\n  </mat-tab>\n<!--  <mat-tab *ngIf=\"(editableProfile | async) || (userDetails.isOwner)\" label=\"Third\">-->\n<!--    <ng-template mat-tab-label>-->\n<!--      <mat-icon class=\"example-tab-icon\">lock</mat-icon>-->\n<!--      Private-->\n<!--    </ng-template>-->\n<!--  </mat-tab>-->\n  <mat-tab *ngIf=\"editableProfile | async\" label=\"Third\">\n    <ng-template mat-tab-label>\n      <mat-icon class=\"example-tab-icon\">lock</mat-icon>\n      Private\n    </ng-template>\n  </mat-tab>\n</mat-tab-group>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Select, Store} from \"@ngxs/store\";\nimport {LoginStateModel} from \"../../shared/app-state/states/login.state.model\";\nimport {UserDetailsState} from \"../../shared/app-state/states/User-details.state\";\nimport {UserDetailsActions} from \"../../shared/app-state/actions/user-details.action\";\nimport {ImagesByUserIDAction} from \"../../shared/app-state/actions/image.action\";\nimport {ImagesByUserIdState} from \"../../shared/app-state/states/images-by-user-id.state\";\nimport {DisplayImagesAction} from \"../../shared/app-state/actions/display-images.action\";\nimport {AuthenticationActions} from \"../../shared/app-state/actions/authentication-action\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {LoggedUserDetailsState} from \"../../shared/app-state/states/logged-user-details.state\";\nimport {map, share, switchMap, tap} from \"rxjs/operators\";\nimport {LoggedInUserModel} from \"../../shared/domain/userModel/UserLoginModel\";\nimport {BaseUserDetails} from \"../../shared/domain/userModel/user-details.model\";\nimport {UserAuthStateModel} from \"../../shared/domain/UserAuthStateModel\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {BehaviorSubject, Observable, of, Subject} from \"rxjs\";\nimport {ImageModel} from \"../../shared/domain/imageModel/image.model\";\nimport LoggedUserDetails = AuthenticationActions.LoggedUserDetails;\nimport {MatTabChangeEvent} from \"@angular/material/tabs\";\nimport {ProfileViewModel} from \"./profile-view-model\";\nimport {ModelFilter} from \"../../shared/util/model-filter\";\nimport {ImageModelFilter} from \"../../shared/util/image-model-filter\";\nimport {RequestMessageAction} from \"../../shared/app-state/actions/request-message.action\";\nimport {RequestStatusState} from \"../../shared/app-state/states/request-status.state\";\nimport {MediaProcessorService} from \"../../serviceV2/media-processor.service\";\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit, OnDestroy {\n\n  weekFilter: boolean = false;\n\n\n  @Select(UserDetailsState.profileImgPath) $profileImg;\n\n  @Select(LoginStateModel.loggedInUser) $logged;\n  userDetails: ProfileViewModel;\n  @Select(UserDetailsState.firstLastName) $firstLast;\n  @Select(UserDetailsState.getUserImages) $userImages;\n  @Select(UserDetailsState.getUserLikes) $userLikes;\n  @Select(UserDetailsState.userDetails) $userDetails;\n\n  @Select(RequestStatusState.getStatus) $requestStatus;\n  $imgs = new Observable<ImageModel[]>();\n  $likeds = new Observable<ImageModel[]>();\n  requestError: boolean = false;\n  errorMessage: string;\n  downloadLink: any;\n  editableProfile = new BehaviorSubject<boolean>(false);\n\n  constructor(private store: Store,\n              private route: ActivatedRoute,\n              private service: ImageRequestService,\n              private router: Router) {\n    // this.route.data.subscribe((value: { userDetails: ProfileViewModel }) => {\n    //   this.userDetails = value.userDetails;\n    //   this.$imgs = of(value.userDetails.userProfile.images);\n    //   this.$likeds = of(value.userDetails.userProfile.likes)\n    // })\n  }\n\n  ngOnInit(): void {\n\n\n    this.$userImages\n      .subscribe(model =>  {\n        if (model !== undefined) {\n\n          // ImageModelFilter.apply(model, 3600000 * 24 * 7)\n          //   .forEach(image => console.log(\"Week : \" + image.uploadDate));\n\n          // ImageModelFilter.apply(model, 3600000 * 24 * 30)\n          //   .forEach(image => console.log(\"Month : \" + image.uploadDate))\n          //\n          // ImageModelFilter\n          //   .apply(model, 3600000 * 24 * 365)\n          //   .forEach(image => console.log(\"Year : \" + image.uploadDate))\n\n        }\n      })\n\n\n    console.log(this.userDetails);\n    this.route.paramMap\n      .subscribe(param => {\n        const userId = param.get('userId');\n        this.store\n          .dispatch(new UserDetailsActions.GetUserDetails(userId))\n          .subscribe(value => {\n            console.log(value.UserDetails);\n            this.requestError = false;\n          }, error => {\n            this.requestError = true;\n            this.errorMessage = 'Unable to find requested user';\n            this.router.navigate(['profile', {error: error.error.message}])\n          })\n        this.$logged.subscribe(loggedUser => {\n          if (loggedUser) {\n            this.editableProfile.next(loggedUser.userId === param.get('userId'));\n          }\n        })\n      })\n\n    const loggedUser : BaseUserDetails =\n      this.store.selectSnapshot(LoginStateModel.loggedInUser);\n    if (loggedUser !== undefined && loggedUser !== null) {\n\n      // this.store.dispatch([\n      //     new AuthenticationActions.IsLoggedIn(),\n      //     new ImagesByUserIDAction(loggedUser.userId)\n      //   ]\n      // )\n    }\n\n  }\n\n  download(name: any, userId: any) {\n\n  }\n\n  ngOnDestroy(): void {\n\n  }\n\n  imageWasLiked($event: MatTabChangeEvent): void {\n    const label = $event.tab.textLabel;\n    console.log(label);\n    if (label === 'Likes') {\n      console.log(\"da schau her\");\n      this.store.dispatch(new UserDetailsActions.GetUserDetails(\n        this.store.selectSnapshot(UserDetailsState.userDetails).userId\n      ))\n    }\n  }\n}\n","import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {CdkVirtualScrollViewport} from \"@angular/cdk/scrolling\";\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\nimport {debounceTime, filter, map, switchMap, tap, throttleTime} from \"rxjs/operators\";\nimport {TagRequestService} from \"../../serviceV2/tag-request.service\";\nimport {connectableObservableDescriptor} from \"rxjs/internal/observable/ConnectableObservable\";\nimport {ImageModel} from \"../../shared/domain/imageModel/image.model\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {ImagesByTagsAction} from \"../../shared/app-state/actions/image.action\";\nimport {ImagesByTagState} from \"../../shared/app-state/states/images-by-tag-state\";\nimport {ImageModelList} from \"../../shared/domain/imageModel/image-model-list\";\nimport {QueryTagAction} from \"../../shared/app-state/actions/query-tag-action\";\nimport {TagModel} from \"../../shared/domain/tagModel/tag-model\";\nimport {SearchByTagState} from \"../../shared/app-state/states/search-by-tag.state\";\nimport {TagQueryList} from \"../../shared/domain/tagModel/tag-query-list\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {\n  FilterName,\n  ImagesByTagNameQueryImpl,\n  ImagesByTagNameWithFilterArgs, ImagesByTagNameWithFilterOpt\n} from \"../../shared/domain/imageModel/ImagesByTagNameQuery\";\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {SignupComponent} from \"../../shared/signup/signup.component\";\nimport {LoggedInUserModel} from \"../../shared/domain/userModel/UserLoginModel\";\nimport {LoginComponent} from \"../../shared/login/login.component\";\nimport {LoginStateModel} from \"../../shared/app-state/states/login.state.model\";\nimport {AuthenticationActions} from \"../../shared/app-state/actions/authentication-action\";\nimport {UserAuthenticationService} from \"../../serviceV2/user-authentication.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {error} from \"@angular/compiler/src/util\";\nimport {DisplayImagesAction} from \"../../shared/app-state/actions/display-images.action\";\nimport {UserDetailsState} from \"../../shared/app-state/states/User-details.state\";\nimport {UserDetailsActions} from \"../../shared/app-state/actions/user-details.action\";\nimport {LoggedUserDetailsState} from \"../../shared/app-state/states/logged-user-details.state\";\nimport {IUserAuthState} from \"../../shared/domain/UserAuthStateModel\";\nimport {BaseUserDetails} from \"../../shared/domain/userModel/user-details.model\";\nimport {GoogleLoginProvider, SocialAuthService} from \"angularx-social-login\";\nimport LoggedUserDetails = AuthenticationActions.LoggedUserDetails;\nimport SearchUsers = UserDetailsActions.SearchUsers;\nimport {SearchByUsersState} from \"../../shared/app-state/states/search-by-users.state\";\nimport {SearchViewModel} from \"./search-view.model\";\nimport {MatCheckboxChange} from \"@angular/material/checkbox\";\n\n\n@Component({\n  selector: 'app-search-toolbar',\n  templateUrl: './search.toolbar.component.html',\n  styleUrls: ['./search.toolbar.component.scss']\n})\nexport class SearchToolbarComponent implements OnInit, OnDestroy {\n  // if variable filterable is set to true then\n  // autocomplete image-request will be filtered with the applied values\n  @Input('filterable') filterable: boolean;\n\n  openCloseDetails: boolean = false;\n  // searchOption can be set either to tags or to users\n  // if one of both is set then individual filter-options can be applied\n  searchOption = \"Tags\";\n  // observable-searchTerm changes when the value in the\n  // autocomplete input changes\n  searchTerm$ = new Subject<string>();\n  // observable $tagOptions is directly fetched from the rest api\n  // to be displayed in the options-dialog as a clickable tagList\n  @Select(SearchByTagState.getFetchedTagListAsOption) $tagOptions: Observable<SearchViewModel[]>;\n  // observable $userOptions is directly fetched from the rest api\n  // to be displayed in the options-dialog as a clickable userList\n  // which has an existing profile\n  @Select(SearchByUsersState.getFetchedUsers) $users: Observable<BaseUserDetails[]>;\n  // observable $isLoggedIn validates with a\n  // server request if the user is logged in\n  @Select(LoginStateModel.isLoggedIn) $isLoggedIn;\n  // $profileImage is to display the clickable\n  // logged users profile image int the toolbar\n  // when icon is clicked then a options menu opens\n  @Select(LoginStateModel.profileImg) $profileImage;\n  // $loggedUser is fetched from the server\n  // and displays the logged user details\n  @Select(LoginStateModel.loggedInUser) $loggedUser;\n  // $userName -> formatted logged userName\n  @Select(LoggedUserDetailsState.loggedUsername) $userName;\n\n  filterOptions: FilterCheckBox = {\n    timeFilterOptions: [\n      {name: 'Last 7 Days', checked: false,  value: 7},\n      {name: 'Last 30 Days', checked: false,  value: 30},\n      {name: 'Last 365 Days', checked: false, value: 365},\n      {name: 'All', checked: true, disabled: false, value: -1}\n    ],\n    mostDownloads: { name: 'Most downloaded', checked: false },\n    mostLiked: { name: 'Most liked', checked: false }\n  };\n\n  weekFilter: boolean = false;\n  monthFilter: boolean = false;\n  yearFilter: boolean = false;\n\n  // ng until destroy\n\n  constructor(private service: TagRequestService,\n              public store: Store,\n              public imageService: ImageRequestService,\n              private dialog: MatDialog,\n              private authService: UserAuthenticationService,\n              private router: Router,\n              private route: ActivatedRoute) {\n\n    this.searchTerm$\n      .pipe(debounceTime(1000))\n      .subscribe(value => {\n        switch (this.searchOption) {\n          case 'Tags':\n            this.store.dispatch(new QueryTagAction(new BehaviorSubject(value)))\n            break;\n          case 'Users':\n            this.store.dispatch(new SearchUsers(new BehaviorSubject(value)))\n            break;\n        }\n\n      });\n  }\n\n  foo(evt) {\n    console.log(evt.target.value)\n  }\n\n  ngOnInit(): void {\n    let val: BaseUserDetails =\n      this.store.selectSnapshot(LoginStateModel.loggedInUser);\n    if (val === undefined || val === null)\n      this.store.dispatch(new AuthenticationActions.IsLoggedIn())\n        .subscribe(value => {\n          this.store.dispatch(new LoggedUserDetails(value.Authentication.user.userId))\n            .subscribe(value1 => console.log(value1));\n        });\n  }\n\n  search(selected: string): void {\n    /*const filter: ImagesByTagNameWithFilterOpt;*/\n\n    let filters = new Map();\n    filters.set(FilterName.FILTER_BY_DATE_WEEK, this.weekFilter);\n    filters.set(FilterName.FILTER_BY_DATE_MONTH, this.monthFilter);\n    filters.set(FilterName.FILTER_BY_DATE_YEAR, this.yearFilter);\n    switch (this.searchOption) {\n      case 'Tags' :\n        this.store.dispatch(new ImagesByTagsAction(\n          new ImagesByTagNameWithFilterOpt(this.filterOptions, selected)))\n          .subscribe(value => {\n            console.log(value);\n            console.log(\"Search pressed..\");\n            this.store.dispatch(new Navigate(['/image-by-tags']))\n          });\n        break;\n      case 'Users':\n        const userId = this.store\n          .selectSnapshot(SearchByUsersState.getFetchedUsers)\n          .filter(user => user.username === selected)\n          .map(filteredUser => filteredUser.userId);\n        this.store.dispatch(\n          new Navigate(['profile', {userId: userId}]));\n    }\n\n  }\n\n  signup(): void {\n    const ref = new MatDialogConfig();\n    this.dialog.open(SignupComponent,\n      {\n        width: '660px',\n        disableClose: true,\n        autoFocus: false\n      });\n  }\n\n  login(): void {\n    const ref = new MatDialogConfig();\n    ref.disableClose = true;\n    this.dialog.open(LoginComponent, {width: '380px'});\n  }\n\n  logout(): void {\n    this.store.dispatch(new AuthenticationActions.Logout())\n      .subscribe(value =>\n        this.store.dispatch(new Navigate(['welcome'])))\n  }\n\n  navigateUploadImage(): void {\n    let loggedUser: BaseUserDetails =\n      this.store.selectSnapshot(LoginStateModel.loggedInUser);\n    this.router.navigate(['upload', {userId: loggedUser.userId}]);\n  }\n\n\n  navigateToSettings(): void {\n    this.store.dispatch(new Navigate(['edit-profile']))\n  }\n\n  navigateToUser(): void {\n    let loggedUser: BaseUserDetails =\n      this.store.selectSnapshot(LoginStateModel.loggedInUser);\n    this.store.dispatch(\n      new Navigate(['profile', {userId: loggedUser.userId}])\n    )\n  }\n\n  ngOnDestroy(): void {\n  }\n\n  testing(el: any) {\n    console.log(el);\n    console.log(\"AHAHAHAHAH\");\n  }\n\n  closeFilterDetails(): void {\n    this.openCloseDetails = !this.openCloseDetails;\n  }\n\n  public updateAll(checked: MatCheckboxChange, timeFilter: CheckBoxModel<number>): void {\n    this.filterOptions\n      .timeFilterOptions\n      .filter(value => value.name != timeFilter.name)\n      .forEach(value => value.checked = false);\n  }\n}\n\n\nexport interface CheckBoxModel<T> {\n  name: string;\n  checked: boolean;\n  disabled?: boolean;\n  value?: T;\n}\n\nexport interface FilterCheckBox {\n  timeFilterOptions: Array<CheckBoxModel<number>>;\n  mostDownloads: CheckBoxModel<boolean>;\n  mostLiked: CheckBoxModel<boolean>;\n}\n\n\n","<div class=\"container\">\n  <div class=\"left\">\n    <a>\n      <mat-icon style=\"margin-top: 5px\">android</mat-icon>\n    </a>\n    <a style=\"margin-left: 10px;\">\n      <mat-icon style=\"text-align: center; margin-top: 5px\">donut_small</mat-icon>\n    </a>\n    <a style=\"margin-left: 10px;\">\n      <mat-icon style=\"margin-top: 5px\">widgets</mat-icon>\n    </a>\n    <a style=\"margin-left: 10px; font-family: Epilogue,serif\">\n      <strong>Welcome to SpecShots</strong>\n    </a>\n  </div>\n  <div class=\"center-wrapper\" style=\"display: flex; flex-direction: column\">\n    <div class=\"center\">\n      <div style=\"display: flex; flex-direction: row;\" id=\"srh\">\n        <input class=\"shadow\" style=\" margin-bottom: 50px\" (keyup.enter)=\"search(element.value)\" id=\"search-input\"\n               type=\"text\" #element\n               (keyup)=\"searchTerm$.next($event.target.value)\"\n               matInput [matAutocomplete]=\"auto\">\n        <mat-autocomplete #auto=\"matAutocomplete\">\n          <div class=\"user-search\" *ngIf=\"searchOption === 'Users'\">\n            <mat-option #matOption (click)=\"search(matOption.value)\"\n                        *ngFor=\"let option of $users | async\"\n                        [value]=\"option.username\">\n              {{option.username}}\n            </mat-option>\n          </div>\n          <div class=\"tag-search\" *ngIf=\"searchOption === 'Tags'\">\n            <mat-option #matOption (click)=\"search(matOption.value)\"\n                        *ngFor=\"let option of $tagOptions | async\"\n                        [value]=\"option.value\">\n              {{option.value}}\n            </mat-option>\n          </div>\n        </mat-autocomplete>\n        <div id=\"btn\" style=\"margin-left: 20px; display: flex; flex-direction: row; align-items: center;\">\n          <button (click)=\"search(element.value)\" class=\"search-btn shadow\" mat-button\n                  style=\"background: white;margin-bottom: 2px\">\n            <mat-icon style=\"font-size: 20px;\" matPrefix>search</mat-icon>\n          </button>\n        </div>\n        <div class=\"btn\" style=\" display: flex; flex-direction: row; align-items: center;\">\n          <label>\n            <select class=\"shadow\" name=\"search-by\" [(ngModel)]=\"searchOption\" style=\"margin-left: 20px;margin-top: 1px;\n          height: 37px;\n          background: white;\n           border-radius: 10%; outline: none\">\n              <option class=\"q_options\" value=\"Tags\">Tags</option>\n              <option class=\"q_options\" value=\"Users\">Users</option>\n            </select>\n          </label>\n        </div>\n      </div>\n    </div>\n\n  </div>\n\n  <!--<div *ngIf=\"($isLoggedIn | async) == false\" class=\"auth-container\">\n    <button (click)=\"login()\" mat-raised-button id=\"login\" class=\"\">Login</button>\n\n  </div>\n  <div *ngIf=\"($isLoggedIn | async) == false\" class=\"signUp\">\n    <button (click)=\"signup()\" mat-raised-button id=\"sign-up\">Register</button>\n  </div>-->\n\n\n  <div class=\"unregistered_actions\">\n    <button *ngIf=\"($isLoggedIn | async) == false\" (click)=\"login()\" mat-raised-button id=\"login\" class=\"\">Login</button>\n    <button *ngIf=\"($isLoggedIn | async) == false\" (click)=\"signup()\" mat-raised-button id=\"sign-up\">Register</button>\n    <button *ngIf=\"($isLoggedIn | async) == true\" class=\"shadow\" (click)=\"navigateUploadImage()\" mat-flat-button>Submit a picture</button>\n  </div>\n\n  <!--<div *ngIf=\"($isLoggedIn | async) == true\" class=\"submit_image\">\n    <button class=\"shadow\" (click)=\"navigateUploadImage()\" mat-flat-button>Submit a picture</button>\n  </div>-->\n\n\n  <div class=\"account_icon_container\" *ngIf=\"($isLoggedIn | async) == true\">\n    <!--<button class=\"shadow\" (click)=\"navigateUploadImage()\" mat-flat-button>Submit a picture</button>-->\n    <div class=\"msg\">\n      <span class=\"welcome_msg\"\n            style=\"color: white; margin-left: 10%; font-size: 15px\"\n            *ngIf=\"($isLoggedIn | async) == true\">\n      <strong>{{ \"Hi, \" + ($userName | async) || \"User\" }}</strong>\n    </span>\n    </div>\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n      <mat-icon *ngIf=\"!($profileImage | async)\"\n                style=\"color: white;font-size: 50px\">account_circle\n      </mat-icon>\n\n      <img *ngIf=\"($profileImage | async)\"\n           class=\"img shadow\"\n           [src]=\"$profileImage | async\">\n      <mat-menu #menu=\"matMenu\">\n        <button (click)=\"navigateToUser()\" mat-menu-item>\n          <mat-icon>person</mat-icon>\n          <span>View profile</span>\n        </button>\n        <button (click)=\"navigateToSettings()\" mat-menu-item>\n          <mat-icon>settings</mat-icon>\n          <span>Account settings</span>\n        </button>\n        <mat-divider></mat-divider>\n        <button (click)=\"logout()\" mat-menu-item>\n          <mat-icon>exit_to_app</mat-icon>\n          <span>Logout</span>\n        </button>\n      </mat-menu>\n    </button>\n  </div>\n\n\n  <!--<div style=\"width: 33%\"></div>-->\n  <div *ngIf=\"filterable && searchOption !== 'Users'\" class=\"open-filter-details\">\n\n\n    <button class=\"expand_btn\" style=\"color: white;\" (click)=\"closeFilterDetails()\" mat-icon-button>\n      <mat-icon style=\"color: white\">expand_more</mat-icon>\n      <span style=\"color: white;\">Search details </span>\n    </button>\n  </div>\n</div>\n<div class=\"container filterDetails\" *ngIf=\"filterable && openCloseDetails\">\n  <div *ngIf=\"searchOption === 'Tags'\" class=\"center2\" style=\"padding: 10px; display: flex; justify-content: center\">\n    <section id=\"id_Section\">\n      <ul class=\"align_ul\" style=\"list-style-type: none;\">\n        <li style=\"color: white; font-size: 18px; margin-bottom: 10px\"><strong>Filter : </strong></li>\n        <li *ngFor=\"let timeFilter of filterOptions.timeFilterOptions \"\n            style=\"color: white;\">\n          <mat-checkbox [(ngModel)]=\"timeFilter.checked\"\n                        (change)=\"updateAll($event, timeFilter)\">\n            {{timeFilter.name}}\n          </mat-checkbox>\n        </li>\n      </ul>\n\n      <section style=\"display: flex; flex-direction: column\">\n        <ul class=\"align_ul\" style=\"list-style-type: none\">\n          <li style=\"color: white; font-size: 18px; margin-bottom: 10px\"><strong>Sort : </strong></li>\n          <li style=\"color: white\">\n            <mat-checkbox [(ngModel)]=\"filterOptions.mostDownloads.checked\">\n              {{filterOptions.mostDownloads.name}}\n            </mat-checkbox>\n          </li>\n          <li style=\"color: white\">\n            <mat-checkbox [(ngModel)]=\"filterOptions.mostLiked.checked\">\n              {{filterOptions.mostLiked.name}}\n            </mat-checkbox>\n          </li>\n        </ul>\n      </section>\n    </section>\n  </div>\n</div>\n\n","<div style=\"display: flex; flex-direction: column; font-size: 23px\" class=\"container\">\n\n  <!--<mat-divider style=\"margin-top: 40px\"></mat-divider>-->\n  <mat-form-field style=\"margin-top: 40px\">\n    <mat-label>Width</mat-label>\n    <input style=\"width: 250px\" (focusin)=\"focusedInWidth($event)\" type=\"text\" matInput [formControl]=\"widthInputField\">\n    <mat-error *ngIf=\"width.errors\">\n      <div *ngIf=\"width.errors.forbiddenValue\">\n        {{\"Invalid width : \"  + width.errors.forbiddenValue.value}}\n      </div>\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field style=\"margin-top: 40px\">\n    <mat-label>Height</mat-label>\n    <input (focusin)=\"focusInHeight($event)\" style=\"width: 250px\" type=\"text\" matInput [formControl]=\"heightInputField\">\n    <mat-error *ngIf=\"height.errors\">\n      <div *ngIf=\"height.errors.forbiddenValue\">\n        {{\"Invalid height : \"  + height.errors.forbiddenValue.value}}\n      </div>\n    </mat-error>\n  </mat-form-field>\n  <div *ngIf=\"(width.errors || height.errors) && $selectedImage | async as selectedImg\">\n    <div *ngIf=\"width.value > 100 || height.value > 100\">\n      <mat-error>{{\"Selected size is invalid.\"}}</mat-error>\n      <mat-error>{{\"Size cannot be bigger than : \" }}</mat-error>\n      <mat-error>{{selectedImg.width + \" X \" + selectedImg.height}}</mat-error>\n    </div>\n    <mat-error *ngIf=\"width.value < 100 || height.value < 100\">{{\"Image is to small\"}}</mat-error>\n  </div>\n  <button (click)=\"downloadImage(width.value, height.value)\" *ngIf=\"!width.errors || !height.errors\" style=\"margin: 40px auto;font-size: 30px\" mat-fab color=\"primary\">\n        <mat-icon>download</mat-icon>\n  </button>\n</div>\n\n\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialogRef} from \"@angular/material/dialog\";\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, ValidatorFn} from \"@angular/forms\";\nimport {ImageFileDetails} from \"../../shared/domain/imageModel/image-file-details\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {GetImageByIdState} from \"../../shared/app-state/states/get-image-by-id.state\";\nimport {tap} from \"rxjs/operators\";\nimport {ImageDownloadService} from \"../../serviceV2/image-download.service\";\n\n@Component({\n  selector: 'app-set-resolution-download-dialog',\n  templateUrl: './set-resolution-download-dialog.component.html',\n  styleUrls: ['./set-resolution-download-dialog.component.scss']\n})\nexport class SetResolutionDownloadDialogComponent implements OnInit {\n  public formGroup: FormGroup;\n  public widthInputField: FormControl;\n  public heightInputField: FormControl;\n  public widthFocus: boolean = false;\n  public heightFocus: boolean = false;\n  @Select(GetImageByIdState.getFileDetails) $selectedImage;\n\n  constructor(private dialogRef: MatDialogRef<SetResolutionDownloadDialogComponent>,\n              private fb: FormBuilder,\n              private store: Store,\n              private downloadService: ImageDownloadService) {\n  }\n\n  ngOnInit(): void {\n    const imageFileDetails = this.store.selectSnapshot(GetImageByIdState.getFileDetails);\n    this.initFormFields(imageFileDetails);\n    const ratio = imageFileDetails.width / imageFileDetails.height;\n\n    this.widthInputField\n      .valueChanges\n      .subscribe(val => {\n        if (!this.heightFocus && this.widthFocus)\n          this.heightInputField.setValue((val / ratio).toFixed(2));\n\n      });\n    this.heightInputField\n      .valueChanges\n      .subscribe(val => {\n        if (!this.widthFocus && this.heightFocus)\n          this.widthInputField.setValue((val * ratio).toFixed(2));\n      })\n  }\n\n  get width() {\n    return this.formGroup.get('width');\n  }\n\n  get height() {\n    return this.formGroup.get('height');\n  }\n\n  private initFormFields(imageFileDetails: ImageFileDetails) {\n    this.widthInputField = new FormControl(imageFileDetails.width, [\n      imgSizeValidator(imageFileDetails.width)\n    ]);\n    this.heightInputField = new FormControl(imageFileDetails.height, [\n      imgSizeValidator(imageFileDetails.height)\n    ]);\n    this.formGroup = this.fb.group({\n      width: this.widthInputField,\n      height: this.heightInputField,\n    })\n  }\n\n  focusedInWidth($event: FocusEvent): void {\n    console.log($event);\n    this.widthFocus = true;\n    this.heightFocus = false;\n  }\n\n  focusInHeight($event: FocusEvent): void {\n    console.log($event);\n    this.heightFocus = true;\n    this.widthFocus = false;\n  }\n\n  public downloadImage(width: any, height: any): void {\n    this.downloadService\n      .downloadIndividualImage(\n        {\n          imageId: this.store.selectSnapshot(GetImageByIdState.getImageDetail).imageId,\n          width: width,\n          height: height\n        },\n        false)\n      .subscribe(value => console.log(value))\n  }\n}\n\n\nexport function imgSizeValidator(value: number): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const forbidden = value < Number.parseFloat(control.value) || control.value < 100;\n    return forbidden ? {forbiddenValue: {value: control.value}} : null;\n  };\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-startup',\n  templateUrl: './startup.component.html',\n  styleUrls: ['./startup.component.scss']\n})\nexport class StartupComponent implements OnInit {\n\n  public foo: string;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-search-toolbar [filterable]=\"false\"></app-search-toolbar>\n\n<!--<app-bootstrap-playground></app-bootstrap-playground>-->\n\n<main>\n  <section class=\"banner\" id=\"top\">\n    <div class=\"container-banner\">\n      <div class=\"row\">\n\n        <div class=\"banner-caption\">\n          <div class=\"line-dec\"></div>\n          <h1>The most Spectacle Photography for You</h1>\n          <p>Here is some filler text to work with.</p>\n        </div>\n\n      </div>\n    </div>\n  </section>\n\n  <div class=\"container-1\">\n    <div class=\"box-1\">\n      <h3>High quality</h3>\n      <p>Internationalized and accessible components for everyone. Well tested to ensure performance and reliability.</p>\n      <p>Straightforward APIs with consistent cross platform behaviour.</p>\n    </div>\n    <div class=\"box-2\">\n      <h3>Versatile</h3>\n      <p>Provide tools that help developers build their own custom components with common interaction patterns.</p>\n      <p>Customizable within the bounds of the Material Design specification.</p>\n    </div>\n    <div class=\"box-3\">\n      <h3>Box Three</h3>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  </div>\n</main>\n\n<!--<footer>\n\n</footer>-->\n","import { Component, OnInit } from '@angular/core';\nimport {Select, Store} from \"@ngxs/store\";\nimport {ImagesByTagState} from \"../../shared/app-state/states/images-by-tag-state\";\nimport {Observable} from \"rxjs\";\nimport {ImageModelList} from \"../../shared/domain/imageModel/image-model-list\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {ImageModel} from \"../../shared/domain/imageModel/image.model\";\nimport {DisplayImagesAction} from \"../../shared/app-state/actions/display-images.action\";\nimport {environment} from \"../../../environments/environment\";\nimport {DeviceDetectorService} from \"ngx-device-detector\";\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './image-by-tag.component.html',\n  styleUrls: ['./image-by-tag.component.scss']\n})\nexport class ImageByTagComponent implements OnInit {\n  foo: string = \"IHUTiYJ6Wdk.jpg\";\n  @Select(ImagesByTagState.getData) $imagesByTags: Observable<ImageModel[]>;\n  constructor(private store: Store, private service: ImageRequestService,\n              private deviceService: DeviceDetectorService) { }\n\n  ngOnInit(): void {\n\n    console.log(this.deviceService.isMobile());\n\n  }\n\n}\n","<app-search-toolbar [filterable]=\"true\"></app-search-toolbar>\n<app-image-content [isProfile]=\"false\" [data]=\"$imagesByTags\"></app-image-content>\n\n","import {Injectable} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router} from '@angular/router';\nimport {BehaviorSubject, EMPTY, Observable, of, Subject, throwError} from 'rxjs';\nimport {Select, Selector, Store} from \"@ngxs/store\";\nimport {LoginStateModel} from \"../shared/app-state/states/login.state.model\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {AuthenticationActions} from \"../shared/app-state/actions/authentication-action\";\nimport {async} from \"rxjs/internal/scheduler/async\";\nimport {UserAuthenticationService} from \"../serviceV2/user-authentication.service\";\nimport {catchError, map, retry, switchMap} from \"rxjs/operators\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthSecurityGuard implements CanActivate {\n  $test = new Subject<boolean>();\n  @Select(LoginStateModel.isLoggedIn) $isLoggedIn;\n\n  constructor(private store: Store,\n              private router: Router,\n              private authService: UserAuthenticationService) {\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> |\n    Promise<boolean | UrlTree> | boolean | UrlTree {\n    // return this.$isLoggedIn;\n\n    let isLoggedIn: boolean =\n      this.store.selectSnapshot(LoginStateModel.isLoggedIn);\n    if (!isLoggedIn) {\n      console.log(\"could not login\");\n      this.store.dispatch(new AuthenticationActions.IsLoggedIn())\n        .pipe(map(loggedUser => {\n          if (loggedUser) return loggedUser.Authentication.status;\n        })).subscribe(status => {\n          if (!status) this.store.dispatch(new Navigate(['login']))\n        this.$test.next(status);\n      })\n    } else return isLoggedIn;\n    return this.$test;\n    // this.store.dispatch(new AuthenticationActions.IsLoggedIn())\n    //   .pipe(\n    //     map(value => {\n    //       return !!value.Authentication.status;\n    //     })\n    //   ).subscribe(value => this.$diffRatio.next(value),\n    //   error => {\n    //     console.log(error)\n    //   });\n    // return this.$diffRatio;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\nimport {EMPTY, Observable, throwError} from \"rxjs\";\nimport {Store} from \"@ngxs/store\";\nimport {AuthenticationActions} from \"../shared/app-state/actions/authentication-action\";\nimport {catchError} from \"rxjs/operators\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {ResponseBody} from \"../shared/domain/responseBody\";\nimport {UserAuthenticationService} from \"../serviceV2/user-authentication.service\";\nimport {RequestMessageAction} from \"../shared/app-state/actions/request-message.action\";\nimport {Router} from \"@angular/router\";\nimport {DeviceDetectorService} from \"ngx-device-detector\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CookieAuthInterceptorService implements HttpInterceptor{\n\n  constructor(private store: Store, private router: Router,\n              private deviceService: DeviceDetectorService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const isMobile = this.deviceService.isMobile() ? 1 : 0;\n    const clonedReq = req.clone({withCredentials: true,\n      headers: req.headers.set('isMobile', isMobile + \"\"  )});\n    return next.handle(clonedReq).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.error instanceof Error) {\n          // A client-side or network error occurred. Handle it accordingly.\n          console.log('An error occurred:', error.error.message);\n        } else {\n          // this.store.dispatch(new Navigate(['/login']))\n          // The backend returned an unsuccessful response code.\n          // The response body may contain clues as to what went wrong,\n          console.log(error);\n          console.log(error.message);\n          console.log();\n          if (error.url === 'http://localhost:8880/image-app/images/insert/') {\n            console.log(error.error);\n            return throwError(error);\n          } else if (error.url === 'http://localhost:8880/image-app/users/signUp') {\n            console.log(error.error);\n            return throwError(error);\n          } else if (error.url === UserAuthenticationService.USER_LOGIN ||\n            error.url === UserAuthenticationService.GOOGLE_LOGIN) {\n            this.store.dispatch(new RequestMessageAction({ message: error.error }))\n          } else if (error.url.indexOf(UserAuthenticationService.USER_DETAILS) !== -1) {\n            this.store.dispatch(new RequestMessageAction({ message: error.error }))\n            /*this.router.navigate(['not-found']);*/\n            return throwError(error);\n          }\n          console.log(error.statusText);\n          if (error.error !== null && error.error.message !== null) {\n\n            console.log(`Backend returned code ${error.status}, body was: ${error.error.message}`);\n          }\n        }\n\n        // If you want to return a new response:\n        //return of(new HttpResponse({body: [{name: \"Default value...\"}]}));\n\n        // If you want to return the error on the upper level:\n        //return throwError(error);\n\n        // or just return nothing:\n        return EMPTY;\n      })\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from \"@angular/router\";\nimport {GetBase64ForDownloadCropperState, CropAndDownloadStateModel} from \"../shared/app-state/states/get-base64-for-downloadCropper.state\";\nimport {Observable} from \"rxjs\";\nimport {Store} from \"@ngxs/store\";\nimport {ImageRequestService} from \"./image-request.service\";\nimport {CropAndDownload, GetImageByImageId} from \"../shared/app-state/actions/image.action\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CropAndDownloadResolverService implements Resolve<CropAndDownloadStateModel> {\n\n  constructor(private store: Store,\n              private service: ImageRequestService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<CropAndDownloadStateModel> | Promise<CropAndDownloadStateModel> | CropAndDownloadStateModel {\n    this.store\n      .dispatch(new GetImageByImageId(route.params.imageId))\n    return this.service\n      .getImageBytes(route.params.imageId)\n      .pipe(map(byteArray => {\n        let blob = new Blob([byteArray],{type:'application/octet-binary'});\n        let reader = new FileReader();\n        reader.onload = (evt: any) => {\n           this.store\n            .dispatch(new CropAndDownload(evt.target.result))\n        };\n        // this.dialog.open(DownloadCropperComponent,{\n        //   data: { img: evt.target.result,\n        //     width: imageDetail.width,\n        //     height: imageDetail.height, viewName: 'Download' }\n        // })\n        reader.readAsDataURL(blob);\n        return this.store.selectSnapshot(GetBase64ForDownloadCropperState.getModel)\n      }))\n  }\n}\n","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {environment} from \"../../environments/environment\";\r\nimport {ImageModel, SetImageWithTags} from \"../shared/domain/imageModel/image.model\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DeleteImageService {\r\n  private static readonly DELETE_IMAGE_URL = environment.apiUrl + \"image/delete\";\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public deleteImage(image: ImageModel): Observable<any> {\r\n    return this.http.post(\r\n      DeleteImageService.DELETE_IMAGE_URL,\r\n      image,\r\n      {observe: 'response'});\r\n  }\r\n\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from \"@angular/router\";\nimport {ImageModel} from \"../shared/domain/imageModel/image.model\";\nimport {Observable} from \"rxjs\";\nimport {Store} from \"@ngxs/store\";\nimport {GetImageByIdState} from \"../shared/app-state/states/get-image-by-id.state\";\nimport {GetImageByImageId, GetRelatedImagesByTagIDs} from \"../shared/app-state/actions/image.action\";\nimport {switchMap, tap} from \"rxjs/operators\";\nimport {AuthenticationActions} from \"../shared/app-state/actions/authentication-action\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageDetailsResolverService implements Resolve<ImageModel> {\n\n  constructor(private store: Store) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<ImageModel> | ImageModel {\n    return this.store\n      .dispatch(new GetImageByImageId(route.params.imageId))\n      .pipe(switchMap(state =>\n          this.store.dispatch(new GetRelatedImagesByTagIDs(state.modelDetails.tags)))\n      )\n      .pipe(tap(val => {\n        this.store.dispatch(new AuthenticationActions.IsLoggedIn());\n        console.log(\"ImageDetailResolver was called with value : \" + val);\n      }));\n  }\n}\n","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {environment} from \"../../environments/environment\";\r\nimport {Observable} from \"rxjs\";\r\nimport {DownloadImageByIndividualResolution, ImageModel} from \"../shared/domain/imageModel/image.model\";\r\nimport {finalize, map, tap} from \"rxjs/operators\";\r\nimport {ImageFileDetails, ImageDownloadResponse} from \"../shared/domain/imageModel/image-file-details\";\r\nimport {CroppedDownloadRequest} from \"../shared/domain/http/req/CroppedDownloadRequest\";\r\nimport {conditionallyCreateMapObjectLiteral} from \"@angular/compiler/src/render3/view/util\";\r\nimport {BlobToBase64Pipe} from \"../shared/util/blob-to-base64-pipe\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageDownloadService {\r\n  constructor(private http: HttpClient,\r\n              private base64Pipe: BlobToBase64Pipe) { }\r\n\r\n  public static readonly DOWNLOAD_BY_API_RESOLUTION_URL = environment.apiUrl + \"library/download/file/\";\r\n  public static readonly DOWNLOAD_BY_CROPPED_RESOLUTION_URL = environment.apiUrl + \"library/download/cropped/file/\";\r\n  public static readonly DOWNLOAD_BY_INDIVIDUAL_RESOLUTION_URL = environment.apiUrl + \"library/download/resized/file\";\r\n\r\n\r\n  public downloadImage(imageId: string, imageFileDetail: ImageFileDetails): Observable<ImageFileDetails> {\r\n    return this.http\r\n      .post<ImageFileDetails>(\r\n        ImageDownloadService.DOWNLOAD_BY_API_RESOLUTION_URL + imageId,\r\n        imageFileDetail);\r\n  }\r\n\r\n\r\n  public downloadIndividualImage(croppedDetails: CroppedDownloadRequest |\r\n    DownloadImageByIndividualResolution, wasCropped: boolean): Observable<string> {\r\n    console.log(\"seas\");\r\n    const url = wasCropped ? ImageDownloadService.DOWNLOAD_BY_CROPPED_RESOLUTION_URL :\r\n      ImageDownloadService.DOWNLOAD_BY_INDIVIDUAL_RESOLUTION_URL;\r\n    console.log(url);\r\n    return this.base64Pipe.getBase64(this.http\r\n       .post(\r\n         url,\r\n         croppedDetails, { responseType: 'arraybuffer' })\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpResponse} from \"@angular/common/http\";\nimport {BehaviorSubject, EMPTY, Observable, Subject} from \"rxjs\";\nimport {GetImagesByTagNameRequest, ImageModel, SetImageWithTags} from \"../shared/domain/imageModel/image.model\";\nimport {TagModel} from \"../shared/domain/tagModel/tag-model\";\nimport {catchError, map, switchMap, tap} from \"rxjs/operators\";\nimport {ResponseBody} from \"../shared/domain/responseBody\";\nimport {environment} from \"../../environments/environment\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport {ResolutionsResponse} from \"../shared/app-state/states/prepare-cropped-for-download.state\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageRequestService {\n  // 178.112.217.30\n  public $bSubject = new BehaviorSubject<ImageModel[]>(null);\n  // private readonly SEARCH_URL: string = \"http://localhost:8880/image-app/images/search/by/tag/\";\n  private readonly SEARCH_URL: string = environment.apiUrl + \"library/search-by/tag/\";\n\n  public static readonly ALL_IMAGES_BY_USERID = environment.apiUrl + \"library/search-by/user/\";\n  public static readonly ALL_IMAGES_BY_IMG_ID = environment.apiUrl + \"library/search-by/image/\";\n  public static readonly RELATED_IMAGES_BY_TAG_IDS = environment.apiUrl + \"library/search-by/tags/\";\n  public static readonly GET_IMAGE_BYTES_BY_ID_URL = environment.apiUrl + \"library/search-by/image/raw/\";\n  public static readonly GET_API_RESOLTIONS = environment.apiUrl + \"api/resolutions/\";\n  private readonly UPLOAD_PROFILE_IMAGE = environment.apiUrl + \"user/set/profile-image/\";\n  private readonly UPLOAD_TAG = environment.apiUrl + \"image/update/tags/\";\n\n  constructor(private http: HttpClient,\n              private sanitizer: DomSanitizer) {\n  }\n\n\n  public getRelatedImagesByTagList(tags: TagModel[]): Observable<ImageModel[]> {\n    console.log(tags)\n    return this.http\n      .post<ImageModel[]>(\n        ImageRequestService.RELATED_IMAGES_BY_TAG_IDS,\n        {tags: tags},\n        {responseType: \"json\"});\n  }\n\n\n  public setTagToImage(data: SetImageWithTags): Observable<any> {\n    console.log(data)\n    return this.http.post(\n      this.UPLOAD_TAG,\n      data,\n      {observe: 'response'});\n  }\n\n\n  public getResolutions(): Observable<ResolutionsResponse> {\n    return this.http\n      .get<ResolutionsResponse>(\n        ImageRequestService.GET_API_RESOLTIONS,\n        {responseType: \"json\"} );\n  }\n\n  public getImageBytes(imgId: string) {\n    return this.http\n      .get(\n        ImageRequestService.GET_IMAGE_BYTES_BY_ID_URL + imgId,\n        {responseType: \"arraybuffer\"}\n        );\n  }\n\n\n\n\n  public getImagesByImgId(imgId: string): Observable<ImageModel> {\n    return this.http.get<ImageModel>(\n      ImageRequestService.ALL_IMAGES_BY_IMG_ID + imgId)\n      .pipe(\n        tap(x => console.log(x))\n      );\n  }\n\n\n  public getImagesByUserId(userId: string): Observable<ImageModel[]> {\n    return this.http.get<ImageModel[]>(\n      ImageRequestService.ALL_IMAGES_BY_USERID + userId)\n      .pipe(\n        tap(x => console.log(x))\n      );\n  }\n\n  public getImagesByTag(req: GetImagesByTagNameRequest, page: number): Observable<ImageModel[]> {\n    return this.http.post<ImageModel[]>(\n      this.SEARCH_URL,\n      req, { observe: \"response\" })\n      .pipe(\n        map(resp => {\n          console.log(resp.status)\n          return resp.body;\n        }),\n        catchError((err) => {\n          console.log(err.error.message);\n          return EMPTY;\n        }));\n  }\n\n}\n","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {environment} from \"../../environments/environment\";\r\nimport {UploadImageModel} from \"../shared/domain/imageModel/upload-image.model\";\r\nimport {SetImageWithTags} from \"../shared/domain/imageModel/image.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageUploadService {\r\n  private readonly UPLOAD_IMAGE = environment.apiUrl + \"images/insert/\";\r\n  private readonly VALIDATE_IMAGE = environment.apiUrl + \"library/validate-image/\";\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public addToUserLibrary(uploadModel: UploadImageModel): Observable<any> {\r\n    let request: FormData = new FormData();\r\n    request.append(\"file\", uploadModel.orgFile);\r\n    request.append(\"userId\", uploadModel.userId);\r\n    request.append(\"urlReference\", uploadModel.urlReference);\r\n    request.append(\"isPublic\", uploadModel.isPublic);\r\n    request.append('galleryFile', uploadModel.galleryFile);\r\n    request.append(\"downloadFile\", uploadModel.downloadFile)\r\n    console.log(uploadModel.urlReference);\r\n    return this.http.post(\r\n      this.UPLOAD_IMAGE, request,\r\n      {observe: 'response'});\r\n  }\r\n\r\n  public validateImage(data: File): Observable<any> {\r\n    let request: FormData = new FormData();\r\n    request.append(\"file\", data);\r\n    return this.http.post(\r\n      this.VALIDATE_IMAGE,\r\n      request,\r\n      {responseType: 'json'});\r\n  }\r\n}\r\n","import {State} from \"@ngxs/store\";\r\nimport {TagQueryList} from \"../shared/domain/tagModel/tag-query-list\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {BaseUserDetails} from \"../shared/domain/userModel/user-details.model\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {SearchRequestService} from \"./search.request.service\";\r\nimport {TagModel} from \"../shared/domain/tagModel/tag-model\";\r\nimport {Observable} from \"rxjs\";\r\nimport {environment} from \"../../environments/environment\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchByUsersService {\r\n  private readonly SEARCH_URL = environment.apiUrl + \"query/searchUsers/\";\r\n  constructor(private http: HttpClient,\r\n              private searchReqService: SearchRequestService<BaseUserDetails>) { }\r\n\r\n  public searchByTagName(searchTerm$: Observable<string>): Observable<BaseUserDetails[]> {\r\n    return this.searchReqService.search(searchTerm$, this.SEARCH_URL);\r\n  }\r\n}\r\n","import {BehaviorSubject, Observable} from \"rxjs\";\r\nimport {TagModel} from \"../shared/domain/tagModel/tag-model\";\r\nimport {distinctUntilChanged, switchMap, throttleTime} from \"rxjs/operators\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchRequestService<T> {\r\n  private readonly SEARCH_URL;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public search(searchTerm$: Observable<string>, url: string): Observable<T[]> {\r\n    return searchTerm$.pipe(\r\n      distinctUntilChanged(),\r\n      throttleTime(2000),\r\n      switchMap(searchTerm => this.getSearchResult(searchTerm, url))\r\n    );\r\n  }\r\n\r\n  private getSearchResult(term: string, url: string): Observable<T[]> {\r\n    return SearchRequestService.validateTerm(term) ?\r\n      this.sendSearchRequest(term, url) :\r\n      new BehaviorSubject([]);\r\n  }\r\n\r\n  private sendSearchRequest(terms: string, url: string): Observable<T[]> {\r\n    return this.http.get<T[]>(url + terms);\r\n  }\r\n\r\n  private static validateTerm(term: string): boolean {\r\n    return term.length > 0;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {debounceTime, distinctUntilChanged, switchMap, tap, throttleTime} from \"rxjs/operators\"\nimport {HttpClient} from \"@angular/common/http\";\nimport {ImageModel} from \"../shared/domain/imageModel/image.model\";\nimport {DistinctSubscriber} from \"rxjs/internal/operators/distinct\";\nimport {TagModel} from \"../shared/domain/tagModel/tag-model\";\nimport {SearchRequestService} from \"./search.request.service\";\nimport {environment} from \"../../environments/environment\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagRequestService {\n  private readonly secr = \"user/HJeDHE2XBFwgJ81pzuLNj3MshJqXbU/images/all\";\n  constructor(private http: HttpClient,\n              private searchReqService: SearchRequestService<TagModel>) { }\n  //178.112.217.30\n  private readonly SEARCH_URL: string = environment.apiUrl + \"query/searchByTag/\";\n  private static readonly REQUEST_DELAY: number = 2000;\n\n  public searchByTagName(searchTerm$: Observable<string>): Observable<TagModel[]> {\n    return this.searchReqService.search(searchTerm$, this.SEARCH_URL)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {environment} from \"../../environments/environment\";\nimport {Observable} from \"rxjs\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ImageModel} from \"../shared/domain/imageModel/image.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UpdateImageDetailsService {\n  private readonly UPDATE_IMAGE_DETAILS_URL = environment.apiUrl + \"image/update/details\";\n  constructor(private http: HttpClient) { }\n\n  public changeImageDetails(imageToUpdate: ImageModel): Observable<any> {\n    console.log(imageToUpdate);\n    return this.http.post(\n      this.UPDATE_IMAGE_DETAILS_URL,\n      imageToUpdate,\n      {observe: 'response'});\n  }\n}\n","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {environment} from \"../../environments/environment\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UpdateUserService {\r\n  private readonly UPLOAD_PROFILE_IMAGE = environment.apiUrl + \"user/set/profile-image/\";\r\n  private readonly ADD_USER_LIKE = environment.apiUrl + \"user/set/likes/\";\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  public setUserProfile(userId: string, image: FormData): Observable<any> {\r\n    return this.http.post(\r\n      this.UPLOAD_PROFILE_IMAGE + userId, image,\r\n      {observe: 'response'});\r\n  }\r\n\r\n  public addUserLike(imageId: string, userId: string): Observable<any> {\r\n    return this.http.post(\r\n      this.ADD_USER_LIKE + imageId + \"/\" + userId,\r\n      {observe: 'response'});\r\n  }\r\n}\r\n","import {Injectable, OnInit} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {BaseUserDetails, UserDetailsImpl, UserRegistrationModel} from \"../shared/domain/userModel/user-details.model\";\nimport {BehaviorSubject, Observable, throwError} from \"rxjs\";\nimport {catchError, map, switchMap, tap} from \"rxjs/operators\";\nimport {IUserLoginModel, LoggedInUserModel, UserLoginModel} from \"../shared/domain/userModel/UserLoginModel\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {SignupState} from \"../shared/app-state/states/signup.state\";\nimport {AuthenticationActions} from \"../shared/app-state/actions/authentication-action\";\nimport {environment} from \"../../environments/environment\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAuthenticationService {\n  private readonly USER_SIGNUP = \"http://localhost:8880/image-app/users/signUp\";\n  public static readonly USER_LOGIN = environment.apiUrl + \"users/login\";\n  private readonly USER_LOGOUT = environment.apiUrl + \"logout\";\n  private readonly AUTH_STATUS = environment.apiUrl + \"auth/identify/user\";\n  public static readonly USER_DETAILS = environment.apiUrl + \"user/details/\";\n  public static readonly GOOGLE_LOGIN = environment.apiUrl + \"users/oauth/login\";\n\n  constructor(private http: HttpClient) {\n\n  }\n\n\n  public getUserDetails(userId: string): Observable<BaseUserDetails> {\n    return this.http.get<BaseUserDetails>\n    (UserAuthenticationService.USER_DETAILS + userId, {responseType: \"json\"});\n  }\n\n\n  public createNewUser(userSignupModel: UserRegistrationModel): Observable<LoggedInUserModel> {\n    return this.http\n      .post<LoggedInUserModel>(this.USER_SIGNUP, userSignupModel, {observe: \"body\" , responseType: \"json\"});\n  }\n\n  public login(userLoginModel: IUserLoginModel, loginMethod: string): Observable<any> {\n    const URL = loginMethod === \"GOOGLE\" ? UserAuthenticationService.GOOGLE_LOGIN : UserAuthenticationService.USER_LOGIN;\n    console.log(userLoginModel);\n    return this.http.post<any>(URL, userLoginModel, {observe: 'response'});\n  }\n\n  public isLoggedIn(): Observable<any> {\n    return this.http.get(this.AUTH_STATUS, {responseType: \"json\", observe: 'response'})\n      .pipe(\n        map(value => {\n          console.log(value)\n          return value;\n        })\n      );\n  }\n\n  public logout(): Observable<any> {\n    return this.http.post(this.USER_LOGOUT, {responseType: \"json\"});\n  }\n\n}\n","import {Observable} from \"rxjs\";\r\n\r\nexport class GetZipCodesAndCitiesByRegion {\r\n  static readonly type = '[AddressValidation] Get Zipcodes and Cities'\r\n  constructor(public zipcode: Observable<string>,\r\n              public region: string) { }\r\n}\r\n\r\nexport class GetCountriesAction {\r\n  static readonly type = '[AddressValidation] Get Countries'\r\n  constructor() { }\r\n}\r\n\r\nexport class GetRegionsAction {\r\n  static readonly type = '[AddressValidation] Get Regions'\r\n  constructor(public countryName: string) { }\r\n}\r\n\r\n\r\n","import {IUserLoginModel} from \"../../domain/userModel/UserLoginModel\";\r\nimport {UserRegistrationModel} from \"../../domain/userModel/user-details.model\";\r\n\r\nexport namespace AuthenticationActions {\r\n  export class LoginAction {\r\n    static readonly type = '[Authentication] Login';\r\n    constructor(public userLoginModel: IUserLoginModel) { }\r\n  }\r\n\r\n  export class LogoutAction {\r\n    static readonly type = '[Authentication] Logout';\r\n    constructor(public userLoginModel: IUserLoginModel) { }\r\n  }\r\n\r\n  export class SignUpAction {\r\n    static readonly type = '[Authentication] Signup';\r\n    constructor(public userRegistration: UserRegistrationModel) { }\r\n  }\r\n\r\n  export class IsLoggedIn {\r\n    static readonly type = '[Authentication] Is logged in';\r\n    constructor() { }\r\n  }\r\n\r\n  export class Logout {\r\n    static readonly type = '[Authentication] Logout';\r\n    constructor() { }\r\n  }\r\n\r\n  export class LoggedUserDetails {\r\n    static readonly type = '[Authentication] Logged userDetails';\r\n    constructor(public userId: string) { }\r\n  }\r\n}\r\n","import {Observable} from \"rxjs\";\nimport {ImageModel} from \"../../domain/imageModel/image.model\";\nimport {ImagesByTagName, ImagesByTagNameQueryImpl} from \"../../domain/imageModel/ImagesByTagNameQuery\";\nimport {UploadImageModel} from \"../../domain/imageModel/upload-image.model\";\nimport {ImageFileDetails} from \"../../domain/imageModel/image-file-details\";\nimport {TagModel} from \"../../domain/tagModel/tag-model\";\n\nexport class ImagesByUserIDAction {\n  static readonly type = '[ImageAPI] Images by userId';\n  constructor(public userId: string) { }\n}\n\nexport class ImagesByTagsAction {\n  static readonly type = '[ImageAPI] ImagesByTagsAction';\n  constructor(public imagesByTag: ImagesByTagName) { }\n}\n\nexport class ImagesNextPageAction {\n  static readonly type = '[ImageAPI] NextImagePage';\n  constructor(public imageResponseModel: ImageModel[]) { }\n}\n\nexport class UploadImage {\n  static readonly type = '[ImageAPI] Upload image';\n  constructor(public uploadModel: UploadImageModel) { }\n}\n\nexport class FilterByDate {\n  static readonly type = '[ImageAPI] Filter image'\n  constructor(public limit: number) { }\n}\n\nexport class DeleteImage {\n  static readonly type = '[ImageAPI] Delete image';\n  constructor(public image: ImageModel) { }\n}\n\nexport class SelectImage {\n  static readonly type = '[ImageAPI] Select image';\n  constructor(public image: ImageModel) { }\n}\n\nexport class GetDownloadDetails {\n  static readonly type = '[ImageAPI] Get download details';\n  constructor(public imageId: string, public imageFileDetail: ImageFileDetails) { }\n}\n\nexport class GetImageByImageId {\n  static readonly type = '[ImageAPI] Get image by imageId';\n  constructor(public imageId: string) { }\n}\n\nexport class GetRelatedImagesByTagIDs {\n  static readonly type = '[ImageAPI] Related images';\n  constructor(public tagIds: TagModel[]) { }\n}\n\n\nexport class GetImageAsByse64 {\n  static readonly type = '[ImageAPI] Get image bytes';\n  constructor(public imageId: string) { }\n}\n\nexport class CropAndDownload {\n  static readonly type = '[ImageAPI] Crop and download';\n  constructor(public base64: string) { }\n}\n\nexport class CropDownloadViewImage {\n  static readonly type = '[ImageAPI] Crop download view image';\n  constructor(public data: string) { }\n}\n\nexport class CropGalleryViewImage {\n  static readonly type = '[ImageAPI] Crop gallery view image';\n  constructor(public data: string) { }\n}\n\nexport class SetCroppedOffsetValues {\n  static readonly type = '[ImageAPI] Set cropped image values';\n  constructor(public imgId: string,\n              public offsetX: number, public offsetY: number,\n              public subImageWidth: number,public subImageHeight: number) { }\n}\n\n\n","import {Observable} from \"rxjs\";\n\nexport class QueryTagAction {\n  static readonly type = '[Tag] Query tags';\n  constructor(public searchTerm: Observable<string>) {}\n}\n","import {Observable} from \"rxjs\";\r\nimport {RequestStatus} from \"../../domain/request-status\";\r\n\r\nexport class RequestMessageAction {\r\n  static readonly type = '[Request] Check request status';\r\n  constructor(public requestStatus: RequestStatus) {}\r\n}\r\n\r\n","export namespace UpdateUserProfileActions {\r\n  export class UploadUserProfileImg {\r\n    static readonly type = '[Update profile] Set user profile';\r\n    constructor(public userId: string, public file: FormData) { }\r\n  }\r\n}\r\n","import {UserRegistrationModel} from \"../../domain/userModel/user-details.model\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n\r\nexport namespace UserDetailsActions {\r\n  export class UploadUserProfile {\r\n    static readonly type = '[User Action] Upload user-profile';\r\n    constructor(public userId: string, public file: FormData) { }\r\n  }\r\n\r\n  export class GetUserDetails {\r\n    static readonly type = '[User Action] Get user details';\r\n    constructor(public userId: string) { }\r\n  }\r\n\r\n  export class SearchUsers {\r\n    static readonly type = '[User Action] Get user profiles';\r\n    constructor(public searchTerm: Observable<string>) {}\r\n  }\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {UserAuthenticationService} from \"../../../serviceV2/user-authentication.service\";\r\nimport {AuthenticationActions} from \"../actions/authentication-action\";\r\nimport {Observable} from \"rxjs\";\r\nimport {LoggedInUserModel} from \"../../domain/userModel/UserLoginModel\";\r\nimport {tap} from \"rxjs/operators\";\r\nimport {UserDetailsActions} from \"../actions/user-details.action\";\r\nimport {UploadImageModel} from \"../../domain/imageModel/upload-image.model\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {ImageModel} from \"../../domain/imageModel/image.model\";\r\n\r\n@State<BaseUserDetails>({\r\n  name: 'UserDetails',\r\n  defaults: {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n    address: undefined\r\n  }\r\n})\r\n@Injectable()\r\nexport class UserDetailsState {\r\n  constructor(private authService: UserAuthenticationService,\r\n              private imageRequestService: ImageRequestService) {\r\n  }\r\n\r\n  @Selector()\r\n  static profileImgPath(state: BaseUserDetails): string {\r\n    return state.profileImgPath;\r\n  }\r\n\r\n  @Selector()\r\n  static userDetails(state: BaseUserDetails): BaseUserDetails {\r\n    return state;\r\n  }\r\n\r\n  @Selector()\r\n  static firstLastName(state: BaseUserDetails): string {\r\n    return state.firstName + \" \" + state.lastName;\r\n  }\r\n\r\n  @Selector()\r\n  static getState(state: BaseUserDetails): BaseUserDetails {\r\n    return state;\r\n  }\r\n\r\n  @Selector()\r\n  static getUserImages(state: BaseUserDetails): ImageModel[] {\r\n    return state.images;\r\n  }\r\n\r\n  @Selector()\r\n  static getUserLikes(state: BaseUserDetails): ImageModel[] {\r\n    return state.likes;\r\n  }\r\n\r\n  @Action(UserDetailsActions.GetUserDetails)\r\n  userDetails(ctx: StateContext<BaseUserDetails>,\r\n              action: UserDetailsActions.GetUserDetails): Observable<BaseUserDetails> {\r\n    return this.authService.getUserDetails(action.userId)\r\n      .pipe(\r\n        tap(response => {\r\n          console.log(response)\r\n          const state = ctx.getState();\r\n          console.log(response)\r\n          console.log(response.images);\r\n          ctx.setState({\r\n            ...state,\r\n            firstName: response.firstName,\r\n            lastName: response.lastName,\r\n            email: response.email,\r\n            userId: response.userId,\r\n            profileImgPath: response.profileImgPath,\r\n            username: response.username,\r\n            likes: response.likes,\r\n            images: response.images\r\n          })\r\n        })\r\n      )\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {IUserAuthState} from \"../../domain/UserAuthStateModel\";\r\nimport {Country, Region, ZipCodeAndCity} from \"../../domain/address-model/addres.view.model\";\r\nimport {AddCommand} from \"@angular/cli/commands/add-impl\";\r\nimport {AddressValidationService} from \"../../service/address-validation.service\";\r\nimport {ImagesByTagsAction} from \"../actions/image.action\";\r\nimport {ImagesByTagNameStateModel} from \"../../domain/imageModel/ImagesByTagNameQuery\";\r\nimport {switchMap, tap} from \"rxjs/operators\";\r\nimport {GetZipCodesAndCitiesByRegion, GetCountriesAction, GetRegionsAction} from \"../actions/address-validation-action\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {AddressViewListState} from \"../../domain/address-model/address-view.list.state\";\r\nimport {ImageModel} from \"../../domain/imageModel/image.model\";\r\n\r\n@State<AddressViewListState>({\r\n  name: 'AddressValidation'\r\n})\r\n@Injectable()\r\nexport class AddressValidationState {\r\n  constructor(private addressService: AddressValidationService) { }\r\n\r\n  @Selector()\r\n  static zipCodesAndCities(state: AddressViewListState): ZipCodeAndCity[] {\r\n    return state.zipCodesAndCity;\r\n  }\r\n\r\n  @Selector()\r\n  static regions(state: AddressViewListState): Region[] {\r\n    return state.regions;\r\n  }\r\n\r\n  @Selector()\r\n  static countries(state: AddressViewListState): Country[] {\r\n    return state.name;\r\n  }\r\n\r\n  @Action(GetCountriesAction)\r\n  getCountries(ctx: StateContext<AddressViewListState>,\r\n               action: GetCountriesAction) {\r\n    const state = ctx.getState();\r\n    return this.addressService\r\n      .getCountries()\r\n      .pipe(\r\n        tap(res => {\r\n          ctx.setState(\r\n            {\r\n              ...state,\r\n              name: res\r\n            }\r\n          )\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  @Action(GetRegionsAction)\r\n  getRegionsByCountry(ctx: StateContext<AddressViewListState>,\r\n                      action: GetRegionsAction) {\r\n    const state = ctx.getState();\r\n    return this.addressService\r\n      .getRegionsByCountry(action.countryName)\r\n      .pipe(\r\n        tap(res => {\r\n          console.log(\"Du Hund du\")\r\n          console.log(res)\r\n          ctx.setState(\r\n            {\r\n              ...state,\r\n              regions: res\r\n            }\r\n          )\r\n        })\r\n      )\r\n  }\r\n\r\n  @Action(GetZipCodesAndCitiesByRegion)\r\n  getZipCodesAndCitiesByRegion(ctx: StateContext<AddressViewListState>,\r\n                      action: GetZipCodesAndCitiesByRegion) {\r\n    const state = ctx.getState();\r\n    return this.addressService\r\n      .getZipCodesAndCitiesByRegion2(action.zipcode, action.region)\r\n      .pipe(\r\n        tap(res => {\r\n          console.log(res)\r\n          ctx.setState(\r\n            {\r\n              ...state,\r\n              zipCodesAndCity: res\r\n            }\r\n          )\r\n        })\r\n      )\r\n  }\r\n\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {TagQueryList} from \"../../domain/tagModel/tag-query-list\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {TagRequestService} from \"../../../serviceV2/tag-request.service\";\r\nimport {TagModel} from \"../../domain/tagModel/tag-model\";\r\nimport {QueryTagAction} from \"../actions/query-tag-action\";\r\nimport {tap} from \"rxjs/operators\";\r\nimport {CropImageModel, ImageModel} from \"../../domain/imageModel/image.model\";\r\nimport {CropDownloadViewImage, CropGalleryViewImage} from \"../actions/image.action\";\r\nimport {ImagesByTagNameStateModel} from \"../../domain/imageModel/ImagesByTagNameQuery\";\r\n\r\n@State<CropImageModel>({\r\n  name: 'cropImage',\r\n  defaults: {\r\n    data: ''\r\n  }\r\n})\r\n@Injectable()\r\nexport class CropImageState {\r\n  constructor() {\r\n  }\r\n\r\n\r\n  @Selector()\r\n  static getCroppedDownloadImage(state: CropImageModel): string {\r\n    return state.downloadViewFile;\r\n  }\r\n\r\n  @Selector()\r\n  static getData(state: CropImageModel): string {\r\n    return state.data;\r\n  }\r\n\r\n  @Action(CropGalleryViewImage)\r\n  cropImage(ctx: StateContext<CropImageModel>, action: CropGalleryViewImage) {\r\n    let state = ctx.getState();\r\n    console.log(state);\r\n    ctx.patchState({\r\n      ...state,\r\n      data: action.data\r\n    })\r\n  }\r\n\r\n  @Action(CropDownloadViewImage)\r\n  cropDownloadViewImage(ctx: StateContext<CropImageModel>, action: CropDownloadViewImage) {\r\n    let state = ctx.getState();\r\n    console.log(state);\r\n    ctx.patchState({\r\n      ...state,\r\n      downloadViewFile: action.data\r\n    })\r\n  }\r\n}\r\n","import {ImageModel} from \"../../domain/imageModel/image.model\";\r\nimport {Action, State, StateContext} from \"@ngxs/store\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {DeleteImageService} from \"../../../serviceV2/delete-image.service\";\r\nimport {DeleteImage} from \"../actions/image.action\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map, tap} from \"rxjs/operators\";\r\n\r\n@State<ImageModel>({\r\n  name: 'Delete'\r\n})\r\n@Injectable()\r\nexport class DeleteImageState {\r\n    constructor(private deleteService: DeleteImageService) { }\r\n\r\n    @Action(DeleteImage)\r\n    public deleteUserImage(ctx: StateContext<ImageModel>, action: DeleteImage): Observable<any> {\r\n      return this.deleteService\r\n        .deleteImage(action.image)\r\n        .pipe(map(response => {\r\n          return response;\r\n        }))\r\n    }\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {CropImageModel, ImageModel} from \"../../domain/imageModel/image.model\";\r\nimport {\r\n  ImageFileDetails,\r\n  ImageDownloadResponse,\r\n  ImageDetailsViewModel\r\n} from \"../../domain/imageModel/image-file-details\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageDownloadService} from \"../../../serviceV2/image-download.service\";\r\nimport {CropGalleryViewImage, GetDownloadDetails} from \"../actions/image.action\";\r\nimport {map, switchMap, tap} from \"rxjs/operators\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n@State<ImageDetailsViewModel>({\r\n  name: 'downloadDetails',\r\n})\r\n@Injectable()\r\nexport class DownloadDetailsState {\r\n  constructor(private downloadService: ImageDownloadService) { }\r\n\r\n  @Selector()\r\n  static getFile(state: ImageDetailsViewModel): ImageModel {\r\n    return state.image;\r\n  }\r\n\r\n  @Selector()\r\n  static getDetails(state: ImageDetailsViewModel): ImageFileDetails {\r\n    return state.fileDetails;\r\n  }\r\n\r\n  @Action(GetDownloadDetails)\r\n  public getDownloadDetails(ctx: StateContext<ImageFileDetails>, action: GetDownloadDetails): Observable<ImageFileDetails> {\r\n    const state = ctx.getState();\r\n    return this.downloadService\r\n      .downloadImage(action.imageId, action.imageFileDetail)\r\n      .pipe(map(res => {\r\n        console.log(res);\r\n        ctx.setState({\r\n          ...state,\r\n          downloadLink: res.downloadLink,\r\n          width: res.width,\r\n          height: res.height,\r\n          size: res.size,\r\n          contentType: res.contentType\r\n        })\r\n        return res;\r\n      }))\r\n  }\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {CropImageModel, ImageModel} from \"../../domain/imageModel/image.model\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {CropAndDownload, CropGalleryViewImage, GetImageAsByse64} from \"../actions/image.action\";\r\nimport {Observable, of} from \"rxjs\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {map} from \"rxjs/operators\";\r\n\r\nexport interface CropAndDownloadStateModel {\r\n  base64: string;\r\n}\r\n\r\n@State<CropAndDownloadStateModel>({\r\n  name: 'CropAndDownload',\r\n  defaults: {\r\n    base64: ''\r\n  }\r\n})\r\n@Injectable()\r\nexport class GetBase64ForDownloadCropperState {\r\n\r\n  constructor(private service: ImageRequestService) {\r\n\r\n  }\r\n\r\n\r\n  @Selector()\r\n  public static getBase64(state: CropAndDownloadStateModel): string {\r\n    return state.base64;\r\n  }\r\n\r\n  @Selector()\r\n  public static getModel(state: CropAndDownloadStateModel): CropAndDownloadStateModel {\r\n    return state;\r\n  }\r\n\r\n  @Action(GetImageAsByse64)\r\n  getDataAsBytes(ctx: StateContext<CropAndDownloadStateModel>, action: GetImageAsByse64): Observable<CropAndDownloadStateModel> {\r\n    return this.service\r\n      .getImageBytes(action.imageId)\r\n      .pipe(map(byteArray => {\r\n        let blob = new Blob([byteArray],{type:'application/octet-binary'});\r\n        let reader = new FileReader();\r\n        let state = ctx.getState();\r\n        reader.onload = (evt: any) => {\r\n          ctx.patchState({\r\n            ...state,\r\n            base64: evt.target.result\r\n          })\r\n        };\r\n        reader.readAsDataURL(blob);\r\n        return GetBase64ForDownloadCropperState.getModel(state);\r\n      }))\r\n  }\r\n\r\n  @Action(CropAndDownload)\r\n  getData(ctx: StateContext<CropAndDownloadStateModel>, action: CropAndDownload): Observable<CropAndDownloadStateModel> {\r\n    let state = ctx.getState();\r\n    console.log(state);\r\n    ctx.patchState({\r\n      ...state,\r\n      base64: action.base64\r\n    })\r\n    return of(ctx.getState());\r\n  }\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {CropImageModel, ImageModel, SelectedImage} from \"../../domain/imageModel/image.model\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageDetailsViewModel, ImageFileDetails} from \"../../domain/imageModel/image-file-details\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {GetImageByImageId} from \"../actions/image.action\";\r\nimport {TagModel} from \"../../domain/tagModel/tag-model\";\r\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map, switchMap} from \"rxjs/operators\";\r\n\r\n@State<ImageModel>({\r\n  name: 'modelDetails',\r\n})\r\n@Injectable()\r\nexport class GetImageByIdState {\r\n  constructor(private imgReqService: ImageRequestService) {\r\n  }\r\n\r\n  @Selector()\r\n  public static getImageDetail(state: ImageModel): ImageModel {\r\n    return state;\r\n  }\r\n\r\n\r\n  @Selector()\r\n  public static getFileDetails(state: ImageModel): ImageFileDetails {\r\n    return state.imageDetails[0];\r\n  }\r\n\r\n  @Selector()\r\n  public static getRatioAsString(state: ImageModel): number {\r\n    return state.imageDetails[0].width /state.imageDetails[0].height;\r\n  }\r\n\r\n  @Action(GetImageByImageId)\r\n  getImageById(ctx: StateContext<ImageModel>, action: GetImageByImageId): Observable<ImageModel> {\r\n    return this.imgReqService\r\n      .getImagesByImgId(action.imageId)\r\n      .pipe(map(req => {\r\n          let state = ctx.getState();\r\n        const newState = {\r\n          imageId: req.imageId,\r\n          link: req.link,\r\n          name: req.name,\r\n          profileImg: req.profileImg,\r\n          linkReference: req.linkReference,\r\n          isPublic: req.isPublic,\r\n          tags: req.tags,\r\n          user: req.user,\r\n          downloaded: req.downloaded,\r\n          liked: req.liked,\r\n          imageDetails: req.imageDetails\r\n        };\r\n        ctx.setState(newState)\r\n        return newState;\r\n        })\r\n      )\r\n  }\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\nimport {ImageModel} from \"../../domain/imageModel/image.model\";\nimport {Injectable} from \"@angular/core\";\nimport {TagRequestService} from \"../../../serviceV2/tag-request.service\";\nimport {ImagesByTagsAction, ImagesNextPageAction} from \"../actions/image.action\";\nimport {map, switchMap, tap} from \"rxjs/operators\";\nimport {ImageModelList} from \"../../domain/imageModel/image-model-list\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\nimport {ImagesByTagNameStateModel} from \"../../domain/imageModel/ImagesByTagNameQuery\";\n\n\n@State<ImagesByTagNameStateModel>({\n  name: 'image',\n  defaults: {\n    page: 0,\n    searchTerm: \"\",\n    imagResponseList: null\n  }\n\n})\n@Injectable()\nexport class ImagesByTagState {\n  constructor(private imageRequestService: ImageRequestService) {\n  }\n\n\n  @Selector()\n  static getData(state: ImagesByTagNameStateModel): ImageModel[] {\n    return state.imagResponseList;\n  }\n\n\n\n  @Action(ImagesByTagsAction)\n  searchByTags(ctx: StateContext<ImagesByTagNameStateModel>, action: ImagesByTagsAction): Observable<ImageModel[]> {\n    const state = ctx.getState();\n    const term = action.imagesByTag.searchTerm;\n    console.log(action.imagesByTag.filterOpt);\n\n    let dayFilterVal;\n\n    if (action.imagesByTag\n      .filterOpt && action.imagesByTag\n      .filterOpt.timeFilterOptions) {\n      dayFilterVal = action.imagesByTag\n        .filterOpt\n        .timeFilterOptions\n        .filter(value => value.checked)\n        .map(filterByDays => filterByDays.value);\n    }\n\n\n    console.log(dayFilterVal);\n    let page = state.page;\n    page = term !== state.searchTerm ? 0 : page;\n    return this.imageRequestService\n      .getImagesByTag(\n        {\n          tagName: term,\n          filterByDays: dayFilterVal !== undefined ? dayFilterVal[0] : null,\n          mostDownloaded: action.imagesByTag.filterOpt !== null ? action.imagesByTag.filterOpt.mostDownloads.checked : null,\n          mostLiked: action.imagesByTag.filterOpt !== null ? action.imagesByTag.filterOpt.mostLiked.checked : null\n        },\n        page)\n      .pipe(\n        map(res => {\n          ctx.patchState(\n            {\n              ...state,\n              page: page,\n              searchTerm: term,\n              imagResponseList: res\n            }\n          )\n          return state.imagResponseList;\n        })\n      )\n  }\n\n  // @Selector()\n  // static getImageData(state: ImagesByTagNameQuery): ImageModelList {\n  //   return state.imagResponseList;\n  // }\n\n  /*@Action(ImagesNextPageAction)\n  getNextPage(ctx: StateContext<ImagesByTagNameStateModel>, action: ImagesNextPageAction) {\n    const state = ctx.getState();\n    const nextPage = state.page + 1;\n\n    return this.imageRequestService\n      .getImagesByTag(state.searchTerm, nextPage)\n      .pipe(\n        tap(res => {\n          console.log(res.length);\n          ctx.setState(\n            {\n              ...state,\n              page: nextPage,\n              searchTerm: state.searchTerm,\n              imagResponseList: res.length === 0 ? state.imagResponseList :\n                state.imagResponseList.concat(res)\n            }\n          )\n        })\n      )\n  }*/\n}\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {ImagesByTagNameStateModel} from \"../../domain/imageModel/ImagesByTagNameQuery\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {ImageModel} from \"../../domain/imageModel/image.model\";\r\nimport {ImagesByTagsAction, ImagesByUserIDAction, ImagesNextPageAction} from \"../actions/image.action\";\r\nimport {tap} from \"rxjs/operators\";\r\nimport {ImageModelList} from \"../../domain/imageModel/image-model-list\";\r\n\r\n@State<ImageModelList>({\r\n  name: 'ImagesByUserId'\r\n})\r\n@Injectable()\r\nexport class ImagesByUserIdState {\r\n  constructor(private imageRequestService: ImageRequestService) {\r\n  }\r\n\r\n  @Selector()\r\n  static getData(state: ImageModelList): ImageModel[] {\r\n    return state.models;\r\n  }\r\n\r\n  @Action(ImagesByUserIDAction)\r\n  searchByTags(ctx: StateContext<ImageModelList>, action: ImagesByUserIDAction) {\r\n    const state = ctx.getState();\r\n    return this.imageRequestService\r\n      .getImagesByUserId(action.userId)\r\n      .pipe(\r\n        tap(res => {\r\n          ctx.setState(\r\n            {\r\n              ...state,\r\n              models: res\r\n            }\r\n          )\r\n        })\r\n      )\r\n  }\r\n\r\n}\r\n","import {Action, Selector, State, StateContext, Store} from \"@ngxs/store\";\r\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {UserAuthenticationService} from \"../../../serviceV2/user-authentication.service\";\r\nimport {UserDetailsActions} from \"../actions/user-details.action\";\r\nimport {Observable, of} from \"rxjs\";\r\nimport {map, switchMap, tap} from \"rxjs/operators\";\r\nimport {AuthenticationActions} from \"../actions/authentication-action\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {UpdateUserService} from \"../../../serviceV2/update-user.service\";\r\n\r\n@State<BaseUserDetails>({\r\n  name: 'LoggedDetails'\r\n})\r\n@Injectable()\r\nexport class LoggedUserDetailsState {\r\n  constructor(private authService: UserAuthenticationService,\r\n              private imageRequestService: UpdateUserService,\r\n              private store: Store) {\r\n  }\r\n\r\n  @Selector()\r\n  static getProfile(state: BaseUserDetails): string {\r\n    return state.profileImgPath;\r\n  }\r\n\r\n  @Selector()\r\n  static loggedUserDetails(state: BaseUserDetails): BaseUserDetails {\r\n    return state;\r\n  }\r\n\r\n  @Selector()\r\n  static loggedUserId(state: BaseUserDetails): string {\r\n    return state.userId;\r\n  }\r\n\r\n  @Selector()\r\n  static loggedFirstLastName(state: BaseUserDetails): string {\r\n    return state.firstName + \" \" + state.lastName;\r\n  }\r\n\r\n  @Selector()\r\n  static loggedUsername(state: BaseUserDetails): string {\r\n    return state.username;\r\n  }\r\n\r\n  @Selector()\r\n  static getLoggedState(state: BaseUserDetails): BaseUserDetails {\r\n    return state;\r\n  }\r\n\r\n  @Action(AuthenticationActions.LoggedUserDetails)\r\n  getUserDetails(ctx: StateContext<BaseUserDetails>,\r\n                 action: AuthenticationActions.LoggedUserDetails): Observable<BaseUserDetails> {\r\n    return this.authService.getUserDetails(action.userId)\r\n      .pipe(\r\n        tap(response => {\r\n          const state = ctx.getState();\r\n          ctx.setState({\r\n            ...state,\r\n            firstName: response.firstName,\r\n            lastName: response.lastName,\r\n            email: response.email,\r\n            userId: response.userId,\r\n            profileImgPath: response.profileImgPath,\r\n            username: response.username\r\n          })\r\n        })\r\n      )\r\n  }\r\n\r\n  @Action(UserDetailsActions.UploadUserProfile)\r\n  uploadProfileImage(ctx: StateContext<BaseUserDetails>,\r\n                     action: UserDetailsActions.UploadUserProfile): Observable<any> {\r\n    return this.imageRequestService\r\n      .setUserProfile(action.userId, action.file)\r\n      .pipe(map(res => {\r\n        if (res.status === 200) {\r\n          console.log(res.body);\r\n          const state = ctx.getState();\r\n          return this.store.dispatch(new AuthenticationActions.IsLoggedIn())\r\n        }\r\n      }))\r\n  }\r\n\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {TagQueryList} from \"../../domain/tagModel/tag-query-list\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {IUserAuthState, UserAuthStateModel} from \"../../domain/UserAuthStateModel\";\r\nimport {IUserLoginModel, LoggedInUserModel} from \"../../domain/userModel/UserLoginModel\";\r\nimport {UserAuthenticationService} from \"../../../serviceV2/user-authentication.service\";\r\nimport {QueryTagAction} from \"../actions/query-tag-action\";\r\nimport {catchError, map, retry, tap} from \"rxjs/operators\";\r\nimport {AuthenticationActions} from \"../actions/authentication-action\";\r\nimport {BehaviorSubject, Observable, Subject, throwError} from \"rxjs\";\r\nimport {Router} from \"@angular/router\";\r\nimport {Navigate} from \"@ngxs/router-plugin\";\r\nimport {BaseUserDetails, UserDetailsImpl} from \"../../domain/userModel/user-details.model\";\r\n\r\n@State<IUserAuthState>({\r\n  name: 'Authentication',\r\n  defaults: {\r\n    user: undefined,\r\n    status: false\r\n  }\r\n})\r\n@Injectable()\r\nexport class LoginStateModel {\r\n  constructor(private authService: UserAuthenticationService,\r\n              private router: Router) {\r\n  }\r\n\r\n\r\n  @Selector()\r\n  static loggedUserId(state: IUserAuthState): string {\r\n    return state.user.userId;\r\n  }\r\n\r\n  @Selector()\r\n  static isLoggedIn(state: IUserAuthState): boolean {\r\n    return state.status;\r\n  }\r\n\r\n  @Selector()\r\n  static loggedInUser(state: IUserAuthState): BaseUserDetails {\r\n    return state.user;\r\n  }\r\n\r\n  @Selector()\r\n  static loggedFirstName(state: IUserAuthState): string {\r\n    return state.user.firstName;\r\n  }\r\n\r\n  @Selector()\r\n  static loggedLastName(state: IUserAuthState): string {\r\n    return state.user.lastName;\r\n  }\r\n\r\n  @Selector()\r\n  static userName(state: IUserAuthState): string {\r\n    return state.user.username;\r\n  }\r\n\r\n  @Selector()\r\n  static userId(state: IUserAuthState): string {\r\n    return state.user.userId;\r\n  }\r\n\r\n  @Selector()\r\n  static profileImg(state: IUserAuthState): string {\r\n    return state.user.profileImgPath;\r\n  }\r\n\r\n  @Action(AuthenticationActions.LoginAction)\r\n  login(ctx: StateContext<IUserAuthState>, action: AuthenticationActions.LoginAction) {\r\n    const loginType = action.userLoginModel.password === undefined ? \"GOOGLE\" : \"DEFAULT\";\r\n    return this.authService.login(action.userLoginModel, loginType)\r\n      .pipe(\r\n        tap(response => {\r\n          const status = response.status === 200;\r\n          const userId = response.headers.get(\"UserId\");\r\n          const state = ctx.getState();\r\n          console.log(response);\r\n          const body = response.body;\r\n          console.log(body)\r\n          ctx.patchState({\r\n            ...state,\r\n            user: {\r\n              userId: body.userId,\r\n              username: body.username,\r\n              firstName: body.firstName,\r\n              lastName: body.lastName,\r\n              profileImgPath: body.profileImgPath,\r\n              email: body.email,\r\n            },\r\n            status: status\r\n          })\r\n        })\r\n      )\r\n  }\r\n\r\n  @Action(AuthenticationActions.IsLoggedIn)\r\n  isLoggedIn(ctx: StateContext<IUserAuthState>,\r\n             action: AuthenticationActions.IsLoggedIn): Observable<boolean> {\r\n    return this.authService.isLoggedIn()\r\n      .pipe(\r\n        map(response => {\r\n          const status = response.status === 200;\r\n          const state = ctx.getState();\r\n          const body = response.body;\r\n          ctx.patchState({\r\n            ...state,\r\n            user: {\r\n              userId: body.userId,\r\n              username: body.username,\r\n              firstName: body.firstName,\r\n              lastName: body.lastName,\r\n              profileImgPath: body.profileImgPath,\r\n              email: body.email\r\n            },\r\n            status: status\r\n          })\r\n          return status;\r\n        }), retry(1), catchError(err => {\r\n          console.log(\"Error in isLoggedin\");\r\n          return throwError(err);\r\n        })\r\n      )\r\n  }\r\n\r\n  @Action(AuthenticationActions.Logout)\r\n  logout(ctx: StateContext<IUserAuthState>, action: AuthenticationActions.Logout) {\r\n    return this.authService.logout()\r\n      .pipe(\r\n        tap(response => {\r\n          const state = ctx.getState();\r\n          ctx.setState({\r\n            ...state,\r\n            user: null,\r\n            status: false\r\n          })\r\n        })\r\n      )\r\n  }\r\n\r\n\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {CroppedDownloadRequest} from \"../../domain/http/req/CroppedDownloadRequest\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageDownloadService} from \"../../../serviceV2/image-download.service\";\r\nimport {SetCroppedOffsetValues} from \"../actions/image.action\";\r\nimport {Observable, of} from \"rxjs\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {flatMap, map, mergeMap, switchMap, tap} from \"rxjs/operators\";\r\n\r\n@State<CroppedDownloadRequest>({\r\n  name: 'prepareForCroppedDownloadRequest'\r\n})\r\n@Injectable()\r\nexport class PrepareCroppedForDownloadState {\r\n  constructor(private downloadService: ImageDownloadService,\r\n              private imgReqService: ImageRequestService) {\r\n  }\r\n\r\n  @Selector()\r\n  public static getCroppedValues(state: CroppedDownloadRequest): CroppedDownloadRequest {\r\n    return state;\r\n  }\r\n\r\n\r\n  @Action(SetCroppedOffsetValues)\r\n  public setCroppedOffsetValues(ctx: StateContext<CroppedDownloadRequest>,\r\n                                action: SetCroppedOffsetValues): Observable<CroppedDownloadRequest> {\r\n    const subImageWidth = action.subImageWidth;\r\n    const subImageHeight = action.subImageHeight;\r\n\r\n    let possibleResolutions: Array<string> = [];\r\n\r\n\r\n    // put cropped image resolution into the resolutionList\r\n    possibleResolutions.push(subImageWidth.toFixed(0) + \" x \" + subImageHeight.toFixed(0))\r\n\r\n    // get possible app resolution array from endpoint\r\n    return this.imgReqService\r\n      .getResolutions()\r\n      .pipe(switchMap(response => {\r\n        let state = ctx.getState();\r\n        const ratio = subImageWidth / subImageHeight;\r\n\r\n        // check if querformat or hochformat\r\n        if (subImageWidth > subImageHeight) {\r\n          response.widthList\r\n            .forEach(widthResolution => {\r\n              if (subImageWidth > widthResolution) {\r\n                const height = widthResolution / ratio;\r\n                possibleResolutions.push(widthResolution + \" x \" + height.toFixed(0));\r\n              }\r\n            })\r\n\r\n          // only take lower resolutions from response array\r\n        } else if (subImageHeight > subImageWidth) {\r\n          response.heightList\r\n            .forEach(heightResolution => {\r\n              if (subImageHeight > heightResolution) {\r\n                const width = heightResolution * ratio;\r\n                possibleResolutions.push(width.toFixed(0) + \" x \" + heightResolution.toFixed(0));\r\n              }\r\n            })\r\n\r\n        }\r\n        ctx.patchState({\r\n          ...state,\r\n          offsetX: action.offsetX,\r\n          offsetY: action.offsetY,\r\n          subImageWidth: subImageWidth,\r\n          subImageHeight: subImageHeight,\r\n          possibleResolutions: possibleResolutions\r\n        })\r\n        return of(ctx.getState());\r\n      }));\r\n  }\r\n}\r\n\r\n\r\nexport interface ResolutionsResponse {\r\n  widthList: Array<number>;\r\n  heightList: Array<number>;\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {ImageModel} from \"../../domain/imageModel/image.model\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {UserDetailsActions} from \"../actions/user-details.action\";\r\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map, tap} from \"rxjs/operators\";\r\nimport {GetRelatedImagesByTagIDs} from \"../actions/image.action\";\r\n\r\n@State<RelatedImagesModel>({\r\n  name: 'RelatedImages'\r\n})\r\n@Injectable()\r\nexport class RelatedImagesState {\r\n  constructor(private imageReqService: ImageRequestService) {\r\n  }\r\n\r\n  @Selector()\r\n  static getRelatedImages(state: RelatedImagesModel): ImageModel[] {\r\n    return state.data;\r\n  }\r\n\r\n  @Action(GetRelatedImagesByTagIDs)\r\n  userDetails(ctx: StateContext<RelatedImagesModel>,\r\n              action: GetRelatedImagesByTagIDs): Observable<ImageModel[]> {\r\n    return this.imageReqService.getRelatedImagesByTagList(action.tagIds)\r\n      .pipe(\r\n        map(response => {\r\n          console.log(response)\r\n          let state = ctx.getState();\r\n          state.data = response;\r\n          ctx.setState({\r\n            data: response\r\n          })\r\n          return response;\r\n        })\r\n      )\r\n  }\r\n\r\n}\r\n\r\nexport interface RelatedImagesModel {\r\n  data: ImageModel[]\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {RequestStatus} from \"../../domain/request-status\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {RequestMessageAction} from \"../actions/request-message.action\";\r\nimport {ImageModelList} from \"../../domain/imageModel/image-model-list\";\r\nimport {ImageModel} from \"../../domain/imageModel/image.model\";\r\n\r\n@State<RequestStatus>({\r\n  name: 'RequestStatus'\r\n})\r\n@Injectable()\r\nexport class RequestStatusState {\r\n\r\n  @Selector()\r\n  static getStatus(state: RequestStatus): RequestStatus {\r\n    return state;\r\n  }\r\n\r\n\r\n  @Action(RequestMessageAction)\r\n  getRequestStatus(ctx: StateContext<RequestStatus>, action: RequestMessageAction) {\r\n    let state = ctx.getState();\r\n    state.message = '';\r\n    if (action.requestStatus !== null) {\r\n      ctx.setState({\r\n        message: action.requestStatus.message,\r\n        status: action.requestStatus.status !== null ?\r\n          action.requestStatus.status : null\r\n      });\r\n    }\r\n  }\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\nimport {TagQueryList} from \"../../domain/tagModel/tag-query-list\";\nimport {Injectable} from \"@angular/core\";\nimport {QueryTagAction} from \"../actions/query-tag-action\";\nimport {TagRequestService} from \"../../../serviceV2/tag-request.service\";\nimport {tap} from \"rxjs/operators\";\nimport {TagModel} from \"../../domain/tagModel/tag-model\";\nimport {SearchViewModel} from \"../../../public/search-toolbar/search-view.model\";\n\n@State<TagQueryList>({\n  name: 'tag'\n})\n@Injectable()\nexport class SearchByTagState {\n  constructor(public tagService: TagRequestService) {\n  }\n\n  @Selector()\n  static tags(state: TagQueryList): TagQueryList {\n    return state;\n  }\n\n  @Selector()\n  static getFetchedTagListAsOption(state: TagQueryList): SearchViewModel[] {\n    return state.result\n      .map(val => {\n        return {\n          value: val.tag\n        }\n      });\n  }\n\n  @Selector()\n  static getFetchedTagList(state: TagQueryList): TagModel[] {\n    return state.result;\n  }\n\n  @Action(QueryTagAction)\n  queryTags(ctx: StateContext<TagQueryList>, action: QueryTagAction) {\n    return this.tagService\n      .searchByTagName(action.searchTerm)\n      .pipe(\n        tap(res => {\n          const state = ctx.getState();\n          //ctx.patchState({result: res})\n          ctx.setState({\n            ...state,\n            result: res\n          })\n        })\n      )\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {SearchByUsersService} from \"../../../serviceV2/search-by-users.service\";\nimport {Action, Selector, State, StateContext} from \"@ngxs/store\";\nimport {QueryTagAction} from \"../actions/query-tag-action\";\nimport {TagQueryList} from \"../../domain/tagModel/tag-query-list\";\nimport {map, tap} from \"rxjs/operators\";\nimport {UserDetailsActions} from \"../actions/user-details.action\";\nimport SearchUsers = UserDetailsActions.SearchUsers;\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\nimport {TagModel} from \"../../domain/tagModel/tag-model\";\nimport {SearchViewModel} from \"../../../public/search-toolbar/search-view.model\";\n\n@State<UserSearchModel>({\n  name: 'users'\n})\n@Injectable()\nexport class SearchByUsersState {\n\n  constructor(public userSearchService: SearchByUsersService) { }\n\n  @Selector()\n  static getFetchedUsersAsOptions(state: UserSearchModel): SearchViewModel[] {\n    console.log(state.data);\n    return state.data.map(val => {\n      return {\n        value: val.username\n      }\n    });\n  }\n\n\n  @Selector()\n  static getFetchedUsers(state: UserSearchModel): BaseUserDetails[] {\n    console.log(state.data);\n    return state.data;\n  }\n\n  @Action(SearchUsers)\n  queryTags(ctx: StateContext<UserSearchModel>, action: SearchUsers) {\n    return this.userSearchService\n      .searchByTagName(action.searchTerm)\n      .pipe(map(response => {\n        console.log(response)\n        const users = {data: response};\n        const state = ctx.getState();\n        ctx.patchState({\n          ...state,\n          data: response\n        })\n        return ctx.getState();\n      }))\n  }\n}\n\nexport interface UserSearchModel {\n  data: BaseUserDetails[];\n}\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {ImageModel, SelectedImage} from \"../../domain/imageModel/image.model\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {GetImageByImageId, SelectImage} from \"../actions/image.action\";\r\n\r\n\r\n\r\n\r\n@State<SelectedImage> ( {\r\n  name: 'SelectImage'\r\n} )\r\n@Injectable()\r\nexport class SelectImageState {\r\n  constructor() { }\r\n\r\n  @Selector()\r\n  static getSelectedImage(state: SelectImage): ImageModel {\r\n    return state.image;\r\n  }\r\n\r\n  @Selector()\r\n  static getSelectedImageUrlReference(state: SelectImage): string {\r\n    return state.image.linkReference;\r\n  }\r\n\r\n  @Selector()\r\n  static getSelectedImageId(state: SelectImage): string {\r\n    return state.image.imageId;\r\n  }\r\n\r\n  @Selector()\r\n  static getSelectedLink(state: ImageModel): string {\r\n    return state.link;\r\n  }\r\n\r\n  @Selector()\r\n  static getIsPublic(state: SelectImage): boolean {\r\n    return state.image.isPublic;\r\n  }\r\n\r\n  @Action(SelectImage)\r\n  selectImage(ctx: StateContext<SelectedImage>, action: SelectImage) {\r\n    const state = ctx.getState();\r\n    ctx.setState( {\r\n      ...state,\r\n      image: action.image\r\n    } )\r\n  }\r\n\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {IUserAuthState} from \"../../domain/UserAuthStateModel\";\r\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\r\nimport {UserAuthenticationService} from \"../../../serviceV2/user-authentication.service\";\r\nimport {AuthenticationActions} from \"../actions/authentication-action\";\r\nimport {catchError, map, switchMap, tap} from \"rxjs/operators\";\r\nimport {LoggedInUserModel, UserLoginModel} from \"../../domain/userModel/UserLoginModel\";\r\nimport {EMPTY, Observable} from \"rxjs\";\r\nimport {AddressViewListState} from \"../../domain/address-model/address-view.list.state\";\r\nimport {Country} from \"../../domain/address-model/addres.view.model\";\r\nimport {RequestMessageAction} from \"../actions/request-message.action\";\r\n\r\n\r\n@State<BaseUserDetails>({\r\n  name: 'Signup',\r\n  defaults: {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n    address: undefined\r\n  }\r\n})\r\n@Injectable()\r\nexport class SignupState {\r\n  constructor(private authService: UserAuthenticationService) {\r\n  }\r\n\r\n  @Selector()\r\n  static registrationModel(state: BaseUserDetails): BaseUserDetails {\r\n    return state;\r\n  }\r\n\r\n\r\n\r\n  @Action(AuthenticationActions.SignUpAction)\r\n  createNewUser(ctx: StateContext<BaseUserDetails>,\r\n                action: AuthenticationActions.SignUpAction): Observable<LoggedInUserModel> {\r\n    return this.authService.createNewUser(action.userRegistration)\r\n      .pipe(\r\n        map(response => {\r\n          const state = ctx.getState();\r\n          ctx.setState({\r\n            ...state,\r\n            firstName: action.userRegistration.firstName,\r\n            lastName: action.userRegistration.lastName,\r\n            email: action.userRegistration.email,\r\n            password: action.userRegistration.password,\r\n            address: action.userRegistration.address\r\n          })\r\n\r\n          return response;\r\n        }), catchError(err => {\r\n          ctx.dispatch(new RequestMessageAction({ status: err.status, message: err.error.message}))\r\n          return EMPTY;\r\n        })\r\n      )\r\n  }\r\n\r\n}\r\n","import {Action, State, StateContext} from \"@ngxs/store\";\r\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\r\nimport {UpdateUserService} from \"../../../serviceV2/update-user.service\";\r\nimport {UpdateUserProfileActions} from \"../actions/update-user-profile.action\";\r\nimport {UploadImageModel} from \"../../domain/imageModel/upload-image.model\";\r\nimport {switchMap, tap} from \"rxjs/operators\";\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n@State<UploadImageModel>({\r\n  name: 'foo'\r\n})\r\n@Injectable()\r\nexport class UpdateUserProfileImageState {\r\n  constructor(private updateProfileService: UpdateUserService) { }\r\n\r\n  @Action(UpdateUserProfileActions.UploadUserProfileImg)\r\n  setProfile(ctx: StateContext<UploadImageModel>,\r\n             action: UpdateUserProfileActions.UploadUserProfileImg) {\r\n    return this.updateProfileService\r\n      .setUserProfile(action.userId, action.file)\r\n      .pipe(tap(response => {\r\n        const state = ctx.getState();\r\n        state.file = action.file;\r\n        state.userId = action.userId;\r\n        ctx.patchState({...state})\r\n      }))\r\n\r\n  }\r\n\r\n}\r\n","import {Action, Selector, State, StateContext} from \"@ngxs/store\";\r\nimport {BaseUserDetails} from \"../../domain/userModel/user-details.model\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {UserAuthenticationService} from \"../../../serviceV2/user-authentication.service\";\r\nimport {AuthenticationActions} from \"../actions/authentication-action\";\r\nimport {Observable} from \"rxjs\";\r\nimport {LoggedInUserModel} from \"../../domain/userModel/UserLoginModel\";\r\nimport {tap} from \"rxjs/operators\";\r\nimport {ImageRequestService} from \"../../../serviceV2/image-request.service\";\r\nimport {UploadImage} from \"../actions/image.action\";\r\nimport {UploadImageModel} from \"../../domain/imageModel/upload-image.model\";\r\nimport {UserDetailsActions} from \"../actions/user-details.action\";\r\nimport {ImageUploadService} from \"../../../serviceV2/image-upload.service\";\r\n\r\n@State<UploadImageModel>({\r\n  name: 'Upload'\r\n\r\n})\r\n@Injectable()\r\nexport class UploadImageState {\r\n  constructor(private uploadService: ImageUploadService) {\r\n  }\r\n\r\n  @Selector()\r\n  static userDetails(state: BaseUserDetails): BaseUserDetails {\r\n    return state;\r\n  }\r\n\r\n  @Action(UploadImage)\r\n  uploadImage(ctx: StateContext<UploadImageModel>,\r\n              action: UploadImage): Observable<any> {\r\n\r\n    // const userId = action.uploadModel.userId;\r\n    // const image = action.uploadModel.file;\r\n    return this.uploadService\r\n      .addToUserLibrary(action.uploadModel)\r\n      .pipe(\r\n        tap(response => {\r\n          // console.log(response.status)\r\n          const state = ctx.getState();\r\n          ctx.setState({\r\n            ...state,\r\n            userId: action.uploadModel.userId,\r\n            orgFile: action.uploadModel.orgFile,\r\n            downloadFile: action.uploadModel.downloadFile,\r\n            status: response.status === 200\r\n          })\r\n        })\r\n      )\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {SignupComponent} from \"../signup/signup.component\";\nimport {LoginComponent} from \"../login/login.component\";\nimport {Store} from \"@ngxs/store\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AuthenticationActions} from \"../app-state/actions/authentication-action\";\nimport LoggedUserDetails = AuthenticationActions.LoggedUserDetails;\n\n@Component({\n  selector: 'app-dialog-wrapper',\n  templateUrl: './login-dialog-wrapper.component.html',\n  styleUrls: ['./login-dialog-wrapper.component.scss']\n})\nexport class LoginDialogWrapperComponent implements OnInit {\n\n  constructor(private dialog: MatDialog,\n              private store: Store) { }\n\n  ngOnInit(): void {\n    const ref = new MatDialogConfig();\n    this.dialog.open(LoginComponent,\n      {\n        width: '750px',\n        height: '400px',\n        disableClose: true,\n        autoFocus: false\n      });\n  }\n\n}\n","<app-search-toolbar></app-search-toolbar>\n\n","export class UserAddressModel {\r\n  street: string;\r\n  region: string;\r\n  zipcode: string;\r\n  country: string;\r\n\r\n\r\n  constructor(street: string,\r\n              region: string,\r\n              zipcode: string,\r\n              country: string) {\r\n    this.street = street;\r\n    this.region = region;\r\n    this.zipcode = zipcode;\r\n    this.country = country;\r\n  }\r\n}\r\n","import {ImageModel} from \"./image.model\";\r\nimport {FilterCheckBox} from \"../../../public/search-toolbar/search.toolbar.component\";\r\n\r\nexport interface ImagesByTagName {\r\n  page?: number;\r\n  searchTerm: string;\r\n  imagResponseList?: ImageModel[];\r\n  filterOpt?: FilterCheckBox;\r\n}\r\n\r\nexport class FilterName {\r\n  public static readonly FILTER_BY_DATE_WEEK = \"WEEK\";\r\n  public static readonly FILTER_BY_DATE_MONTH = \"MONTH\";\r\n  public static readonly FILTER_BY_DATE_YEAR = \"YEAR\";\r\n  public static readonly FILTER_BY_MOST_DOWNLOADS = \"DOWNLOADS\";\r\n  public static readonly FILTER_BY_MOST_LIKES = \"LIKES\";\r\n}\r\n\r\nexport class ImagesByTagNameWithFilterArgs implements ImagesByTagName{\r\n  searchTerm: string;\r\n  filters: Map<string, boolean>;\r\n\r\n  constructor(searchTerm: string, filters: Map<string, boolean>) {\r\n    this.searchTerm = searchTerm;\r\n    this.filters = filters;\r\n  }\r\n}\r\n\r\nexport class ImagesByTagNameWithFilterOpt implements ImagesByTagName{\r\n  filterOpt: FilterCheckBox;\r\n  searchTerm: string;\r\n\r\n\r\n  constructor(filterOpt: FilterCheckBox, searchTerm: string) {\r\n    this.filterOpt = filterOpt;\r\n    this.searchTerm = searchTerm;\r\n  }\r\n}\r\n\r\n\r\nexport class ImagesByTagNameQueryImpl implements ImagesByTagName{\r\n  searchTerm: string;\r\n\r\n  constructor(searchTerm: string) {\r\n    this.searchTerm = searchTerm;\r\n  }\r\n}\r\n\r\nexport class ImagesByTagNameStateModel implements ImagesByTagName{\r\n  page: number;\r\n  searchTerm: string;\r\n  imagResponseList?: ImageModel[];\r\n\r\n  constructor(page: number,\r\n              searchTerm: string,\r\n              imagResponseList: ImageModel[]) {\r\n    this.page = page;\r\n    this.searchTerm = searchTerm;\r\n    this.imagResponseList = imagResponseList;\r\n  }\r\n}\r\n","export interface IUserLoginModel {\n  userId?: string;\n  email: string;\n  password?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImg?: string;\n  tokenId?: string;\n}\n\nexport class UserLoginModel implements IUserLoginModel{\n  email: string;\n  password: string;\n\n  constructor(email: string, password: string) {\n    this.email = email;\n    this.password = password;\n  }\n}\n\nexport class LoggedInUserModel implements IUserLoginModel {\n  email: string;\n  userId: string;\n\n  constructor(userId: string, email: string) {\n    this.email = email;\n    this.userId = userId;\n  }\n}\n\nexport class GoogleUserLogin implements IUserLoginModel {\n  email: string;\n  firstName: string;\n  lastName: string;\n  profileImg: string;\n  tokenId: string;\n\n\n  constructor(email: string, firstName: string, lastName: string, profileImg: string, tokenId: string) {\n    this.email = email;\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.profileImg = profileImg;\n    this.tokenId = tokenId;\n  }\n}\n","import {UserAddressModel} from \"../address-model/user-address-model\";\r\nimport {ImageModel} from \"../imageModel/image.model\";\r\n\r\nexport interface BaseUserDetails {\r\n  userId?: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  username?: string;\r\n  likes?: ImageModel[];\r\n  images?: ImageModel[];\r\n  profileImgPath?: string;\r\n  password?: string;\r\n  address?: UserAddressModel;\r\n}\r\n\r\nexport class UserRegistrationModel implements BaseUserDetails{\r\n  address?: UserAddressModel;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  password: string;\r\n\r\n  constructor(firstName: string, lastName: string,\r\n              email: string, password: string,\r\n              street: string, region: string,\r\n              zipcode: string, country:string) {\r\n    this.address = new UserAddressModel(street, region, zipcode, country);\r\n    this.email = email;\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n    this.password = password;\r\n  }\r\n}\r\n\r\nexport class UserDetailsImpl implements BaseUserDetails{\r\n  userId: string\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  profileImgPath: string;\r\n  username: string;\r\n\r\n\r\n  constructor(userId: string, email: string,\r\n              firstName: string, lastName: string,\r\n              profileImgPath: string, username: string) {\r\n    this.userId = userId;\r\n    this.email = email;\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n    this.profileImgPath = profileImgPath;\r\n    this.username = username;\r\n  }\r\n}\r\n\r\n\r\n","import {Component, Input, OnInit, ViewChild} from '@angular/core';\nimport {CdkVirtualScrollViewport} from \"@angular/cdk/scrolling\";\nimport {BehaviorSubject, Observable, of, Subject} from \"rxjs\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {ImagesByTagState} from \"../app-state/states/images-by-tag-state\";\nimport {ImageModelList} from \"../domain/imageModel/image-model-list\";\nimport {ImageModel, ImageViewModel} from \"../domain/imageModel/image.model\";\nimport {map, switchMap, tap, throttleTime} from \"rxjs/operators\";\nimport {ImageTile} from \"./image-tile\";\nimport {TileRandomizer} from \"./tile-randomizer\";\nimport {Tile} from \"./tile\";\nimport {ImageRequestService} from \"../../serviceV2/image-request.service\";\nimport {\n  GetDownloadDetails,\n  GetImageByImageId, GetRelatedImagesByTagIDs,\n  ImagesByTagsAction,\n  ImagesByUserIDAction,\n  ImagesNextPageAction,\n  SelectImage\n} from \"../app-state/actions/image.action\";\nimport {ImagesByTagNameQueryImpl, ImagesByTagNameWithFilterOpt} from \"../domain/imageModel/ImagesByTagNameQuery\";\nimport {Router} from \"@angular/router\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {SignupComponent} from \"../signup/signup.component\";\nimport {ImageDetailViewComponent} from \"../image-detail-view/image-detail-view.component\";\nimport {BaseUserDetails} from \"../domain/userModel/user-details.model\";\nimport {LoggedUserDetailsState} from \"../app-state/states/logged-user-details.state\";\n\n@Component({\n  selector: 'app-image-content',\n  templateUrl: './image-content.component.html',\n  styleUrls: ['./image-content.component.scss']\n})\nexport class ImageContentComponent implements OnInit {\n\n  @Input('data') models: Observable<ImageModel[]>;\n  @Input('isProfile') isProfile: boolean;\n\n  panelOpenState = false;\n  //fetched data\n  public data: ImageModel[];\n  @Select(ImagesByTagState.getData) fData$: Observable<ImageModel[]>;\n  @Select(LoginStateModel.loggedUserId) $loggedUserId;\n  @Select(LoginStateModel.loggedInUser) $loggedUser;\n  @Select(ImagesByUserIdState.getData) $imageData;\n  loggedUserState: BaseUserDetails;\n  hover: boolean = false;\n  editable: boolean = false;\n\n\n  //AutoScroll\n  @ViewChild(CdkVirtualScrollViewport)\n  viewport: CdkVirtualScrollViewport;\n  test = new Array<string>();\n  end = false;\n  offset = new Subject();\n  evenRowLimit = new Subject<boolean>();\n  infinite: Observable<any[]>;\n  showLoadBtn: boolean;\n  dataEvenRowSize: number;\n  breakpoint: any;\n  downloadLink: any;\n  rows = new Subject<ImageRowView[]>();\n  imageViewModel: ImageViewModel[];\n\n  constructor(private store: Store,\n              public imgReqService: ImageRequestService,\n              private router: Router,\n              private updateUserService: UpdateUserService,\n              private dialog: MatDialog,\n              private downloadService: ImageDownloadService) {\n  }\n\n\n  ngOnInit(): void {\n\n    this.models.subscribe(value => {\n      const imageRowViews: ImageRowView[] = ImageRowMapper.mapToImageRow(value);\n      // if (imageRowViews) console.log(imageRowViews.length);\n      this.rows.next(imageRowViews);\n      // let countRow: number = 0;\n      // let countItem: number = 0;\n      // let rowModels: ImageRowView[] = [];\n      // let temp: ImageModel[] = [];\n      // let diffRatio: ImageRowView = {row: null, content: []};\n      // if (value !== undefined && value !== null) {\n      //   value.forEach((value1, index) => {\n      //     countItem++;\n      //     if (countItem <= 3) temp.push(value1);\n      //     if (countItem == 3) {\n      //       countItem = 0;\n      //       rowModels.push({row: countRow, content: temp});\n      //       temp = [];\n      //       countRow++;\n      //     }\n      //     if (index == value.length - 1) {\n      //       rowModels.push({row: countRow, content: temp});\n      //     }\n      //   })\n      //   console.log(rowModels);\n      // }\n    })\n\n    this.$loggedUserId.subscribe(id => {\n      console.log(id);\n      this.models.subscribe(data => {\n        if (data) {\n          for (let i = 0; i < data.length; i++) {\n            if (data[i].user.userId !== id) {\n              // console.log(data[i]);\n              // console.log(id);\n              this.editable = false;\n              break;\n            } else {\n              this.editable = true;\n            }\n          }\n        }\n      })\n    })\n\n    console.log(this.editable);\n\n    // const batchMap = this.offset.pipe(\n    //   throttleTime(500),\n    //   tap(x => console.log(x))\n    // );\n    //\n    //\n    // batchMap.subscribe(value => console.log(value))\n\n    // this.fData$.subscribe(value => {\n    //   if (value !== undefined && value != null) {\n    //     this.dataEvenRowSize = Math.floor(value.length / 3);\n    //     this.data = value;\n    //     this.evenRowLimit.next(true)\n    //   }\n    // })\n\n  }\n\n  public nextBatch(e, offset) {\n    if (this.end) { return; }\n    const end = this.viewport.getRenderedRange().end;\n    var total = this.viewport.getDataLength();\n    console.log(total);\n    console.log(end);\n    this.offset.subscribe(value => console.log(value));\n    if (end == total) this.offset.next(offset);\n  }\n\n  public getBatch(lastSeen: string) {\n\n  }\n\n  onResize($event: any) {\n\n  }\n\n  enter() {\n    this.hover = true;\n    console.log(this.hover);\n  }\n\n  leave() {\n    this.hover = false;\n    console.log(this.hover);\n  }\n\n  download(img: ImageModel): void {\n    console.log(img)\n    this.store.dispatch(new GetImageByImageId(img.imageId))\n    this.router.navigate(['image', { imageId: img.imageId }]);\n  }\n\n  clickedTag(tag: string) {\n    this.store.dispatch(new ImagesByTagsAction(\n      new ImagesByTagNameWithFilterOpt(null, tag)))\n      .subscribe(value => {\n        console.log(value);\n        console.log(\"Search pressed..\");\n        this.router.navigate(['/image-by-tags']);\n      });\n    /*this.store.dispatch(\n      new ImagesByTagsAction(new ImagesByTagNameQueryImpl(tag))\n    ).subscribe(value => {\n      /!*this.store.dispatch(new Navigate(['/image-by-tags']))*!/\n      this.router.navigate(['image-by-tags'])\n    });*/\n\n  }\n\n  reachedLastEvenElement(val) {\n    console.log(val)\n  }\n\n  track(index: number, el: any): number {\n    return index;\n  }\n\n  loadNextPage() {\n    this.store.dispatch(new ImagesNextPageAction(this.data))\n  }\n\n  navigateToUser(item: ImageModel): void {\n    console.log(item.user.userId);\n    this.store.dispatch(\n      new Navigate(['profile', {userId: item.user.userId}])\n    )\n  }\n\n  showImageDetailDialog(item: ImageModel): void {\n    this.store.dispatch(new SelectImage(item))\n      .subscribe(value => {\n        const ref = new MatDialogConfig();\n        this.dialog.open(ImageDetailViewComponent,\n          {\n            width: '1150px',\n            height: '600px',\n            data: item\n            // disableClose: true,\n            // autoFocus: false\n          });\n      })\n\n  }\n\n  changeImageDetails(item: ImageModel): void {\n    if (this.isProfile && this.editable) {\n      this.store.dispatch(new SelectImage(item))\n      this.dialog.open(ChangeImageDetailsDialogComponent,\n        {\n          width: '780px',\n          height: '780px',\n          data: item\n        }\n      );\n    }\n  }\n\n\n  showAddTagsDialog(item: ImageModel): void {\n    const ref = new MatDialogConfig();\n    // ref.disableClose = true;\n    this.store.dispatch(new SelectImage(item))\n    this.dialog.open(AddTagsDialogComponent,\n      {\n        width: '435px',\n        height: '600px',\n        data: item,\n        panelClass: 'add-tag-dialog'\n      }\n    );\n\n    this.dialog.afterAllClosed\n      .subscribe(value => {\n        console.log(\"FOO\")\n        this.store.dispatch(new Navigate(['profile', {userId: item.user.userId}]))\n      })\n  }\n\n  // when not logged user likes image then redirect to login page\n\n  likeImage(item: ImageModel, userId: string): void {\n    console.log(this.store.selectSnapshot(LoginStateModel.loggedUserId));\n    this.store.dispatch(new IsLoggedIn())\n      .subscribe(value1 => {\n        this.updateUserService.addUserLike(item.imageId, value1.Authentication.user.userId)\n          .subscribe(value => console.log(value));\n        this.store.dispatch(new UserDetailsActions.GetUserDetails(userId))\n      });\n  }\n}\n\nimport {LoginStateModel} from \"../app-state/states/login.state.model\";\nimport {LoginComponent} from \"../login/login.component\";\nimport {AddTagsDialogComponent} from \"../../private/add-tags-dialog/add-tags-dialog.component\";\n\n\nimport {UserDetailsActions} from \"../app-state/actions/user-details.action\";\nimport {ImagesByUserIdState} from \"../app-state/states/images-by-user-id.state\";\nimport {ImageRowView} from \"../domain/ImageRowView\";\nimport {ImageRowMapper} from \"../image-row-mapper\";\nimport {UpdateUserService} from \"../../serviceV2/update-user.service\";\nimport {AuthenticationActions} from \"../app-state/actions/authentication-action\";\nimport IsLoggedIn = AuthenticationActions.IsLoggedIn;\nimport {HttpClient} from \"@angular/common/http\";\nimport * as FileSaver from \"file-saver\";\nimport {ImageDownloadService} from \"../../serviceV2/image-download.service\";\nimport {ChangeImageDetailsDialogComponent} from \"../../private/change-image-details-dialog/change-image-details-dialog.component\";\nimport {FileSaverService} from \"ngx-filesaver\";\n","<!--<div class=\"testing\">-->\n<!--  <cdk-virtual-scroll-viewport itemSize=\"2\" class=\"example-viewport\">-->\n<!--    <div *cdkVirtualFor=\"let item of rows | async\" class=\"example-item\">-->\n<!--&lt;!&ndash;      <div style=\"width: 1450px; height: 450px;&ndash;&gt;-->\n<!--&lt;!&ndash;                color: #3f51b5;&ndash;&gt;-->\n<!--&lt;!&ndash;                display: grid; grid-column-gap: 10px; grid-template-columns: 33%33%33%;\">&ndash;&gt;-->\n<!--&lt;!&ndash;        <div style=\"margin: 10px; width: 100%\" *ngFor=\"let item2 of item.content\">&ndash;&gt;-->\n<!--&lt;!&ndash;          <img class=\"img\" width=\"330px\" height=\"200px\" [src]=\"item2.link\">&ndash;&gt;-->\n<!--&lt;!&ndash;        </div>&ndash;&gt;-->\n<!--&lt;!&ndash;      </div>&ndash;&gt;-->\n\n<!--    </div>-->\n<!--  </cdk-virtual-scroll-viewport>-->\n<!--</div>-->\n\n\n<div class=\"container\">\n  <div *ngFor=\"let item of (models | async); index as i; trackBy: track\" class=\"tile\">\n\n    <div class=\"tile-container\">\n      <div class=\"img-tile\">\n        <img class=\"img\"  [src]=\"item.link\">\n      </div>\n      <div class=\"details\">\n\n        <div *ngIf=\"!item.user.profileImgPath\" class=\"profile-icon\">\n          <button class=\"btn\" mat-icon-button>\n            <mat-icon style=\"font-size: 70px; color: white\">account_circle</mat-icon>\n          </button>\n          <a mat-button style=\"font-size: 20px\" *ngIf=\"!item.user.profileImgPath\" class=\"header\"\n             (click)=\"navigateToUser(item)\">\n            {{ item.user.email.substr(0, item.user.email.indexOf('@')) }}\n          </a>\n        </div>\n\n        <div *ngIf=\"item.user.profileImgPath\" class=\"profile-img\">\n          <a mat-button *ngIf=\"item.user.profileImgPath\" class=\"account-btn\" (click)=\"navigateToUser(item)\">\n            <img class=\"shadow3\" id=\"img-profile\" [src]=\"item.user.profileImgPath\" alt=\"\">\n            <span id=\"user-txt\">{{ item.user.email.substr(0, item.user.email.indexOf('@')) }}</span>\n          </a>\n          <!--          <a mat-button *ngIf=\"item.user.profileImgPath\" class=\"header2\" (click)=\"navigateToUser(item)\">-->\n          <!--            {{ item.user.email.substr(0, item.user.email.indexOf('@')) }}-->\n          <!--          </a>-->\n        </div>\n\n\n        <div class=\"link\">\n          <a mat-button>\n            <mat-icon matTooltip=\"This image is public\" (click)=\"changeImageDetails(item)\"\n                      *ngIf=\"item.isPublic\">public\n            </mat-icon>\n            <mat-icon matTooltip=\"This image is private\" (click)=\"changeImageDetails(item)\"\n                      *ngIf=\"!item.isPublic\">lock\n            </mat-icon>\n          </a>\n        </div>\n\n        <div class=\"content-btn\">\n          <button matTooltip=\"Click to open menu\"\n                  style=\"color: white; font-size: 50px\"\n                  mat-icon-button\n                  [matMenuTriggerFor]=\"menu\"\n                  aria-label=\"Example icon-button with a menu\">\n            <mat-icon style=\"font-size: 30px\">more_vert</mat-icon>\n          </button>\n          <mat-menu #menu=\"matMenu\">\n            <button *ngIf=\"editable && isProfile\"\n                    (click)=\"showAddTagsDialog(item)\"\n                    mat-menu-item>\n              <mat-icon>edit</mat-icon>\n              <span>Add tags</span>\n            </button>\n            <button (click)=\"showImageDetailDialog(item)\" mat-menu-item>\n              <mat-icon>fullscreen</mat-icon>\n              <span>Fullscreen</span>\n            </button>\n            <a mat-menu-item (click)=\"download(item)\">\n              <mat-icon>save_alt</mat-icon>\n              <span>Download image</span>\n            </a>\n            <a matTooltip=\"Go to {{item.linkReference}}\"\n               mat-menu-item\n               [href]=\"item.linkReference\">\n              <mat-icon>public</mat-icon>\n              <span>Go to source</span>\n            </a>\n          </mat-menu>\n        </div>\n        <div class=\"likes\">\n          <a class=\"thumbUp\" (click)=\"likeImage(item, item.userId)\"\n             mat-icon-button>\n            <mat-icon style=\"font-size: 30px; color: white\">thumb_up</mat-icon>\n          </a>\n        </div>\n      </div>\n    </div>\n    <div class=\"tags\">\n      <a class=\"shadow\" (click)=\"clickedTag(i.tag)\" href=\"#\" style=\"background-color: #fcefee;\n        color: black;\n        text-decoration: none;\n        padding: 5px 20px;\n        border-radius: 20px;\n        margin-top: 2%; margin-right: 1%\" *ngFor=\"let i of item.tags\">{{'# ' + i.tag }}\n      </a>\n    </div>\n  </div>\n  <br>\n  <div class=\"load-btn\" *ngIf=\"evenRowLimit | async\">\n    <button (click)=\"loadNextPage()\" color=\"primary\" style=\"margin-bottom: 2%;\n         width: 100%; height: 60px ;\n         font-size: 30px;\" mat-raised-button>\n      Load more\n      <mat-icon>more_horiz</mat-icon>\n    </button>\n  </div>\n</div>\n\n\n\n\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {Select} from \"@ngxs/store\";\nimport {SelectImageState} from \"../app-state/states/select-image.state\";\nimport {ImageModel} from \"../domain/imageModel/image.model\";\nimport {Observable} from \"rxjs\";\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\n\n@Component({\n  selector: 'app-image-detail-view',\n  templateUrl: './image-detail-view.component.html',\n  styleUrls: ['./image-detail-view.component.scss']\n})\nexport class ImageDetailViewComponent implements OnInit {\n\n  @Select(SelectImageState.getSelectedLink) selectedImage: Observable<string>;\n  link: string = '';\n  panelOpenState: boolean;\n\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ImageModel) { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n","<p>image-detail-view works!</p>\n\n\n<div class=\"container\">\n  <div class=\"content\">\n    <img class=\"img-content\" [src]=\"data.link\" alt=\"\">\n  </div>\n  <div class=\"download\">\n    <button mat-raised-button color=\"primary\" matTooltip=\"Click to open menu\"\n            style=\"color: white; width: 300px; height: 50px\"\n\n            [matMenuTriggerFor]=\"menu\"\n            aria-label=\"Example icon-button with a menu\">\n      <!--    <mat-icon style=\"font-size: 30px\">more_vert</mat-icon>-->\n      Download image\n    </button>\n    <mat-menu #menu=\"matMenu\">\n      <button style=\"width: 500px; height: 100%\" mat-menu-item>\n        <mat-icon>aspect_ratio</mat-icon>\n        <span style=\"display: inline-block; width: 15px\"></span>\n        <span>1920 x 1080</span>\n        <span style=\"display: inline-block; width: 25px\"></span>\n        <span>jpg</span>\n        <span style=\"display: inline-block; width: 25px\"></span>\n        <span>620kB</span>\n      </button>\n      <button style=\"width: 500px; height: 100%\" mat-menu-item>\n        <mat-icon>aspect_ratio</mat-icon>\n        <span style=\"display: inline-block; width: 15px\"></span>\n        <span>1280 x 780</span>\n        <span style=\"display: inline-block; width: 25px\"></span>\n        <span>jpg</span>\n        <span style=\"display: inline-block; width: 25px\"></span>\n        <span>120kB</span>\n      </button>\n    </mat-menu>\n  </div>\n</div>\n\n","import {ImageModel} from \"./domain/imageModel/image.model\";\r\nimport {ImageRowView} from \"./domain/ImageRowView\";\r\n\r\nexport class ImageRowMapper {\r\n  public static mapToImageRow(imageModels: ImageModel[]): ImageRowView[] {\r\n    let countRow: number = 0;\r\n    let countItem: number = 0;\r\n    let rowModels: ImageRowView[] = [];\r\n    let temp: ImageModel[] = [];\r\n    let test: ImageRowView = {row: null, content: []};\r\n    if (imageModels !== undefined && imageModels !== null) {\r\n      imageModels.forEach((value1, index) => {\r\n        countItem++;\r\n        if (countItem <= 3) temp.push(value1);\r\n        if (countItem == 3) {\r\n          countItem = 0;\r\n          rowModels.push({row: countRow, content: temp});\r\n          temp = [];\r\n          countRow++;\r\n        }\r\n        if (index == imageModels.length - 1) {\r\n          rowModels.push({row: countRow, content: temp});\r\n        }\r\n      })\r\n      return rowModels;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl} from \"@angular/forms\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {AuthenticationActions} from \"../app-state/actions/authentication-action\";\nimport {GoogleUserLogin, UserLoginModel} from \"../domain/userModel/UserLoginModel\";\nimport {MatDialogRef} from \"@angular/material/dialog\";\nimport {UserAuthenticationService} from \"../../serviceV2/user-authentication.service\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {Location} from \"@angular/common\";\nimport LoggedUserDetails = AuthenticationActions.LoggedUserDetails;\nimport {log} from \"util\";\nimport {GoogleLoginProvider, SocialAuthService} from \"angularx-social-login\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {RequestStatusState} from \"../app-state/states/request-status.state\";\nimport {RequestMessageAction} from \"../app-state/actions/request-message.action\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public formGroup;\n  public emailFormField = new FormControl('');\n  public passwordFormField = new FormControl('');\n\n  @Select(RequestStatusState.getStatus) $requestStatus;\n\n  constructor(private formBuilder: FormBuilder,\n              private store: Store,\n              private dialogRef: MatDialogRef<LoginComponent>,\n              private authService: UserAuthenticationService,\n              private location: Location,\n              private googleAuthService: SocialAuthService) {\n\n    this.formGroup = this.formBuilder.group({\n      email: this.emailFormField,\n      password: this.passwordFormField\n    })\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new RequestMessageAction(null))\n  }\n\n  public login(): void {\n    const email = this.formGroup.get('email').value\n    const password = this.formGroup.get('password').value;\n    this.store\n      .dispatch(\n        new AuthenticationActions.LoginAction(\n          new UserLoginModel(\n            email,\n            password\n          )\n        )).subscribe(value =>\n      this.authService.isLoggedIn()\n        .subscribe(value1 => {\n          console.log(value1);\n          this.store.dispatch(new LoggedUserDetails(value1.body.userId));\n          this.close();\n        }));\n  }\n\n  googleLogin(): void {\n    this.googleAuthService.signIn(GoogleLoginProvider.PROVIDER_ID)\n      .then(value => {\n        this.store.dispatch(new AuthenticationActions.LoginAction(\n          new GoogleUserLogin(value.email,\n            value.firstName, value.lastName,\n            value.photoUrl, value.idToken)\n        )).subscribe(value1 => {\n          this.store.dispatch(new AuthenticationActions.IsLoggedIn())\n            .subscribe(value2 =>\n              this.store.dispatch(\n                new LoggedUserDetails(value2.Authentication.user.userId))\n            )\n\n        });\n      });\n    this.close();\n  }\n\n  public close(): void {\n    // this.store.dispatch(new Navigate(['welcome']))\n    this.dialogRef.close();\n  }\n\n}\n","<mat-dialog-content class=\"content\" [formGroup]=\"formGroup\">\n  <h1 style=\"font-family: 'agave Nerd Font',cursive\">\n    <strong>Login</strong>\n  </h1>\n  <!--  <div class=\"icon\" >-->\n  <!--    <mat-icon style=\"font-size: 60px\">account_box</mat-icon>-->\n  <!--    -->\n  <!--  </div>-->\n  <p>\n    <mat-form-field [style.width.px]=330>\n      <mat-label>Email</mat-label>\n      <input [style.fontSize.px]=\"15\"\n             matInput [formControl]=\"emailFormField\">\n    </mat-form-field>\n  </p>\n  <p>\n    <mat-form-field [style.width.px]=330>\n      <mat-label>Password</mat-label>\n      <input [style.fontSize.px]=\"15\" type=\"password\"\n             matInput [formControl]=\"passwordFormField\">\n    </mat-form-field>\n  </p>\n<!--  <mat-grid-list gutterSize=\"10px\" cols=\"1\" rowHeight=\"220px\">-->\n<!--    <mat-grid-tile>-->\n<!--      <div class=\"container2\">-->\n<!--        -->\n<!--        -->\n<!--      </div>-->\n<!--    </mat-grid-tile>-->\n<!--  </mat-grid-list>-->\n</mat-dialog-content>\n<div class=\"container\">\n  <mat-dialog-actions>\n    <div style=\"display: flex; flex-direction: row; align-content: space-evenly\">\n      <button id=\"loginBtn\" (click)=\"login()\" mat-raised-button color=\"primary\">Login</button>\n      <button (click)=\"close()\" mat-raised-button color=\"warn\">Close</button>\n      <button (click)=\"googleLogin()\" mat-icon-button>\n        <img src=\"../../../assets/btn_google_signin_dark_normal_web.png\" alt=\"FOO\">\n      </button>\n    </div>\n    <mat-error style=\"margin-top: 10px; display: flex; justify-content: flex-start\" *ngIf=\"$requestStatus | async as status\">\n      {{ status.message }}\n    </mat-error>\n  </mat-dialog-actions>\n</div>\n\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {TagModel} from \"../domain/tagModel/tag-model\";\nimport {distinctUntilChanged, switchMap, tap, throttleTime} from \"rxjs/operators\";\nimport { Country, Region, ZipCodeAndCity} from \"../domain/address-model/addres.view.model\";\nimport {GetZipCodesAndCitiesByRegion} from \"../app-state/actions/address-validation-action\";\nimport {SearchRequestService} from \"../../serviceV2/search.request.service\";\nimport {environment} from \"../../../environments/environment\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddressValidationService {\n  private readonly SEARCH_URL: string = environment.apiUrl + \"addresses/validate/\";\n  private readonly COUNTRIES: string = environment.apiUrl + \"addresses/get/all/countries\";\n  private readonly REGIONS: string = environment.apiUrl + \"addresses/regions/\";\n  private readonly ZIPCODES: string =  environment.apiUrl + \"query/searchByZipAndRegion/\";\n  constructor(private  http: HttpClient,\n              private searchReqService: SearchRequestService<ZipCodeAndCity>) { }\n\n  public getCountries(): Observable<Country[]> {\n    return this.http.get<Country[]>(this.COUNTRIES);\n  }\n\n  public getRegionsByCountry(countryName: string): Observable<Region[]> {\n    return this.http.get<Region[]>(this.REGIONS + countryName);\n  }\n\n  public getZipCodesAndCitiesByRegion(region: string): Observable<ZipCodeAndCity[]> {\n    return this.http.get<ZipCodeAndCity[]>(this.ZIPCODES + region);\n  }\n\n  public getZipCodesAndCitiesByRegion2(zipcode: Observable<string>, region: string): Observable<ZipCodeAndCity[]> {\n    return this.searchReqService.search(zipcode, this.ZIPCODES + region + \", \");\n  }\n}\n","<mat-dialog-content class=\"profile-icon\" [formGroup]=\"formGroup\">\n  <h1 style=\"font-family: 'agave Nerd Font',cursive\">\n    <strong>Registration</strong>\n  </h1>\n  <!--  <div class=\"icon\" >-->\n  <!--    <mat-icon style=\"font-size: 60px\">account_box</mat-icon>-->\n  <!--    -->\n  <!--  </div>-->\n  <mat-grid-list gutterSize=\"10px\" cols=\"2\" rowHeight=\"290px\">\n    <mat-grid-tile>\n      <div  class=\"container2\">\n        <mat-form-field [style.width.px]=300>\n          <mat-label>Firstname</mat-label>\n          <input [formControl]=\"firstNameFormField\" [style.fontSize.px]=\"15\"\n                 matInput>\n          <mat-error>Firstname is required</mat-error>\n        </mat-form-field>\n        <mat-form-field [style.width.px]=300>\n          <mat-label>Lastname</mat-label>\n          <input [style.fontSize.px]=\"15\"\n                 matInput [formControl]=\"formGroup.get('lastName')\">\n          <mat-error>Lastname is required</mat-error>\n        </mat-form-field>\n        <mat-form-field [style.width.px]=300>\n          <mat-label>Email</mat-label>\n          <input name=\"email\" type=\"email\" ngModel [email]=\"true\"\n                 [style.fontSize.px]=\"15\"\n                 matInput [formControl]=\"emailFormField\"\n                 pattern=\"[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}\">\n          <mat-error>Invalid email</mat-error>\n        </mat-form-field>\n        <mat-dialog-actions>\n          <button [disabled]=\"!formGroup.valid || invalid\" (click)=\"register()\" mat-raised-button color=\"primary\">Register</button>\n          <button (click)=\"closeDialog()\" mat-raised-button color=\"warn\">Close</button>\n          <br>\n          <mat-error style=\"margin-top: 10px\" *ngIf=\"$requestStatus | async as status\">\n            {{status.message}}\n          </mat-error>\n        </mat-dialog-actions>\n\n      </div>\n    </mat-grid-tile>\n    <mat-grid-tile>\n      <div class=\"container2\">\n        <mat-form-field [style.width.px]=300>\n          <mat-label>Password</mat-label>\n          <input (ngModelChange)=\"checkPasswords()\"\n                 [style.fontSize.px]=\"15\" type=\"password\"\n                 matInput [formControl]=\"passwordFormField\">\n          <mat-error>Invalid password</mat-error>\n        </mat-form-field>\n        <mat-form-field [style.width.px]=300>\n          <mat-label>Confirm password</mat-label>\n          <input (ngModelChange)=\"checkPasswords()\"\n                 [style.fontSize.px]=\"15\" type=\"password\"\n                 matInput [formControl]=\"confirmPwdFormField\">\n          <mat-error>Invalid password</mat-error>\n        </mat-form-field>\n        <!--<mat-form-field  [style.width.px]=300>\n          <mat-label>Country</mat-label>\n          <mat-select [formControl]=\"countryFormField\" (selectionChange)=\"selectedCountry($event)\">\n            <mat-option\n              *ngFor=\"let country of fetchedCountries$ | async\"\n              [value]=\"country.name\">\n              {{ country.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n          <mat-form-field [style.width.px]=300>\n            <mat-label>Region</mat-label>\n            <mat-select [formControl]=\"regionFormField\" (selectionChange)=\"selectedRegion($event)\">\n              <mat-option\n                *ngFor=\"let region of fetchedRegions$ | async\"\n                [value]=\"region.region\">\n                {{ region.region }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n        <div style=\"display: flex; flex-direction: row;\n              align-content: space-between;\" class=\"region_zip\">\n          <mat-form-field style=\"margin-right: 5px\" [style.width.px]=100>\n            <mat-label>Zipcode</mat-label>\n            <input [formControl]=\"formGroup.get('zipcode')\" (keyup.enter)=\"selectPostalAndSetCity(element.value)\" id=\"search-input\" type=\"text\" #element\n                   (keyup)=\"searchTerm$.next($event.target.value)\"\n                   matInput [matAutocomplete]=\"auto\">\n            <mat-autocomplete style=\"width: 200px\" #auto=\"matAutocomplete\">\n              <mat-option #matOption (click)=\"selectPostalAndSetCity(matOption.value)\"\n                          *ngFor=\"let zipAndCity of fetchedZipcodesAndCities$ | async\"\n                          [value]=\"zipAndCity.zipCode\">\n                {{ zipAndCity.zipCode }}\n              </mat-option>\n            </mat-autocomplete>\n          </mat-form-field>\n\n          <mat-form-field [style.width.px]=190>\n            <mat-label>City</mat-label>\n            <input [style.fontSize.px]=\"15\"\n                   matInput formControlName=\"city\">\n          </mat-form-field>\n        </div>\n          <mat-form-field [style.width.px]=300>\n            <mat-label>Street</mat-label>\n            <input [style.fontSize.px]=\"15\"\n                   matInput formControlName=\"street\">\n          </mat-form-field>-->\n        <div class=\"container\">\n\n        </div>\n      </div>\n    </mat-grid-tile>\n  </mat-grid-list>\n</mat-dialog-content>\n\n","import {Component, OnInit} from '@angular/core';\nimport {BaseUserDetails, UserRegistrationModel} from \"../domain/userModel/user-details.model\";\nimport {UserAuthenticationService} from \"../../serviceV2/user-authentication.service\";\nimport {debounceTime, switchMap} from \"rxjs/operators\";\nimport {LoggedInUserModel, UserLoginModel} from \"../domain/userModel/UserLoginModel\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {AuthenticationActions} from \"../app-state/actions/authentication-action\";\nimport LoginAction = AuthenticationActions.LoginAction;\nimport {FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {MatDialogRef} from \"@angular/material/dialog\";\nimport {\n  GetZipCodesAndCitiesByRegion,\n  GetCountriesAction,\n  GetRegionsAction\n} from \"../app-state/actions/address-validation-action\";\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\nimport {AddressValidationState} from \"../app-state/states/address.validation.state\";\nimport {QueryTagAction} from \"../app-state/actions/query-tag-action\";\nimport {AddressValidationService} from \"../service/address-validation.service\";\nimport {Country, Region, ZipCodeAndCity} from \"../domain/address-model/addres.view.model\";\nimport {MatSelectChange} from \"@angular/material/select\";\nimport {ImagesByTagState} from \"../app-state/states/images-by-tag-state\";\nimport {ImageModel} from \"../domain/imageModel/image.model\";\nimport {SignupState} from \"../app-state/states/signup.state\";\nimport {RequestStatusState} from \"../app-state/states/request-status.state\";\nimport {RequestMessageAction} from \"../app-state/actions/request-message.action\";\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n  public disabled: boolean = true;\n  public invalid: boolean = true;\n  public formGroup;\n  countries$ = new Subject<Country[]>();\n  regions$ = new Subject<Region[]>();\n  currentCounty;\n  color = new FormControl(\"Warn\")\n  zipCodeAndCities$ = new Subject<ZipCodeAndCity[]>();\n  zipAndCities: ZipCodeAndCity[];\n  errorMsg: string = \"Password required\";\n\n\n  @Select(AddressValidationState.countries)\n  fetchedCountries$: Observable<Country[]>;\n\n  @Select(AddressValidationState.regions)\n  fetchedRegions$: Observable<Region[]>;\n\n  @Select(AddressValidationState.zipCodesAndCities)\n  fetchedZipcodesAndCities$: Observable<ZipCodeAndCity[]>;\n\n  @Select(SignupState.registrationModel)\n  registrationModel$: Observable<BaseUserDetails>;\n\n\n  @Select(RequestStatusState.getStatus) $requestStatus;\n\n\n  // form fields\n  public countryFormField =\n    new FormControl('', [Validators.required]);\n  public lastNameFormField =\n    new FormControl('', [Validators.required]);\n  public firstNameFormField =\n    new FormControl('', [Validators.required]);\n  public cityFormField =\n    new FormControl({value: '', disabled: true},\n      [Validators.required]);\n  public emailFormField =\n    new FormControl('', [Validators.required]);\n  public passwordFormField =\n    new FormControl('', [Validators.required]);\n  public confirmPwdFormField =\n    new FormControl('', [Validators.required]);\n\n  public streetFormField =\n    new FormControl({value: '', disabled: true},\n      [Validators.required]);\n  public regionFormField =\n    new FormControl({value: '', disabled: true},\n      [Validators.required]);\n  public zipCodeFormField =\n    new FormControl({value: '', disabled: true},\n      [Validators.required]);\n\n  searchTerm$ = new Subject<string>();\n\n  constructor(private authService: UserAuthenticationService,\n              private store: Store,\n              private formBuilder: FormBuilder,\n              private dialogRef: MatDialogRef<SignupComponent>,\n              private addressService: AddressValidationService) {\n    this.formGroup = this.formBuilder.group({\n      firstName: this.firstNameFormField,\n      lastName: this.lastNameFormField,\n      /*street: this.streetFormField,\n      city: this.cityFormField,\n      country: this.countryFormField,\n      region: this.regionFormField,\n      zipcode: this.zipCodeFormField,*/\n      email: this.emailFormField,\n      password: this.passwordFormField,\n      confirmPassword: this.confirmPwdFormField\n    })\n\n    /*this.formGroup.get('zipcode').disable();*/\n\n\n  }\n\n  ngOnInit(): void {\n\n    this.store.dispatch(new RequestMessageAction(null))\n\n    this.registrationModel$.subscribe(\n      value => {\n        if (value.email.length > 1) {\n          this.store.dispatch(new AuthenticationActions.LoginAction(\n            new UserLoginModel(value.email, value.password)\n          )).pipe(switchMap(resp =>\n            this.store.dispatch(\n              new AuthenticationActions.LoggedUserDetails(\n                resp.Authentication.user.userId))\n          )).subscribe(value1 => value1)\n        }\n      }\n    )\n    /*this.validateCityAndZipFormFields();*/\n    this.store.dispatch(new GetCountriesAction())\n    /*this.fetchedZipcodesAndCities$\n      .subscribe(value => this.zipAndCities = value)*/\n  }\n\n  /*private validateCityAndZipFormFields() {\n    this.validateZipCodeFormField();\n    this.validateStreetFormField();\n  }\n\n  private validateZipCodeFormField() {\n    this.formGroup\n      .controls['zipcode']\n      .valueChanges\n      .subscribe(val => {\n        if (this.formGroup.controls['city'].disabled)\n          this.invalid = true;\n      })\n  }\n\n  private validateStreetFormField() {\n    this.formGroup\n      .controls['street']\n      .valueChanges\n      .subscribe(val => {\n        if (this.formGroup.controls['street'].value.length > 0)\n          this.invalid = false;\n        else this.invalid = true;\n      })\n  }*/\n\n\n  closeDialog(): void {\n    // this.dialogRef.close(this.formGroup.value);\n    this.dialogRef.close();\n  }\n\n  selectPostalAndSetCity(value: string) {\n    this.zipAndCities\n      .filter(value1 => value1.zipCode === value)\n      .forEach(value1 => this.cityFormField.setValue(value1.city))\n    this.streetFormField.enable();\n  }\n\n  register() {\n\n    const registrationModel = new UserRegistrationModel(\n      this.formGroup.controls['firstName'].value,\n      this.formGroup.controls['lastName'].value,\n      this.formGroup.controls['email'].value,\n      this.formGroup.controls['password'].value,\n      null, null, null, null\n    );\n\n\n\n    /*const registrationModel = new UserRegistrationModel(\n      this.formGroup.controls['firstName'].value,\n      this.formGroup.controls['lastName'].value,\n      this.formGroup.controls['email'].value,\n      this.formGroup.controls['password'].value,\n      this.formGroup.controls['street'].value,\n      this.formGroup.controls['region'].value,\n      this.formGroup.controls['zipcode'].value,\n      this.formGroup.controls['country'].value\n    );*/\n    this.store\n      .dispatch(new AuthenticationActions.SignUpAction(registrationModel))\n      .subscribe(value => this.authService.isLoggedIn())\n\n    /*this.closeDialog();*/\n  }\n\n  /*selectedCountry($event: MatSelectChange) {\n    console.log(this.disabled);\n    this.disabled = false;\n    console.log(this.disabled);\n    this.store.dispatch(new GetRegionsAction($event.value))\n      .subscribe(value => this.regionFormField.enable());\n  }*/\n\n  selectedRegion($event: MatSelectChange) {\n    this.formGroup.get('zipcode').enable();\n    this.searchTerm$\n      .pipe(debounceTime(1000))\n      .subscribe(value => {\n        this.store\n          .dispatch(\n            new GetZipCodesAndCitiesByRegion(\n              new BehaviorSubject(value),\n              $event.value\n            )\n          )\n      });\n  }\n\n  changeZipCode($event: MatSelectChange) {\n  }\n\n  hasError = (controlName: string, errorName: string) => {\n    return this.formGroup.controls['firstName'].hasError(errorName)\n  }\n\n  checkPasswords() {\n    const length = this.formGroup.get('password').value.length > 0;\n    const confirmPwd = this.formGroup.controls['confirmPassword'].value;\n    const pwd = this.formGroup.get('password').value;\n\n    if (confirmPwd !== pwd && confirmPwd.length > 0 && length)\n      this.formGroup.controls['password']\n        .setErrors({'incorrect': true});\n\n    else if (length && confirmPwd.length > 0 && confirmPwd === pwd) {\n      this.formGroup.controls['password']\n        .setErrors(null);\n      this.invalid = false;\n    }\n\n\n  }\n}\n","<app-search-toolbar></app-search-toolbar>\n<div class=\"container\">\n  <div class=\"filler_left\"></div>\n  <div class=\"left\">\n    <div class=\"profile_icon\">\n      <button *ngIf=\"!($profileImg | async)\" disabled mat-icon-button\n              aria-label=\"Example icon button with a home icon\">\n        <mat-icon style=\"font-size: 195px\">account_circle</mat-icon>\n      </button>\n      <img class=\"profile-img\" [src]=\"$profileImg | async\" alt=\"\">\n    </div>\n  </div>\n  <div class=\"right\">\n    <div class=\"title\">\n      <div class=\"user-name\">\n        <span *ngIf=\"$name | async\" style=\"font-size: 40px; margin-top: 2%; margin-bottom: 6px\">\n        <strong>\n          {{$name | async}}\n        </strong>\n      </span>\n      </div>\n      <br>\n      <div class=\"user-name\">\n        <!--        <p style=\"font-size: 17px\">-->\n        <!--          -->\n        <!--        </p>-->\n        <p style=\"font-size: 17px; line-height: 28px\">\n          Download free, beautiful high-quality photos curated by {{ $name | async }}.\n        </p>\n      </div>\n      <button *ngIf=\"$isOwner | async\" style=\"\" mat-icon-button>\n        <mat-icon>edit</mat-icon>\n        Edit profile\n      </button>\n    </div>\n  </div>\n</div>\n\n<mat-tab-group mat-stretch-tabs class=\"mat-tab-group\">\n  <mat-tab class=\"tab\" label=\"Gallery\">\n    <ng-template mat-tab-label>\n      <mat-icon class=\"example-tab-icon\">photo_library</mat-icon>\n      Images\n    </ng-template>\n    <app-image-content [isProfile]=\"true\" [data]=\"$byUserIdData | async\"></app-image-content>\n<!--    <div class=\"container-2\">-->\n<!--      <div *ngFor=\"let item of $byUserIdData | async; index as i;\" class=\"tile\">-->\n<!--        <div class=\"tile-container\">-->\n<!--          <div class=\"img-tile\">-->\n<!--            <img class=\"img\" width=\"500px\" height=\"520px\" [src]=\"item.link\">-->\n<!--          </div>-->\n<!--          <div class=\"details\">-->\n<!--            <div class=\"content\">-->\n<!--              <button class=\"btn\" mat-icon-button>-->\n<!--                <mat-icon style=\"font-size: 70px\">account_circle</mat-icon>-->\n<!--              </button>-->\n<!--              <a mat-button href=\"#\">-->\n<!--                <h1>{{ 'User : @' + item.email.substr(0, item.email.indexOf('@')) }}</h1>-->\n<!--              </a>-->\n<!--            </div>-->\n<!--            <div class=\"content-btn\">-->\n<!--              <a target=\"_self\" [href]=\"downloadLink\" (click)=\"download(item.name, item.userId)\" mat-icon-button>-->\n<!--                <mat-icon style=\"font-size: 60px\">save_alt</mat-icon>-->\n<!--              </a>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--        </div>-->\n<!--      </div>-->\n<!--    </div>-->\n  </mat-tab>\n  <mat-tab label=\"Likes\">\n    <ng-template mat-tab-label>\n      <mat-icon class=\"example-tab-icon\">thumb_up</mat-icon>\n      Likes\n    </ng-template>\n  </mat-tab>\n  <mat-tab label=\"Third\"> Content 3</mat-tab>\n</mat-tab-group>\n\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {ImagesByUserIdState} from \"../app-state/states/images-by-user-id.state\";\nimport {ImagesByUserIDAction} from \"../app-state/actions/image.action\";\nimport {UserDetailsActions} from \"../app-state/actions/user-details.action\";\nimport {UserDetailsState} from \"../app-state/states/User-details.state\";\nimport {AuthenticationActions} from \"../app-state/actions/authentication-action\";\nimport {LoginStateModel} from \"../app-state/states/login.state.model\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {LoggedUserDetailsState} from \"../app-state/states/logged-user-details.state\";\nimport {LoggedInUserModel} from \"../domain/userModel/UserLoginModel\";\nimport {BaseUserDetails} from \"../domain/userModel/user-details.model\";\n\n@Component({\n  selector: 'app-user-gallery',\n  templateUrl: './user-gallery.component.html',\n  styleUrls: ['./user-gallery.component.scss']\n})\nexport class UserGalleryComponent implements OnInit {\n  @Select(ImagesByUserIdState.getData) $byUserIdData;\n  @Select(UserDetailsState.firstLastName) $name;\n  @Select(UserDetailsState.profileImgPath) $profileImg;\n  @Select(UserDetailsState.getState) $state;\n  @Select(LoginStateModel.loggedInUser) $loggedUser;\n  downloadLink: any;\n  $isOwner = new BehaviorSubject<boolean>(false);\n\n  constructor(private route: ActivatedRoute,\n              private store: Store) {\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap\n      .subscribe(param => {\n        const userId = param.get('userId');\n        this.store.dispatch(\n          [\n            new UserDetailsActions.GetUserDetails(userId),\n            new ImagesByUserIDAction(userId)\n          ]\n        )\n        this.$loggedUser.subscribe(user => {\n          if (user !== undefined && user !== null)\n            if (user.userId === userId) {\n              this.$isOwner.next(true);\n            }\n        })\n      })\n\n    // this.$state.subscribe(state => {\n    //   if (userId === state.userId) {\n    //     console.log(\"Super!!!!!!!!!\")\n    //   }\n    // })\n    // this.store.dispatch(new AuthenticationActions.IsLoggedIn())\n    //   .subscribe(value => {})\n    //\n    // this.$loggedUser.subscribe(user => {\n    //   if (user !== undefined && user !== null)\n    //     if (user.userId === userId) {\n    //       this.$isOwner.next(true);\n    //     }\n    //\n    //\n    // })\n\n  }\n\n  download(name: any, userId: any) {\n\n  }\n}\n","export class Base64ToBlobConverter {\r\n  public static dataURItoBlob(dataURI): Blob {\r\n    const byteString = window.atob(dataURI);\r\n    const arrayBuffer = new ArrayBuffer(byteString.length);\r\n    const int8Array = new Uint8Array(arrayBuffer);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      int8Array[i] = byteString.charCodeAt(i);\r\n    }\r\n    const blob = new Blob([int8Array], { type: 'image/png' });\r\n    return blob;\r\n  }\r\n}\r\n","import {Observable} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {Store} from \"@ngxs/store\";\r\nimport {CropAndDownload} from \"../app-state/actions/image.action\";\r\nimport {\r\n  CropAndDownloadStateModel,\r\n  GetBase64ForDownloadCropperState\r\n} from \"../app-state/states/get-base64-for-downloadCropper.state\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport {GetImageByIdState} from \"../app-state/states/get-image-by-id.state\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlobToBase64Pipe {\r\n  constructor(private store: Store) { }\r\n\r\n\r\n  public getBase64(source: Observable<ArrayBuffer>): Observable<string> {\r\n    return source.pipe(map(byteArray => {\r\n      let blob = new Blob([byteArray],{type:'application/octet-binary'});\r\n      FileSaver.saveAs(blob, this.store.selectSnapshot(GetImageByIdState.getImageDetail).name);\r\n      return this.store.selectSnapshot(GetBase64ForDownloadCropperState.getModel).base64\r\n    }))\r\n  }\r\n\r\n}\r\n\r\n/*function base64Pipe() {\r\n  return function<T> (source: Observable<ArrayBuffer>): Observable<string> {\r\n    return source.pipe(map())\r\n  }\r\n}*/\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:8880/image-app/',\n  google_id: '200318745451-u9viua8onpt25sdmknka7i89uhdrknsd.apps.googleusercontent.com'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}